{"ast":null,"code":"'use strict';\n\nvar bigi = require('bigi'),\n  bs58 = require('bs58'),\n  ecurve = require('ecurve'),\n  Point = ecurve.Point,\n  secp256k1 = ecurve.getCurveByName('secp256k1'),\n  config = require('../config'),\n  operations = require('./serializer/src/operations'),\n  Signature = require('./ecc/src/signature'),\n  KeyPrivate = require('./ecc/src/key_private'),\n  PublicKey = require('./ecc/src/key_public'),\n  hash = require('./ecc/src/hash');\nvar Auth = {};\nvar transaction = operations.transaction;\nvar signed_transaction = operations.signed_transaction;\nAuth.verify = function (name, password, auths) {\n  var hasKey = false;\n  var roles = [];\n  for (var role in auths) {\n    roles.push(role);\n  }\n  var pubKeys = this.generateKeys(name, password, roles);\n  roles.forEach(function (role) {\n    if (auths[role][0][0] === pubKeys[role]) {\n      hasKey = true;\n    }\n  });\n  return hasKey;\n};\nAuth.generateKeys = function (name, password, roles) {\n  var pubKeys = {};\n  roles.forEach(function (role) {\n    var seed = name + role + password;\n    var brainKey = seed.trim().split(/[\\t\\n\\v\\f\\r ]+/).join(' ');\n    var hashSha256 = hash.sha256(brainKey);\n    var bigInt = bigi.fromBuffer(hashSha256);\n    var toPubKey = secp256k1.G.multiply(bigInt);\n    var point = new Point(toPubKey.curve, toPubKey.x, toPubKey.y, toPubKey.z);\n    var pubBuf = point.getEncoded(toPubKey.compressed);\n    var checksum = hash.ripemd160(pubBuf);\n    var addy = Buffer.concat([pubBuf, checksum.slice(0, 4)]);\n    pubKeys[role] = config.get('address_prefix') + bs58.encode(addy);\n  });\n  return pubKeys;\n};\n\n/**\n\t@arg {string} name - blockchain account name\n\t@arg {string} password - very strong password typically no shorter than a private key\n\t@arg {array} roles - defaults to standard Hive blockchain-level roles\n*/\nAuth.getPrivateKeys = function (name, password) {\n  var roles = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ['owner', 'active', 'posting', 'memo'];\n  var privKeys = {};\n  roles.forEach(function (role) {\n    privKeys[role] = this.toWif(name, password, role);\n    privKeys[role + 'Pubkey'] = this.wifToPublic(privKeys[role]);\n  }.bind(this));\n  return privKeys;\n};\nAuth.isWif = function (privWif) {\n  var isWif = false;\n  try {\n    var bufWif = new Buffer(bs58.decode(privWif));\n    var privKey = bufWif.slice(0, -4);\n    var checksum = bufWif.slice(-4);\n    var newChecksum = hash.sha256(privKey);\n    newChecksum = hash.sha256(newChecksum);\n    newChecksum = newChecksum.slice(0, 4);\n    if (checksum.toString() == newChecksum.toString()) {\n      isWif = true;\n    }\n  } catch (e) {}\n  return isWif;\n};\nAuth.toWif = function (name, password, role) {\n  var seed = name + role + password;\n  var brainKey = seed.trim().split(/[\\t\\n\\v\\f\\r ]+/).join(' ');\n  var hashSha256 = hash.sha256(brainKey);\n  var privKey = Buffer.concat([new Buffer([0x80]), hashSha256]);\n  var checksum = hash.sha256(privKey);\n  checksum = hash.sha256(checksum);\n  checksum = checksum.slice(0, 4);\n  var privWif = Buffer.concat([privKey, checksum]);\n  return bs58.encode(privWif);\n};\nAuth.wifIsValid = function (privWif, pubWif) {\n  return this.wifToPublic(privWif) == pubWif;\n};\nAuth.wifToPublic = function (privWif) {\n  var pubWif = KeyPrivate.fromWif(privWif);\n  pubWif = pubWif.toPublic().toString();\n  return pubWif;\n};\nAuth.isPubkey = function (pubkey, address_prefix) {\n  return PublicKey.fromString(pubkey, address_prefix) != null;\n};\nAuth.signMessage = function (msg, privWif) {\n  return Signature.sign(msg, privWif).toHex();\n};\nAuth.signTransaction = function (trx, keys) {\n  var signatures = [];\n  if (trx.signatures) {\n    signatures = [].concat(trx.signatures);\n  }\n  var cid = new Buffer(config.get('chain_id'), 'hex');\n  var buf = transaction.toBuffer(trx);\n  for (var key in keys) {\n    var sig = Signature.signBuffer(Buffer.concat([cid, buf]), keys[key]);\n    signatures.push(sig.toBuffer());\n  }\n  return signed_transaction.toObject(Object.assign(trx, {\n    signatures: signatures\n  }));\n};\nmodule.exports = Auth;","map":{"version":3,"names":["bigi","require","bs58","ecurve","Point","secp256k1","getCurveByName","config","operations","Signature","KeyPrivate","PublicKey","hash","Auth","transaction","signed_transaction","verify","name","password","auths","hasKey","roles","role","push","pubKeys","generateKeys","forEach","seed","brainKey","trim","split","join","hashSha256","sha256","bigInt","fromBuffer","toPubKey","G","multiply","point","curve","x","y","z","pubBuf","getEncoded","compressed","checksum","ripemd160","addy","Buffer","concat","slice","get","encode","getPrivateKeys","arguments","length","undefined","privKeys","toWif","wifToPublic","bind","isWif","privWif","bufWif","decode","privKey","newChecksum","toString","e","wifIsValid","pubWif","fromWif","toPublic","isPubkey","pubkey","address_prefix","fromString","signMessage","msg","sign","toHex","signTransaction","trx","keys","signatures","cid","buf","toBuffer","key","sig","signBuffer","toObject","Object","assign","module","exports"],"sources":["C:/Users/sunil/kalakaari/node_modules/@hiveio/hive-js/lib/auth/index.js"],"sourcesContent":["'use strict';\n\nvar bigi = require('bigi'),\n    bs58 = require('bs58'),\n    ecurve = require('ecurve'),\n    Point = ecurve.Point,\n    secp256k1 = ecurve.getCurveByName('secp256k1'),\n    config = require('../config'),\n    operations = require('./serializer/src/operations'),\n    Signature = require('./ecc/src/signature'),\n    KeyPrivate = require('./ecc/src/key_private'),\n    PublicKey = require('./ecc/src/key_public'),\n    hash = require('./ecc/src/hash');\n\nvar Auth = {};\nvar transaction = operations.transaction;\nvar signed_transaction = operations.signed_transaction;\n\nAuth.verify = function (name, password, auths) {\n\tvar hasKey = false;\n\tvar roles = [];\n\tfor (var role in auths) {\n\t\troles.push(role);\n\t}\n\tvar pubKeys = this.generateKeys(name, password, roles);\n\troles.forEach(function (role) {\n\t\tif (auths[role][0][0] === pubKeys[role]) {\n\t\t\thasKey = true;\n\t\t}\n\t});\n\treturn hasKey;\n};\n\nAuth.generateKeys = function (name, password, roles) {\n\tvar pubKeys = {};\n\troles.forEach(function (role) {\n\t\tvar seed = name + role + password;\n\t\tvar brainKey = seed.trim().split(/[\\t\\n\\v\\f\\r ]+/).join(' ');\n\t\tvar hashSha256 = hash.sha256(brainKey);\n\t\tvar bigInt = bigi.fromBuffer(hashSha256);\n\t\tvar toPubKey = secp256k1.G.multiply(bigInt);\n\t\tvar point = new Point(toPubKey.curve, toPubKey.x, toPubKey.y, toPubKey.z);\n\t\tvar pubBuf = point.getEncoded(toPubKey.compressed);\n\t\tvar checksum = hash.ripemd160(pubBuf);\n\t\tvar addy = Buffer.concat([pubBuf, checksum.slice(0, 4)]);\n\t\tpubKeys[role] = config.get('address_prefix') + bs58.encode(addy);\n\t});\n\treturn pubKeys;\n};\n\n/**\n\t@arg {string} name - blockchain account name\n\t@arg {string} password - very strong password typically no shorter than a private key\n\t@arg {array} roles - defaults to standard Hive blockchain-level roles\n*/\nAuth.getPrivateKeys = function (name, password) {\n\tvar roles = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ['owner', 'active', 'posting', 'memo'];\n\n\tvar privKeys = {};\n\troles.forEach(function (role) {\n\t\tprivKeys[role] = this.toWif(name, password, role);\n\t\tprivKeys[role + 'Pubkey'] = this.wifToPublic(privKeys[role]);\n\t}.bind(this));\n\treturn privKeys;\n};\n\nAuth.isWif = function (privWif) {\n\tvar isWif = false;\n\ttry {\n\t\tvar bufWif = new Buffer(bs58.decode(privWif));\n\t\tvar privKey = bufWif.slice(0, -4);\n\t\tvar checksum = bufWif.slice(-4);\n\t\tvar newChecksum = hash.sha256(privKey);\n\t\tnewChecksum = hash.sha256(newChecksum);\n\t\tnewChecksum = newChecksum.slice(0, 4);\n\t\tif (checksum.toString() == newChecksum.toString()) {\n\t\t\tisWif = true;\n\t\t}\n\t} catch (e) {}\n\treturn isWif;\n};\n\nAuth.toWif = function (name, password, role) {\n\tvar seed = name + role + password;\n\tvar brainKey = seed.trim().split(/[\\t\\n\\v\\f\\r ]+/).join(' ');\n\tvar hashSha256 = hash.sha256(brainKey);\n\tvar privKey = Buffer.concat([new Buffer([0x80]), hashSha256]);\n\tvar checksum = hash.sha256(privKey);\n\tchecksum = hash.sha256(checksum);\n\tchecksum = checksum.slice(0, 4);\n\tvar privWif = Buffer.concat([privKey, checksum]);\n\treturn bs58.encode(privWif);\n};\n\nAuth.wifIsValid = function (privWif, pubWif) {\n\treturn this.wifToPublic(privWif) == pubWif;\n};\n\nAuth.wifToPublic = function (privWif) {\n\tvar pubWif = KeyPrivate.fromWif(privWif);\n\tpubWif = pubWif.toPublic().toString();\n\treturn pubWif;\n};\n\nAuth.isPubkey = function (pubkey, address_prefix) {\n\treturn PublicKey.fromString(pubkey, address_prefix) != null;\n};\n\nAuth.signMessage = function (msg, privWif) {\n\treturn Signature.sign(msg, privWif).toHex();\n};\n\nAuth.signTransaction = function (trx, keys) {\n\tvar signatures = [];\n\tif (trx.signatures) {\n\t\tsignatures = [].concat(trx.signatures);\n\t}\n\n\tvar cid = new Buffer(config.get('chain_id'), 'hex');\n\tvar buf = transaction.toBuffer(trx);\n\n\tfor (var key in keys) {\n\t\tvar sig = Signature.signBuffer(Buffer.concat([cid, buf]), keys[key]);\n\t\tsignatures.push(sig.toBuffer());\n\t}\n\n\treturn signed_transaction.toObject(Object.assign(trx, { signatures: signatures }));\n};\n\nmodule.exports = Auth;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}