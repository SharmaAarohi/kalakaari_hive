{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encrypt = encrypt;\nexports.decrypt = decrypt;\nvar _secureRandom = require('secure-random');\nvar _secureRandom2 = _interopRequireDefault(_secureRandom);\nvar _bytebuffer = require('bytebuffer');\nvar _bytebuffer2 = _interopRequireDefault(_bytebuffer);\nvar _browserifyAes = require('browserify-aes');\nvar _browserifyAes2 = _interopRequireDefault(_browserifyAes);\nvar _assert = require('assert');\nvar _assert2 = _interopRequireDefault(_assert);\nvar _key_public = require('./key_public');\nvar _key_public2 = _interopRequireDefault(_key_public);\nvar _key_private = require('./key_private');\nvar _key_private2 = _interopRequireDefault(_key_private);\nvar _hash = require('./hash');\nvar _hash2 = _interopRequireDefault(_hash);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar Long = _bytebuffer2.default.Long;\n\n/**\n    Spec: http://localhost:3002/steem/@dantheman/how-to-encrypt-a-memo-when-transferring-steem\n    @throws {Error|TypeError} - \"Invalid Key, ...\"\n    @arg {PrivateKey} private_key - required and used for decryption\n    @arg {PublicKey} public_key - required and used to calcualte the shared secret\n    @arg {string} [nonce = uniqueNonce()] - assigned a random unique uint64\n\n    @return {object}\n    @property {string} nonce - random or unique uint64, provides entropy when re-using the same private/public keys.\n    @property {Buffer} message - Plain text message\n    @property {number} checksum - shared secret checksum\n*/\nfunction encrypt(private_key, public_key, message) {\n  var nonce = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : uniqueNonce();\n  return crypt(private_key, public_key, nonce, message);\n}\n\n/**\n    Spec: http://localhost:3002/steem/@dantheman/how-to-encrypt-a-memo-when-transferring-steem\n    @arg {PrivateKey} private_key - required and used for decryption\n    @arg {PublicKey} public_key - required and used to calcualte the shared secret\n    @arg {string} nonce - random or unique uint64, provides entropy when re-using the same private/public keys.\n    @arg {Buffer} message - Encrypted or plain text message\n    @arg {number} checksum - shared secret checksum\n    @throws {Error|TypeError} - \"Invalid Key, ...\"\n    @return {Buffer} - message\n*/\nfunction decrypt(private_key, public_key, nonce, message, checksum) {\n  return crypt(private_key, public_key, nonce, message, checksum).message;\n}\n\n/**\n    @arg {Buffer} message - Encrypted or plain text message (see checksum)\n    @arg {number} checksum - shared secret checksum (null to encrypt, non-null to decrypt)\n*/\nfunction crypt(private_key, public_key, nonce, message, checksum) {\n  private_key = toPrivateObj(private_key);\n  if (!private_key) throw new TypeError('private_key is required');\n  public_key = toPublicObj(public_key);\n  if (!public_key) throw new TypeError('public_key is required');\n  nonce = toLongObj(nonce);\n  if (!nonce) throw new TypeError('nonce is required');\n  if (!Buffer.isBuffer(message)) {\n    if (typeof message !== 'string') throw new TypeError('message should be buffer or string');\n    message = new Buffer(message, 'binary');\n  }\n  if (checksum && typeof checksum !== 'number') throw new TypeError('checksum should be a number');\n  var S = private_key.get_shared_secret(public_key);\n  var ebuf = new _bytebuffer2.default(_bytebuffer2.default.DEFAULT_CAPACITY, _bytebuffer2.default.LITTLE_ENDIAN);\n  ebuf.writeUint64(nonce);\n  ebuf.append(S.toString('binary'), 'binary');\n  ebuf = new Buffer(ebuf.copy(0, ebuf.offset).toBinary(), 'binary');\n  var encryption_key = _hash2.default.sha512(ebuf);\n\n  // D E B U G\n  // console.log('crypt', {\n  //     priv_to_pub: private_key.toPublicKey().toString(),\n  //     pub: public_key.toString(),\n  //     nonce: nonce.toString(),\n  //     message: message.length,\n  //     checksum,\n  //     S: S.toString('hex'),\n  //     encryption_key: encryption_key.toString('hex'),\n  // })\n\n  var iv = encryption_key.slice(32, 48);\n  var key = encryption_key.slice(0, 32);\n\n  // check is first 64 bit of sha256 hash treated as uint64_t truncated to 32 bits.\n  var check = _hash2.default.sha256(encryption_key);\n  check = check.slice(0, 4);\n  var cbuf = _bytebuffer2.default.fromBinary(check.toString('binary'), _bytebuffer2.default.DEFAULT_CAPACITY, _bytebuffer2.default.LITTLE_ENDIAN);\n  check = cbuf.readUint32();\n  if (checksum) {\n    if (check !== checksum) throw new Error('Invalid key');\n    message = cryptoJsDecrypt(message, key, iv);\n  } else {\n    message = cryptoJsEncrypt(message, key, iv);\n  }\n  return {\n    nonce: nonce,\n    message: message,\n    checksum: check\n  };\n}\n\n/** This method does not use a checksum, the returned data must be validated some other way.\n    @arg {string|Buffer} ciphertext - binary format\n    @return {Buffer}\n*/\nfunction cryptoJsDecrypt(message, key, iv) {\n  (0, _assert2.default)(message, \"Missing cipher text\");\n  message = toBinaryBuffer(message);\n  var decipher = _browserifyAes2.default.createDecipheriv('aes-256-cbc', key, iv);\n  // decipher.setAutoPadding(true)\n  message = Buffer.concat([decipher.update(message), decipher.final()]);\n  return message;\n}\n\n/** This method does not use a checksum, the returned data must be validated some other way.\n    @arg {string|Buffer} plaintext - binary format\n    @return {Buffer} binary\n*/\nfunction cryptoJsEncrypt(message, key, iv) {\n  (0, _assert2.default)(message, \"Missing plain text\");\n  message = toBinaryBuffer(message);\n  var cipher = _browserifyAes2.default.createCipheriv('aes-256-cbc', key, iv);\n  // cipher.setAutoPadding(true)\n  message = Buffer.concat([cipher.update(message), cipher.final()]);\n  return message;\n}\n\n/** @return {string} unique 64 bit unsigned number string.  Being time based, this is careful to never choose the same nonce twice.  This value could be recorded in the blockchain for a long time.\n*/\nfunction uniqueNonce() {\n  if (unique_nonce_entropy === null) {\n    var b = _secureRandom2.default.randomUint8Array(2);\n    unique_nonce_entropy = parseInt(b[0] << 8 | b[1], 10);\n  }\n  var long = Long.fromNumber(Date.now());\n  var entropy = ++unique_nonce_entropy % 0xFFFF;\n  // console.log('uniqueNonce date\\t', ByteBuffer.allocate(8).writeUint64(long).toHex(0))\n  // console.log('uniqueNonce entropy\\t', ByteBuffer.allocate(8).writeUint64(Long.fromNumber(entropy)).toHex(0))\n  long = long.shiftLeft(16).or(Long.fromNumber(entropy));\n  // console.log('uniqueNonce final\\t', ByteBuffer.allocate(8).writeUint64(long).toHex(0))\n  return long.toString();\n}\nvar unique_nonce_entropy = null;\n// for(let i=1; i < 10; i++) key.uniqueNonce()\n\nvar toPrivateObj = function toPrivateObj(o) {\n  return o ? o.d ? o : _key_private2.default.fromWif(o) : o /*null or undefined*/;\n};\nvar toPublicObj = function toPublicObj(o) {\n  return o ? o.Q ? o : _key_public2.default.fromString(o) : o /*null or undefined*/;\n};\nvar toLongObj = function toLongObj(o) {\n  return o ? Long.isLong(o) ? o : Long.fromString(o) : o;\n};\nvar toBinaryBuffer = function toBinaryBuffer(o) {\n  return o ? Buffer.isBuffer(o) ? o : new Buffer(o, 'binary') : o;\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","encrypt","decrypt","_secureRandom","require","_secureRandom2","_interopRequireDefault","_bytebuffer","_bytebuffer2","_browserifyAes","_browserifyAes2","_assert","_assert2","_key_public","_key_public2","_key_private","_key_private2","_hash","_hash2","obj","__esModule","default","Long","private_key","public_key","message","nonce","arguments","length","undefined","uniqueNonce","crypt","checksum","toPrivateObj","TypeError","toPublicObj","toLongObj","Buffer","isBuffer","S","get_shared_secret","ebuf","DEFAULT_CAPACITY","LITTLE_ENDIAN","writeUint64","append","toString","copy","offset","toBinary","encryption_key","sha512","iv","slice","key","check","sha256","cbuf","fromBinary","readUint32","Error","cryptoJsDecrypt","cryptoJsEncrypt","toBinaryBuffer","decipher","createDecipheriv","concat","update","final","cipher","createCipheriv","unique_nonce_entropy","b","randomUint8Array","parseInt","long","fromNumber","Date","now","entropy","shiftLeft","or","o","d","fromWif","Q","fromString","isLong"],"sources":["C:/Users/sunil/kalakaari/node_modules/@hiveio/hive-js/lib/auth/ecc/src/aes.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.encrypt = encrypt;\nexports.decrypt = decrypt;\n\nvar _secureRandom = require('secure-random');\n\nvar _secureRandom2 = _interopRequireDefault(_secureRandom);\n\nvar _bytebuffer = require('bytebuffer');\n\nvar _bytebuffer2 = _interopRequireDefault(_bytebuffer);\n\nvar _browserifyAes = require('browserify-aes');\n\nvar _browserifyAes2 = _interopRequireDefault(_browserifyAes);\n\nvar _assert = require('assert');\n\nvar _assert2 = _interopRequireDefault(_assert);\n\nvar _key_public = require('./key_public');\n\nvar _key_public2 = _interopRequireDefault(_key_public);\n\nvar _key_private = require('./key_private');\n\nvar _key_private2 = _interopRequireDefault(_key_private);\n\nvar _hash = require('./hash');\n\nvar _hash2 = _interopRequireDefault(_hash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Long = _bytebuffer2.default.Long;\n\n/**\n    Spec: http://localhost:3002/steem/@dantheman/how-to-encrypt-a-memo-when-transferring-steem\n    @throws {Error|TypeError} - \"Invalid Key, ...\"\n    @arg {PrivateKey} private_key - required and used for decryption\n    @arg {PublicKey} public_key - required and used to calcualte the shared secret\n    @arg {string} [nonce = uniqueNonce()] - assigned a random unique uint64\n\n    @return {object}\n    @property {string} nonce - random or unique uint64, provides entropy when re-using the same private/public keys.\n    @property {Buffer} message - Plain text message\n    @property {number} checksum - shared secret checksum\n*/\nfunction encrypt(private_key, public_key, message) {\n    var nonce = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : uniqueNonce();\n\n    return crypt(private_key, public_key, nonce, message);\n}\n\n/**\n    Spec: http://localhost:3002/steem/@dantheman/how-to-encrypt-a-memo-when-transferring-steem\n    @arg {PrivateKey} private_key - required and used for decryption\n    @arg {PublicKey} public_key - required and used to calcualte the shared secret\n    @arg {string} nonce - random or unique uint64, provides entropy when re-using the same private/public keys.\n    @arg {Buffer} message - Encrypted or plain text message\n    @arg {number} checksum - shared secret checksum\n    @throws {Error|TypeError} - \"Invalid Key, ...\"\n    @return {Buffer} - message\n*/\nfunction decrypt(private_key, public_key, nonce, message, checksum) {\n    return crypt(private_key, public_key, nonce, message, checksum).message;\n}\n\n/**\n    @arg {Buffer} message - Encrypted or plain text message (see checksum)\n    @arg {number} checksum - shared secret checksum (null to encrypt, non-null to decrypt)\n*/\nfunction crypt(private_key, public_key, nonce, message, checksum) {\n    private_key = toPrivateObj(private_key);\n    if (!private_key) throw new TypeError('private_key is required');\n\n    public_key = toPublicObj(public_key);\n    if (!public_key) throw new TypeError('public_key is required');\n\n    nonce = toLongObj(nonce);\n    if (!nonce) throw new TypeError('nonce is required');\n\n    if (!Buffer.isBuffer(message)) {\n        if (typeof message !== 'string') throw new TypeError('message should be buffer or string');\n        message = new Buffer(message, 'binary');\n    }\n    if (checksum && typeof checksum !== 'number') throw new TypeError('checksum should be a number');\n\n    var S = private_key.get_shared_secret(public_key);\n    var ebuf = new _bytebuffer2.default(_bytebuffer2.default.DEFAULT_CAPACITY, _bytebuffer2.default.LITTLE_ENDIAN);\n    ebuf.writeUint64(nonce);\n    ebuf.append(S.toString('binary'), 'binary');\n    ebuf = new Buffer(ebuf.copy(0, ebuf.offset).toBinary(), 'binary');\n    var encryption_key = _hash2.default.sha512(ebuf);\n\n    // D E B U G\n    // console.log('crypt', {\n    //     priv_to_pub: private_key.toPublicKey().toString(),\n    //     pub: public_key.toString(),\n    //     nonce: nonce.toString(),\n    //     message: message.length,\n    //     checksum,\n    //     S: S.toString('hex'),\n    //     encryption_key: encryption_key.toString('hex'),\n    // })\n\n    var iv = encryption_key.slice(32, 48);\n    var key = encryption_key.slice(0, 32);\n\n    // check is first 64 bit of sha256 hash treated as uint64_t truncated to 32 bits.\n    var check = _hash2.default.sha256(encryption_key);\n    check = check.slice(0, 4);\n    var cbuf = _bytebuffer2.default.fromBinary(check.toString('binary'), _bytebuffer2.default.DEFAULT_CAPACITY, _bytebuffer2.default.LITTLE_ENDIAN);\n    check = cbuf.readUint32();\n\n    if (checksum) {\n        if (check !== checksum) throw new Error('Invalid key');\n        message = cryptoJsDecrypt(message, key, iv);\n    } else {\n        message = cryptoJsEncrypt(message, key, iv);\n    }\n    return { nonce: nonce, message: message, checksum: check };\n}\n\n/** This method does not use a checksum, the returned data must be validated some other way.\n    @arg {string|Buffer} ciphertext - binary format\n    @return {Buffer}\n*/\nfunction cryptoJsDecrypt(message, key, iv) {\n    (0, _assert2.default)(message, \"Missing cipher text\");\n    message = toBinaryBuffer(message);\n    var decipher = _browserifyAes2.default.createDecipheriv('aes-256-cbc', key, iv);\n    // decipher.setAutoPadding(true)\n    message = Buffer.concat([decipher.update(message), decipher.final()]);\n    return message;\n}\n\n/** This method does not use a checksum, the returned data must be validated some other way.\n    @arg {string|Buffer} plaintext - binary format\n    @return {Buffer} binary\n*/\nfunction cryptoJsEncrypt(message, key, iv) {\n    (0, _assert2.default)(message, \"Missing plain text\");\n    message = toBinaryBuffer(message);\n    var cipher = _browserifyAes2.default.createCipheriv('aes-256-cbc', key, iv);\n    // cipher.setAutoPadding(true)\n    message = Buffer.concat([cipher.update(message), cipher.final()]);\n    return message;\n}\n\n/** @return {string} unique 64 bit unsigned number string.  Being time based, this is careful to never choose the same nonce twice.  This value could be recorded in the blockchain for a long time.\n*/\nfunction uniqueNonce() {\n    if (unique_nonce_entropy === null) {\n        var b = _secureRandom2.default.randomUint8Array(2);\n        unique_nonce_entropy = parseInt(b[0] << 8 | b[1], 10);\n    }\n    var long = Long.fromNumber(Date.now());\n    var entropy = ++unique_nonce_entropy % 0xFFFF;\n    // console.log('uniqueNonce date\\t', ByteBuffer.allocate(8).writeUint64(long).toHex(0))\n    // console.log('uniqueNonce entropy\\t', ByteBuffer.allocate(8).writeUint64(Long.fromNumber(entropy)).toHex(0))\n    long = long.shiftLeft(16).or(Long.fromNumber(entropy));\n    // console.log('uniqueNonce final\\t', ByteBuffer.allocate(8).writeUint64(long).toHex(0))\n    return long.toString();\n}\nvar unique_nonce_entropy = null;\n// for(let i=1; i < 10; i++) key.uniqueNonce()\n\nvar toPrivateObj = function toPrivateObj(o) {\n    return o ? o.d ? o : _key_private2.default.fromWif(o) : o /*null or undefined*/;\n};\nvar toPublicObj = function toPublicObj(o) {\n    return o ? o.Q ? o : _key_public2.default.fromString(o) : o /*null or undefined*/;\n};\nvar toLongObj = function toLongObj(o) {\n    return o ? Long.isLong(o) ? o : Long.fromString(o) : o;\n};\nvar toBinaryBuffer = function toBinaryBuffer(o) {\n    return o ? Buffer.isBuffer(o) ? o : new Buffer(o, 'binary') : o;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}