{"ast":null,"code":"/* global self */\n(function (root, factory) {\n  if (typeof exports === 'object' && typeof exports.nodeName !== 'string') {\n    // CommonJS\n    factory(exports);\n  } else {\n    // Browser globals\n    root.steemit = root.steemit || {};\n    factory(root.steemit.crypto = {});\n  }\n})(typeof self !== 'undefined' ? self : this, function (exports) {\n  exports.PrivateKey = PrivateKey;\n  exports.PublicKey = PublicKey;\n  exports.generateKeys = generateKeys;\n  exports.keysFromPassword = keysFromPassword;\n  exports.sha256 = sha256;\n  exports.ripemd160 = ripemd160;\n  exports.hexify = hexify;\n  var sjcl = function () {\n    // SJCL is inserted here automatically by the build process.\n    /** @fileOverview Javascript cryptography implementation.\n    *\n    * Crush to remove comments, shorten variable names and\n    * generally reduce transmission size.\n    *\n    * @author Emily Stark\n    * @author Mike Hamburg\n    * @author Dan Boneh\n    */\n\n    \"use strict\";\n\n    /*jslint indent: 2, bitwise: false, nomen: false, plusplus: false, white: false, regexp: false */\n    /*global document, window, escape, unescape, module, require, Uint32Array */\n\n    /**\n     * The Stanford Javascript Crypto Library, top-level namespace.\n     * @namespace\n     */\n    var sjcl = {\n      /**\n       * Symmetric ciphers.\n       * @namespace\n       */\n      cipher: {},\n      /**\n       * Hash functions.  Right now only SHA256 is implemented.\n       * @namespace\n       */\n      hash: {},\n      /**\n       * Key exchange functions.  Right now only SRP is implemented.\n       * @namespace\n       */\n      keyexchange: {},\n      /**\n       * Cipher modes of operation.\n       * @namespace\n       */\n      mode: {},\n      /**\n       * Miscellaneous.  HMAC and PBKDF2.\n       * @namespace\n       */\n      misc: {},\n      /**\n       * Bit array encoders and decoders.\n       * @namespace\n       *\n       * @description\n       * The members of this namespace are functions which translate between\n       * SJCL's bitArrays and other objects (usually strings).  Because it\n       * isn't always clear which direction is encoding and which is decoding,\n       * the method names are \"fromBits\" and \"toBits\".\n       */\n      codec: {},\n      /**\n       * Exceptions.\n       * @namespace\n       */\n      exception: {\n        /**\n         * Ciphertext is corrupt.\n         * @constructor\n         */\n        corrupt: function (message) {\n          this.toString = function () {\n            return \"CORRUPT: \" + this.message;\n          };\n          this.message = message;\n        },\n        /**\n         * Invalid parameter.\n         * @constructor\n         */\n        invalid: function (message) {\n          this.toString = function () {\n            return \"INVALID: \" + this.message;\n          };\n          this.message = message;\n        },\n        /**\n         * Bug or missing feature in SJCL.\n         * @constructor\n         */\n        bug: function (message) {\n          this.toString = function () {\n            return \"BUG: \" + this.message;\n          };\n          this.message = message;\n        },\n        /**\n         * Something isn't ready.\n         * @constructor\n         */\n        notReady: function (message) {\n          this.toString = function () {\n            return \"NOT READY: \" + this.message;\n          };\n          this.message = message;\n        }\n      }\n    };\n    /** @fileOverview Arrays of bits, encoded as arrays of Numbers.\n     *\n     * @author Emily Stark\n     * @author Mike Hamburg\n     * @author Dan Boneh\n     */\n\n    /**\n     * Arrays of bits, encoded as arrays of Numbers.\n     * @namespace\n     * @description\n     * <p>\n     * These objects are the currency accepted by SJCL's crypto functions.\n     * </p>\n     *\n     * <p>\n     * Most of our crypto primitives operate on arrays of 4-byte words internally,\n     * but many of them can take arguments that are not a multiple of 4 bytes.\n     * This library encodes arrays of bits (whose size need not be a multiple of 8\n     * bits) as arrays of 32-bit words.  The bits are packed, big-endian, into an\n     * array of words, 32 bits at a time.  Since the words are double-precision\n     * floating point numbers, they fit some extra data.  We use this (in a private,\n     * possibly-changing manner) to encode the number of bits actually  present\n     * in the last word of the array.\n     * </p>\n     *\n     * <p>\n     * Because bitwise ops clear this out-of-band data, these arrays can be passed\n     * to ciphers like AES which want arrays of words.\n     * </p>\n     */\n    sjcl.bitArray = {\n      /**\n       * Array slices in units of bits.\n       * @param {bitArray} a The array to slice.\n       * @param {Number} bstart The offset to the start of the slice, in bits.\n       * @param {Number} bend The offset to the end of the slice, in bits.  If this is undefined,\n       * slice until the end of the array.\n       * @return {bitArray} The requested slice.\n       */\n      bitSlice: function (a, bstart, bend) {\n        a = sjcl.bitArray._shiftRight(a.slice(bstart / 32), 32 - (bstart & 31)).slice(1);\n        return bend === undefined ? a : sjcl.bitArray.clamp(a, bend - bstart);\n      },\n      /**\n       * Extract a number packed into a bit array.\n       * @param {bitArray} a The array to slice.\n       * @param {Number} bstart The offset to the start of the slice, in bits.\n       * @param {Number} blength The length of the number to extract.\n       * @return {Number} The requested slice.\n       */\n      extract: function (a, bstart, blength) {\n        // FIXME: this Math.floor is not necessary at all, but for some reason\n        // seems to suppress a bug in the Chromium JIT.\n        var x,\n          sh = Math.floor(-bstart - blength & 31);\n        if ((bstart + blength - 1 ^ bstart) & -32) {\n          // it crosses a boundary\n          x = a[bstart / 32 | 0] << 32 - sh ^ a[bstart / 32 + 1 | 0] >>> sh;\n        } else {\n          // within a single word\n          x = a[bstart / 32 | 0] >>> sh;\n        }\n        return x & (1 << blength) - 1;\n      },\n      /**\n       * Concatenate two bit arrays.\n       * @param {bitArray} a1 The first array.\n       * @param {bitArray} a2 The second array.\n       * @return {bitArray} The concatenation of a1 and a2.\n       */\n      concat: function (a1, a2) {\n        if (a1.length === 0 || a2.length === 0) {\n          return a1.concat(a2);\n        }\n        var last = a1[a1.length - 1],\n          shift = sjcl.bitArray.getPartial(last);\n        if (shift === 32) {\n          return a1.concat(a2);\n        } else {\n          return sjcl.bitArray._shiftRight(a2, shift, last | 0, a1.slice(0, a1.length - 1));\n        }\n      },\n      /**\n       * Find the length of an array of bits.\n       * @param {bitArray} a The array.\n       * @return {Number} The length of a, in bits.\n       */\n      bitLength: function (a) {\n        var l = a.length,\n          x;\n        if (l === 0) {\n          return 0;\n        }\n        x = a[l - 1];\n        return (l - 1) * 32 + sjcl.bitArray.getPartial(x);\n      },\n      /**\n       * Truncate an array.\n       * @param {bitArray} a The array.\n       * @param {Number} len The length to truncate to, in bits.\n       * @return {bitArray} A new array, truncated to len bits.\n       */\n      clamp: function (a, len) {\n        if (a.length * 32 < len) {\n          return a;\n        }\n        a = a.slice(0, Math.ceil(len / 32));\n        var l = a.length;\n        len = len & 31;\n        if (l > 0 && len) {\n          a[l - 1] = sjcl.bitArray.partial(len, a[l - 1] & 0x80000000 >> len - 1, 1);\n        }\n        return a;\n      },\n      /**\n       * Make a partial word for a bit array.\n       * @param {Number} len The number of bits in the word.\n       * @param {Number} x The bits.\n       * @param {Number} [_end=0] Pass 1 if x has already been shifted to the high side.\n       * @return {Number} The partial word.\n       */\n      partial: function (len, x, _end) {\n        if (len === 32) {\n          return x;\n        }\n        return (_end ? x | 0 : x << 32 - len) + len * 0x10000000000;\n      },\n      /**\n       * Get the number of bits used by a partial word.\n       * @param {Number} x The partial word.\n       * @return {Number} The number of bits used by the partial word.\n       */\n      getPartial: function (x) {\n        return Math.round(x / 0x10000000000) || 32;\n      },\n      /**\n       * Compare two arrays for equality in a predictable amount of time.\n       * @param {bitArray} a The first array.\n       * @param {bitArray} b The second array.\n       * @return {boolean} true if a == b; false otherwise.\n       */\n      equal: function (a, b) {\n        if (sjcl.bitArray.bitLength(a) !== sjcl.bitArray.bitLength(b)) {\n          return false;\n        }\n        var x = 0,\n          i;\n        for (i = 0; i < a.length; i++) {\n          x |= a[i] ^ b[i];\n        }\n        return x === 0;\n      },\n      /** Shift an array right.\n       * @param {bitArray} a The array to shift.\n       * @param {Number} shift The number of bits to shift.\n       * @param {Number} [carry=0] A byte to carry in\n       * @param {bitArray} [out=[]] An array to prepend to the output.\n       * @private\n       */\n      _shiftRight: function (a, shift, carry, out) {\n        var i,\n          last2 = 0,\n          shift2;\n        if (out === undefined) {\n          out = [];\n        }\n        for (; shift >= 32; shift -= 32) {\n          out.push(carry);\n          carry = 0;\n        }\n        if (shift === 0) {\n          return out.concat(a);\n        }\n        for (i = 0; i < a.length; i++) {\n          out.push(carry | a[i] >>> shift);\n          carry = a[i] << 32 - shift;\n        }\n        last2 = a.length ? a[a.length - 1] : 0;\n        shift2 = sjcl.bitArray.getPartial(last2);\n        out.push(sjcl.bitArray.partial(shift + shift2 & 31, shift + shift2 > 32 ? carry : out.pop(), 1));\n        return out;\n      },\n      /** xor a block of 4 words together.\n       * @private\n       */\n      _xor4: function (x, y) {\n        return [x[0] ^ y[0], x[1] ^ y[1], x[2] ^ y[2], x[3] ^ y[3]];\n      },\n      /** byteswap a word array inplace.\n       * (does not handle partial words)\n       * @param {sjcl.bitArray} a word array\n       * @return {sjcl.bitArray} byteswapped array\n       */\n      byteswapM: function (a) {\n        var i,\n          v,\n          m = 0xff00;\n        for (i = 0; i < a.length; ++i) {\n          v = a[i];\n          a[i] = v >>> 24 | v >>> 8 & m | (v & m) << 8 | v << 24;\n        }\n        return a;\n      }\n    };\n    /** @fileOverview Low-level AES implementation.\n     *\n     * This file contains a low-level implementation of AES, optimized for\n     * size and for efficiency on several browsers.  It is based on\n     * OpenSSL's aes_core.c, a public-domain implementation by Vincent\n     * Rijmen, Antoon Bosselaers and Paulo Barreto.\n     *\n     * An older version of this implementation is available in the public\n     * domain, but this one is (c) Emily Stark, Mike Hamburg, Dan Boneh,\n     * Stanford University 2008-2010 and BSD-licensed for liability\n     * reasons.\n     *\n     * @author Emily Stark\n     * @author Mike Hamburg\n     * @author Dan Boneh\n     */\n\n    /**\n     * Schedule out an AES key for both encryption and decryption.  This\n     * is a low-level class.  Use a cipher mode to do bulk encryption.\n     *\n     * @constructor\n     * @param {Array} key The key as an array of 4, 6 or 8 words.\n     */\n    sjcl.cipher.aes = function (key) {\n      if (!this._tables[0][0][0]) {\n        this._precompute();\n      }\n      var i,\n        j,\n        tmp,\n        encKey,\n        decKey,\n        sbox = this._tables[0][4],\n        decTable = this._tables[1],\n        keyLen = key.length,\n        rcon = 1;\n      if (keyLen !== 4 && keyLen !== 6 && keyLen !== 8) {\n        throw new sjcl.exception.invalid(\"invalid aes key size\");\n      }\n      this._key = [encKey = key.slice(0), decKey = []];\n\n      // schedule encryption keys\n      for (i = keyLen; i < 4 * keyLen + 28; i++) {\n        tmp = encKey[i - 1];\n\n        // apply sbox\n        if (i % keyLen === 0 || keyLen === 8 && i % keyLen === 4) {\n          tmp = sbox[tmp >>> 24] << 24 ^ sbox[tmp >> 16 & 255] << 16 ^ sbox[tmp >> 8 & 255] << 8 ^ sbox[tmp & 255];\n\n          // shift rows and add rcon\n          if (i % keyLen === 0) {\n            tmp = tmp << 8 ^ tmp >>> 24 ^ rcon << 24;\n            rcon = rcon << 1 ^ (rcon >> 7) * 283;\n          }\n        }\n        encKey[i] = encKey[i - keyLen] ^ tmp;\n      }\n\n      // schedule decryption keys\n      for (j = 0; i; j++, i--) {\n        tmp = encKey[j & 3 ? i : i - 4];\n        if (i <= 4 || j < 4) {\n          decKey[j] = tmp;\n        } else {\n          decKey[j] = decTable[0][sbox[tmp >>> 24]] ^ decTable[1][sbox[tmp >> 16 & 255]] ^ decTable[2][sbox[tmp >> 8 & 255]] ^ decTable[3][sbox[tmp & 255]];\n        }\n      }\n    };\n    sjcl.cipher.aes.prototype = {\n      // public\n      /* Something like this might appear here eventually\n      name: \"AES\",\n      blockSize: 4,\n      keySizes: [4,6,8],\n      */\n\n      /**\n       * Encrypt an array of 4 big-endian words.\n       * @param {Array} data The plaintext.\n       * @return {Array} The ciphertext.\n       */\n      encrypt: function (data) {\n        return this._crypt(data, 0);\n      },\n      /**\n       * Decrypt an array of 4 big-endian words.\n       * @param {Array} data The ciphertext.\n       * @return {Array} The plaintext.\n       */\n      decrypt: function (data) {\n        return this._crypt(data, 1);\n      },\n      /**\n       * The expanded S-box and inverse S-box tables.  These will be computed\n       * on the client so that we don't have to send them down the wire.\n       *\n       * There are two tables, _tables[0] is for encryption and\n       * _tables[1] is for decryption.\n       *\n       * The first 4 sub-tables are the expanded S-box with MixColumns.  The\n       * last (_tables[01][4]) is the S-box itself.\n       *\n       * @private\n       */\n      _tables: [[[], [], [], [], []], [[], [], [], [], []]],\n      /**\n       * Expand the S-box tables.\n       *\n       * @private\n       */\n      _precompute: function () {\n        var encTable = this._tables[0],\n          decTable = this._tables[1],\n          sbox = encTable[4],\n          sboxInv = decTable[4],\n          i,\n          x,\n          xInv,\n          d = [],\n          th = [],\n          x2,\n          x4,\n          x8,\n          s,\n          tEnc,\n          tDec;\n\n        // Compute double and third tables\n        for (i = 0; i < 256; i++) {\n          th[(d[i] = i << 1 ^ (i >> 7) * 283) ^ i] = i;\n        }\n        for (x = xInv = 0; !sbox[x]; x ^= x2 || 1, xInv = th[xInv] || 1) {\n          // Compute sbox\n          s = xInv ^ xInv << 1 ^ xInv << 2 ^ xInv << 3 ^ xInv << 4;\n          s = s >> 8 ^ s & 255 ^ 99;\n          sbox[x] = s;\n          sboxInv[s] = x;\n\n          // Compute MixColumns\n          x8 = d[x4 = d[x2 = d[x]]];\n          tDec = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;\n          tEnc = d[s] * 0x101 ^ s * 0x1010100;\n          for (i = 0; i < 4; i++) {\n            encTable[i][x] = tEnc = tEnc << 24 ^ tEnc >>> 8;\n            decTable[i][s] = tDec = tDec << 24 ^ tDec >>> 8;\n          }\n        }\n\n        // Compactify.  Considerable speedup on Firefox.\n        for (i = 0; i < 5; i++) {\n          encTable[i] = encTable[i].slice(0);\n          decTable[i] = decTable[i].slice(0);\n        }\n      },\n      /**\n       * Encryption and decryption core.\n       * @param {Array} input Four words to be encrypted or decrypted.\n       * @param dir The direction, 0 for encrypt and 1 for decrypt.\n       * @return {Array} The four encrypted or decrypted words.\n       * @private\n       */\n      _crypt: function (input, dir) {\n        if (input.length !== 4) {\n          throw new sjcl.exception.invalid(\"invalid aes block size\");\n        }\n        var key = this._key[dir],\n          // state variables a,b,c,d are loaded with pre-whitened data\n          a = input[0] ^ key[0],\n          b = input[dir ? 3 : 1] ^ key[1],\n          c = input[2] ^ key[2],\n          d = input[dir ? 1 : 3] ^ key[3],\n          a2,\n          b2,\n          c2,\n          nInnerRounds = key.length / 4 - 2,\n          i,\n          kIndex = 4,\n          out = [0, 0, 0, 0],\n          table = this._tables[dir],\n          // load up the tables\n          t0 = table[0],\n          t1 = table[1],\n          t2 = table[2],\n          t3 = table[3],\n          sbox = table[4];\n\n        // Inner rounds.  Cribbed from OpenSSL.\n        for (i = 0; i < nInnerRounds; i++) {\n          a2 = t0[a >>> 24] ^ t1[b >> 16 & 255] ^ t2[c >> 8 & 255] ^ t3[d & 255] ^ key[kIndex];\n          b2 = t0[b >>> 24] ^ t1[c >> 16 & 255] ^ t2[d >> 8 & 255] ^ t3[a & 255] ^ key[kIndex + 1];\n          c2 = t0[c >>> 24] ^ t1[d >> 16 & 255] ^ t2[a >> 8 & 255] ^ t3[b & 255] ^ key[kIndex + 2];\n          d = t0[d >>> 24] ^ t1[a >> 16 & 255] ^ t2[b >> 8 & 255] ^ t3[c & 255] ^ key[kIndex + 3];\n          kIndex += 4;\n          a = a2;\n          b = b2;\n          c = c2;\n        }\n\n        // Last round.\n        for (i = 0; i < 4; i++) {\n          out[dir ? 3 & -i : i] = sbox[a >>> 24] << 24 ^ sbox[b >> 16 & 255] << 16 ^ sbox[c >> 8 & 255] << 8 ^ sbox[d & 255] ^ key[kIndex++];\n          a2 = a;\n          a = b;\n          b = c;\n          c = d;\n          d = a2;\n        }\n        return out;\n      }\n    };\n\n    /**\n     * Constructs a new bignum from another bignum, a number or a hex string.\n     * @constructor\n     */\n    sjcl.bn = function (it) {\n      this.initWith(it);\n    };\n    sjcl.bn.prototype = {\n      radix: 24,\n      maxMul: 8,\n      _class: sjcl.bn,\n      copy: function () {\n        return new this._class(this);\n      },\n      /**\n       * Initializes this with it, either as a bn, a number, or a hex string.\n       */\n      initWith: function (it) {\n        var i = 0,\n          k;\n        switch (typeof it) {\n          case \"object\":\n            this.limbs = it.limbs.slice(0);\n            break;\n          case \"number\":\n            this.limbs = [it];\n            this.normalize();\n            break;\n          case \"string\":\n            it = it.replace(/^0x/, '');\n            this.limbs = [];\n            // hack\n            k = this.radix / 4;\n            for (i = 0; i < it.length; i += k) {\n              this.limbs.push(parseInt(it.substring(Math.max(it.length - i - k, 0), it.length - i), 16));\n            }\n            break;\n          default:\n            this.limbs = [0];\n        }\n        return this;\n      },\n      /**\n       * Returns true if \"this\" and \"that\" are equal.  Calls fullReduce().\n       * Equality test is in constant time.\n       */\n      equals: function (that) {\n        if (typeof that === \"number\") {\n          that = new this._class(that);\n        }\n        var difference = 0,\n          i;\n        this.fullReduce();\n        that.fullReduce();\n        for (i = 0; i < this.limbs.length || i < that.limbs.length; i++) {\n          difference |= this.getLimb(i) ^ that.getLimb(i);\n        }\n        return difference === 0;\n      },\n      /**\n       * Get the i'th limb of this, zero if i is too large.\n       */\n      getLimb: function (i) {\n        return i >= this.limbs.length ? 0 : this.limbs[i];\n      },\n      /**\n       * Constant time comparison function.\n       * Returns 1 if this >= that, or zero otherwise.\n       */\n      greaterEquals: function (that) {\n        if (typeof that === \"number\") {\n          that = new this._class(that);\n        }\n        var less = 0,\n          greater = 0,\n          i,\n          a,\n          b;\n        i = Math.max(this.limbs.length, that.limbs.length) - 1;\n        for (; i >= 0; i--) {\n          a = this.getLimb(i);\n          b = that.getLimb(i);\n          greater |= b - a & ~less;\n          less |= a - b & ~greater;\n        }\n        return (greater | ~less) >>> 31;\n      },\n      /**\n       * Convert to a hex string.\n       */\n      toString: function () {\n        this.fullReduce();\n        var out = \"\",\n          i,\n          s,\n          l = this.limbs;\n        for (i = 0; i < this.limbs.length; i++) {\n          s = l[i].toString(16);\n          while (i < this.limbs.length - 1 && s.length < 6) {\n            s = \"0\" + s;\n          }\n          out = s + out;\n        }\n        return \"0x\" + out;\n      },\n      /** this += that.  Does not normalize. */\n      addM: function (that) {\n        if (typeof that !== \"object\") {\n          that = new this._class(that);\n        }\n        var i,\n          l = this.limbs,\n          ll = that.limbs;\n        for (i = l.length; i < ll.length; i++) {\n          l[i] = 0;\n        }\n        for (i = 0; i < ll.length; i++) {\n          l[i] += ll[i];\n        }\n        return this;\n      },\n      /** this *= 2.  Requires normalized; ends up normalized. */\n      doubleM: function () {\n        var i,\n          carry = 0,\n          tmp,\n          r = this.radix,\n          m = this.radixMask,\n          l = this.limbs;\n        for (i = 0; i < l.length; i++) {\n          tmp = l[i];\n          tmp = tmp + tmp + carry;\n          l[i] = tmp & m;\n          carry = tmp >> r;\n        }\n        if (carry) {\n          l.push(carry);\n        }\n        return this;\n      },\n      /** this /= 2, rounded down.  Requires normalized; ends up normalized. */\n      halveM: function () {\n        var i,\n          carry = 0,\n          tmp,\n          r = this.radix,\n          l = this.limbs;\n        for (i = l.length - 1; i >= 0; i--) {\n          tmp = l[i];\n          l[i] = tmp + carry >> 1;\n          carry = (tmp & 1) << r;\n        }\n        if (!l[l.length - 1]) {\n          l.pop();\n        }\n        return this;\n      },\n      /** this -= that.  Does not normalize. */\n      subM: function (that) {\n        if (typeof that !== \"object\") {\n          that = new this._class(that);\n        }\n        var i,\n          l = this.limbs,\n          ll = that.limbs;\n        for (i = l.length; i < ll.length; i++) {\n          l[i] = 0;\n        }\n        for (i = 0; i < ll.length; i++) {\n          l[i] -= ll[i];\n        }\n        return this;\n      },\n      mod: function (that) {\n        var neg = !this.greaterEquals(new sjcl.bn(0));\n        that = new sjcl.bn(that).normalize(); // copy before we begin\n        var out = new sjcl.bn(this).normalize(),\n          ci = 0;\n        if (neg) out = new sjcl.bn(0).subM(out).normalize();\n        for (; out.greaterEquals(that); ci++) {\n          that.doubleM();\n        }\n        if (neg) out = that.sub(out).normalize();\n        for (; ci > 0; ci--) {\n          that.halveM();\n          if (out.greaterEquals(that)) {\n            out.subM(that).normalize();\n          }\n        }\n        return out.trim();\n      },\n      /** return inverse mod prime p.  p must be odd. Binary extended Euclidean algorithm mod p. */\n      inverseMod: function (p) {\n        var a = new sjcl.bn(1),\n          b = new sjcl.bn(0),\n          x = new sjcl.bn(this),\n          y = new sjcl.bn(p),\n          tmp,\n          i,\n          nz = 1;\n        if (!(p.limbs[0] & 1)) {\n          throw new sjcl.exception.invalid(\"inverseMod: p must be odd\");\n        }\n\n        // invariant: y is odd\n        do {\n          if (x.limbs[0] & 1) {\n            if (!x.greaterEquals(y)) {\n              // x < y; swap everything\n              tmp = x;\n              x = y;\n              y = tmp;\n              tmp = a;\n              a = b;\n              b = tmp;\n            }\n            x.subM(y);\n            x.normalize();\n            if (!a.greaterEquals(b)) {\n              a.addM(p);\n            }\n            a.subM(b);\n          }\n\n          // cut everything in half\n          x.halveM();\n          if (a.limbs[0] & 1) {\n            a.addM(p);\n          }\n          a.normalize();\n          a.halveM();\n\n          // check for termination: x ?= 0\n          for (i = nz = 0; i < x.limbs.length; i++) {\n            nz |= x.limbs[i];\n          }\n        } while (nz);\n        if (!y.equals(1)) {\n          throw new sjcl.exception.invalid(\"inverseMod: p and x must be relatively prime\");\n        }\n        return b;\n      },\n      /** this + that.  Does not normalize. */\n      add: function (that) {\n        return this.copy().addM(that);\n      },\n      /** this - that.  Does not normalize. */\n      sub: function (that) {\n        return this.copy().subM(that);\n      },\n      /** this * that.  Normalizes and reduces. */\n      mul: function (that) {\n        if (typeof that === \"number\") {\n          that = new this._class(that);\n        }\n        var i,\n          j,\n          a = this.limbs,\n          b = that.limbs,\n          al = a.length,\n          bl = b.length,\n          out = new this._class(),\n          c = out.limbs,\n          ai,\n          ii = this.maxMul;\n        for (i = 0; i < this.limbs.length + that.limbs.length + 1; i++) {\n          c[i] = 0;\n        }\n        for (i = 0; i < al; i++) {\n          ai = a[i];\n          for (j = 0; j < bl; j++) {\n            c[i + j] += ai * b[j];\n          }\n          if (! --ii) {\n            ii = this.maxMul;\n            out.cnormalize();\n          }\n        }\n        return out.cnormalize().reduce();\n      },\n      /** this ^ 2.  Normalizes and reduces. */\n      square: function () {\n        return this.mul(this);\n      },\n      /** this ^ n.  Uses square-and-multiply.  Normalizes and reduces. */\n      power: function (l) {\n        l = new sjcl.bn(l).normalize().trim().limbs;\n        var i,\n          j,\n          out = new this._class(1),\n          pow = this;\n        for (i = 0; i < l.length; i++) {\n          for (j = 0; j < this.radix; j++) {\n            if (l[i] & 1 << j) {\n              out = out.mul(pow);\n            }\n            if (i == l.length - 1 && l[i] >> j + 1 == 0) {\n              break;\n            }\n            pow = pow.square();\n          }\n        }\n        return out;\n      },\n      /** this * that mod N */\n      mulmod: function (that, N) {\n        return this.mod(N).mul(that.mod(N)).mod(N);\n      },\n      /** this ^ x mod N */\n      powermod: function (x, N) {\n        x = new sjcl.bn(x);\n        N = new sjcl.bn(N);\n\n        // Jump to montpowermod if possible.\n        if ((N.limbs[0] & 1) == 1) {\n          var montOut = this.montpowermod(x, N);\n          if (montOut != false) {\n            return montOut;\n          } // else go to slow powermod\n        }\n        var i,\n          j,\n          l = x.normalize().trim().limbs,\n          out = new this._class(1),\n          pow = this;\n        for (i = 0; i < l.length; i++) {\n          for (j = 0; j < this.radix; j++) {\n            if (l[i] & 1 << j) {\n              out = out.mulmod(pow, N);\n            }\n            if (i == l.length - 1 && l[i] >> j + 1 == 0) {\n              break;\n            }\n            pow = pow.mulmod(pow, N);\n          }\n        }\n        return out;\n      },\n      /** this ^ x mod N with Montomery reduction */\n      montpowermod: function (x, N) {\n        x = new sjcl.bn(x).normalize().trim();\n        N = new sjcl.bn(N);\n        var i,\n          j,\n          radix = this.radix,\n          out = new this._class(1),\n          pow = this.copy();\n\n        // Generate R as a cap of N.\n        var R,\n          s,\n          wind,\n          bitsize = x.bitLength();\n        R = new sjcl.bn({\n          limbs: N.copy().normalize().trim().limbs.map(function () {\n            return 0;\n          })\n        });\n        for (s = this.radix; s > 0; s--) {\n          if ((N.limbs[N.limbs.length - 1] >> s & 1) == 1) {\n            R.limbs[R.limbs.length - 1] = 1 << s;\n            break;\n          }\n        }\n\n        // Calculate window size as a function of the exponent's size.\n        if (bitsize == 0) {\n          return this;\n        } else if (bitsize < 18) {\n          wind = 1;\n        } else if (bitsize < 48) {\n          wind = 3;\n        } else if (bitsize < 144) {\n          wind = 4;\n        } else if (bitsize < 768) {\n          wind = 5;\n        } else {\n          wind = 6;\n        }\n\n        // Find R' and N' such that R * R' - N * N' = 1.\n        var RR = R.copy(),\n          NN = N.copy(),\n          RP = new sjcl.bn(1),\n          NP = new sjcl.bn(0),\n          RT = R.copy();\n        while (RT.greaterEquals(1)) {\n          RT.halveM();\n          if ((RP.limbs[0] & 1) == 0) {\n            RP.halveM();\n            NP.halveM();\n          } else {\n            RP.addM(NN);\n            RP.halveM();\n            NP.halveM();\n            NP.addM(RR);\n          }\n        }\n        RP = RP.normalize();\n        NP = NP.normalize();\n        RR.doubleM();\n        var R2 = RR.mulmod(RR, N);\n\n        // Check whether the invariant holds.\n        // If it doesn't, we can't use Montgomery reduction on this modulus.\n        if (!RR.mul(RP).sub(N.mul(NP)).equals(1)) {\n          return false;\n        }\n        var montIn = function (c) {\n            return montMul(c, R2);\n          },\n          montMul = function (a, b) {\n            // Standard Montgomery reduction\n            var k,\n              carry,\n              ab,\n              right,\n              abBar,\n              mask = (1 << s + 1) - 1;\n            ab = a.mul(b);\n            right = ab.mul(NP);\n            right.limbs = right.limbs.slice(0, R.limbs.length);\n            if (right.limbs.length == R.limbs.length) {\n              right.limbs[R.limbs.length - 1] &= mask;\n            }\n            right = right.mul(N);\n            abBar = ab.add(right).normalize().trim();\n            abBar.limbs = abBar.limbs.slice(R.limbs.length - 1);\n\n            // Division.  Equivelent to calling *.halveM() s times.\n            for (k = 0; k < abBar.limbs.length; k++) {\n              if (k > 0) {\n                abBar.limbs[k - 1] |= (abBar.limbs[k] & mask) << radix - s - 1;\n              }\n              abBar.limbs[k] = abBar.limbs[k] >> s + 1;\n            }\n            if (abBar.greaterEquals(N)) {\n              abBar.subM(N);\n            }\n            return abBar;\n          },\n          montOut = function (c) {\n            return montMul(c, 1);\n          };\n        pow = montIn(pow);\n        out = montIn(out);\n\n        // Sliding-Window Exponentiation (HAC 14.85)\n        var h,\n          precomp = {},\n          cap = (1 << wind - 1) - 1;\n        precomp[1] = pow.copy();\n        precomp[2] = montMul(pow, pow);\n        for (h = 1; h <= cap; h++) {\n          precomp[2 * h + 1] = montMul(precomp[2 * h - 1], precomp[2]);\n        }\n        var getBit = function (exp, i) {\n          // Gets ith bit of exp.\n          var off = i % exp.radix;\n          return (exp.limbs[Math.floor(i / exp.radix)] & 1 << off) >> off;\n        };\n        for (i = x.bitLength() - 1; i >= 0;) {\n          if (getBit(x, i) == 0) {\n            // If the next bit is zero:\n            //   Square, move forward one bit.\n            out = montMul(out, out);\n            i = i - 1;\n          } else {\n            // If the next bit is one:\n            //   Find the longest sequence of bits after this one, less than `wind`\n            //   bits long, that ends with a 1.  Convert the sequence into an\n            //   integer and look up the pre-computed value to add.\n            var l = i - wind + 1;\n            while (getBit(x, l) == 0) {\n              l++;\n            }\n            var indx = 0;\n            for (j = l; j <= i; j++) {\n              indx += getBit(x, j) << j - l;\n              out = montMul(out, out);\n            }\n            out = montMul(out, precomp[indx]);\n            i = l - 1;\n          }\n        }\n        return montOut(out);\n      },\n      trim: function () {\n        var l = this.limbs,\n          p;\n        do {\n          p = l.pop();\n        } while (l.length && p === 0);\n        l.push(p);\n        return this;\n      },\n      /** Reduce mod a modulus.  Stubbed for subclassing. */\n      reduce: function () {\n        return this;\n      },\n      /** Reduce and normalize. */\n      fullReduce: function () {\n        return this.normalize();\n      },\n      /** Propagate carries. */\n      normalize: function () {\n        var carry = 0,\n          i,\n          pv = this.placeVal,\n          ipv = this.ipv,\n          l,\n          m,\n          limbs = this.limbs,\n          ll = limbs.length,\n          mask = this.radixMask;\n        for (i = 0; i < ll || carry !== 0 && carry !== -1; i++) {\n          l = (limbs[i] || 0) + carry;\n          m = limbs[i] = l & mask;\n          carry = (l - m) * ipv;\n        }\n        if (carry === -1) {\n          limbs[i - 1] -= pv;\n        }\n        this.trim();\n        return this;\n      },\n      /** Constant-time normalize. Does not allocate additional space. */\n      cnormalize: function () {\n        var carry = 0,\n          i,\n          ipv = this.ipv,\n          l,\n          m,\n          limbs = this.limbs,\n          ll = limbs.length,\n          mask = this.radixMask;\n        for (i = 0; i < ll - 1; i++) {\n          l = limbs[i] + carry;\n          m = limbs[i] = l & mask;\n          carry = (l - m) * ipv;\n        }\n        limbs[i] += carry;\n        return this;\n      },\n      /** Serialize to a bit array */\n      toBits: function (len) {\n        this.fullReduce();\n        len = len || this.exponent || this.bitLength();\n        var i = Math.floor((len - 1) / 24),\n          w = sjcl.bitArray,\n          e = (len + 7 & -8) % this.radix || this.radix,\n          out = [w.partial(e, this.getLimb(i))];\n        for (i--; i >= 0; i--) {\n          out = w.concat(out, [w.partial(Math.min(this.radix, len), this.getLimb(i))]);\n          len -= this.radix;\n        }\n        return out;\n      },\n      /** Return the length in bits, rounded up to the nearest byte. */\n      bitLength: function () {\n        this.fullReduce();\n        var out = this.radix * (this.limbs.length - 1),\n          b = this.limbs[this.limbs.length - 1];\n        for (; b; b >>>= 1) {\n          out++;\n        }\n        return out + 7 & -8;\n      }\n    };\n\n    /** @memberOf sjcl.bn\n    * @this { sjcl.bn }\n    */\n    sjcl.bn.fromBits = function (bits) {\n      var Class = this,\n        out = new Class(),\n        words = [],\n        w = sjcl.bitArray,\n        t = this.prototype,\n        l = Math.min(this.bitLength || 0x100000000, w.bitLength(bits)),\n        e = l % t.radix || t.radix;\n      words[0] = w.extract(bits, 0, e);\n      for (; e < l; e += t.radix) {\n        words.unshift(w.extract(bits, e, t.radix));\n      }\n      out.limbs = words;\n      return out;\n    };\n    sjcl.bn.prototype.ipv = 1 / (sjcl.bn.prototype.placeVal = Math.pow(2, sjcl.bn.prototype.radix));\n    sjcl.bn.prototype.radixMask = (1 << sjcl.bn.prototype.radix) - 1;\n\n    /**\n     * Creates a new subclass of bn, based on reduction modulo a pseudo-Mersenne prime,\n     * i.e. a prime of the form 2^e + sum(a * 2^b),where the sum is negative and sparse.\n     */\n    sjcl.bn.pseudoMersennePrime = function (exponent, coeff) {\n      /** @constructor\n      * @private\n      */\n      function p(it) {\n        this.initWith(it);\n        /*if (this.limbs[this.modOffset]) {\n          this.reduce();\n        }*/\n      }\n      var ppr = p.prototype = new sjcl.bn(),\n        i,\n        tmp,\n        mo;\n      mo = ppr.modOffset = Math.ceil(tmp = exponent / ppr.radix);\n      ppr.exponent = exponent;\n      ppr.offset = [];\n      ppr.factor = [];\n      ppr.minOffset = mo;\n      ppr.fullMask = 0;\n      ppr.fullOffset = [];\n      ppr.fullFactor = [];\n      ppr.modulus = p.modulus = new sjcl.bn(Math.pow(2, exponent));\n      ppr.fullMask = 0 | -Math.pow(2, exponent % ppr.radix);\n      for (i = 0; i < coeff.length; i++) {\n        ppr.offset[i] = Math.floor(coeff[i][0] / ppr.radix - tmp);\n        ppr.fullOffset[i] = Math.ceil(coeff[i][0] / ppr.radix - tmp);\n        ppr.factor[i] = coeff[i][1] * Math.pow(1 / 2, exponent - coeff[i][0] + ppr.offset[i] * ppr.radix);\n        ppr.fullFactor[i] = coeff[i][1] * Math.pow(1 / 2, exponent - coeff[i][0] + ppr.fullOffset[i] * ppr.radix);\n        ppr.modulus.addM(new sjcl.bn(Math.pow(2, coeff[i][0]) * coeff[i][1]));\n        ppr.minOffset = Math.min(ppr.minOffset, -ppr.offset[i]); // conservative\n      }\n      ppr._class = p;\n      ppr.modulus.cnormalize();\n\n      /** Approximate reduction mod p.  May leave a number which is negative or slightly larger than p.\n       * @memberof sjcl.bn\n       * @this { sjcl.bn }\n       */\n      ppr.reduce = function () {\n        var i,\n          k,\n          l,\n          mo = this.modOffset,\n          limbs = this.limbs,\n          off = this.offset,\n          ol = this.offset.length,\n          fac = this.factor,\n          ll;\n        i = this.minOffset;\n        while (limbs.length > mo) {\n          l = limbs.pop();\n          ll = limbs.length;\n          for (k = 0; k < ol; k++) {\n            limbs[ll + off[k]] -= fac[k] * l;\n          }\n          i--;\n          if (!i) {\n            limbs.push(0);\n            this.cnormalize();\n            i = this.minOffset;\n          }\n        }\n        this.cnormalize();\n        return this;\n      };\n\n      /** @memberof sjcl.bn\n      * @this { sjcl.bn }\n      */\n      ppr._strongReduce = ppr.fullMask === -1 ? ppr.reduce : function () {\n        var limbs = this.limbs,\n          i = limbs.length - 1,\n          k,\n          l;\n        this.reduce();\n        if (i === this.modOffset - 1) {\n          l = limbs[i] & this.fullMask;\n          limbs[i] -= l;\n          for (k = 0; k < this.fullOffset.length; k++) {\n            limbs[i + this.fullOffset[k]] -= this.fullFactor[k] * l;\n          }\n          this.normalize();\n        }\n      };\n\n      /** mostly constant-time, very expensive full reduction.\n       * @memberof sjcl.bn\n       * @this { sjcl.bn }\n       */\n      ppr.fullReduce = function () {\n        var greater, i;\n        // massively above the modulus, may be negative\n\n        this._strongReduce();\n        // less than twice the modulus, may be negative\n\n        this.addM(this.modulus);\n        this.addM(this.modulus);\n        this.normalize();\n        // probably 2-3x the modulus\n\n        this._strongReduce();\n        // less than the power of 2.  still may be more than\n        // the modulus\n\n        // HACK: pad out to this length\n        for (i = this.limbs.length; i < this.modOffset; i++) {\n          this.limbs[i] = 0;\n        }\n\n        // constant-time subtract modulus\n        greater = this.greaterEquals(this.modulus);\n        for (i = 0; i < this.limbs.length; i++) {\n          this.limbs[i] -= this.modulus.limbs[i] * greater;\n        }\n        this.cnormalize();\n        return this;\n      };\n\n      /** @memberof sjcl.bn\n      * @this { sjcl.bn }\n      */\n      ppr.inverse = function () {\n        return this.power(this.modulus.sub(2));\n      };\n      p.fromBits = sjcl.bn.fromBits;\n      return p;\n    };\n\n    // a small Mersenne prime\n    var sbp = sjcl.bn.pseudoMersennePrime;\n    sjcl.bn.prime = {\n      p127: sbp(127, [[0, -1]]),\n      // Bernstein's prime for Curve25519\n      p25519: sbp(255, [[0, -19]]),\n      // Koblitz primes\n      p192k: sbp(192, [[32, -1], [12, -1], [8, -1], [7, -1], [6, -1], [3, -1], [0, -1]]),\n      p224k: sbp(224, [[32, -1], [12, -1], [11, -1], [9, -1], [7, -1], [4, -1], [1, -1], [0, -1]]),\n      p256k: sbp(256, [[32, -1], [9, -1], [8, -1], [7, -1], [6, -1], [4, -1], [0, -1]]),\n      // NIST primes\n      p192: sbp(192, [[0, -1], [64, -1]]),\n      p224: sbp(224, [[0, 1], [96, -1]]),\n      p256: sbp(256, [[0, -1], [96, 1], [192, 1], [224, -1]]),\n      p384: sbp(384, [[0, -1], [32, 1], [96, -1], [128, -1]]),\n      p521: sbp(521, [[0, -1]])\n    };\n    sjcl.bn.random = function (modulus, paranoia) {\n      if (typeof modulus !== \"object\") {\n        modulus = new sjcl.bn(modulus);\n      }\n      var words,\n        i,\n        l = modulus.limbs.length,\n        m = modulus.limbs[l - 1] + 1,\n        out = new sjcl.bn();\n      while (true) {\n        // get a sequence whose first digits make sense\n        do {\n          words = sjcl.random.randomWords(l, paranoia);\n          if (words[l - 1] < 0) {\n            words[l - 1] += 0x100000000;\n          }\n        } while (Math.floor(words[l - 1] / m) === Math.floor(0x100000000 / m));\n        words[l - 1] %= m;\n\n        // mask off all the limbs\n        for (i = 0; i < l - 1; i++) {\n          words[i] &= modulus.radixMask;\n        }\n\n        // check the rest of the digitssj\n        out.limbs = words;\n        if (!out.greaterEquals(modulus)) {\n          return out;\n        }\n      }\n    };\n    /** @fileOverview Bit array codec implementations.\n     *\n     * @author Marco Munizaga\n     */\n\n    //patch arraybuffers if they don't exist\n    if (typeof ArrayBuffer === 'undefined') {\n      (function (globals) {\n        \"use strict\";\n\n        globals.ArrayBuffer = function () {};\n        globals.DataView = function () {};\n      })(this);\n    }\n\n    /**\n     * ArrayBuffer\n     * @namespace\n     */\n    sjcl.codec.arrayBuffer = {\n      /** Convert from a bitArray to an ArrayBuffer. \n       * Will default to 8byte padding if padding is undefined*/\n      fromBits: function (arr, padding, padding_count) {\n        var out, i, ol, tmp, smallest;\n        padding = padding == undefined ? true : padding;\n        padding_count = padding_count || 8;\n        if (arr.length === 0) {\n          return new ArrayBuffer(0);\n        }\n        ol = sjcl.bitArray.bitLength(arr) / 8;\n\n        //check to make sure the bitLength is divisible by 8, if it isn't \n        //we can't do anything since arraybuffers work with bytes, not bits\n        if (sjcl.bitArray.bitLength(arr) % 8 !== 0) {\n          throw new sjcl.exception.invalid(\"Invalid bit size, must be divisble by 8 to fit in an arraybuffer correctly\");\n        }\n        if (padding && ol % padding_count !== 0) {\n          ol += padding_count - ol % padding_count;\n        }\n\n        //padded temp for easy copying\n        tmp = new DataView(new ArrayBuffer(arr.length * 4));\n        for (i = 0; i < arr.length; i++) {\n          tmp.setUint32(i * 4, arr[i] << 32); //get rid of the higher bits\n        }\n\n        //now copy the final message if we are not going to 0 pad\n        out = new DataView(new ArrayBuffer(ol));\n\n        //save a step when the tmp and out bytelength are ===\n        if (out.byteLength === tmp.byteLength) {\n          return tmp.buffer;\n        }\n        smallest = tmp.byteLength < out.byteLength ? tmp.byteLength : out.byteLength;\n        for (i = 0; i < smallest; i++) {\n          out.setUint8(i, tmp.getUint8(i));\n        }\n        return out.buffer;\n      },\n      toBits: function (buffer) {\n        var i,\n          out = [],\n          len,\n          inView,\n          tmp;\n        if (buffer.byteLength === 0) {\n          return [];\n        }\n        inView = new DataView(buffer);\n        len = inView.byteLength - inView.byteLength % 4;\n        for (var i = 0; i < len; i += 4) {\n          out.push(inView.getUint32(i));\n        }\n        if (inView.byteLength % 4 != 0) {\n          tmp = new DataView(new ArrayBuffer(4));\n          for (var i = 0, l = inView.byteLength % 4; i < l; i++) {\n            //we want the data to the right, because partial slices off the starting bits\n            tmp.setUint8(i + 4 - l, inView.getUint8(len + i)); // big-endian, \n          }\n          out.push(sjcl.bitArray.partial(inView.byteLength % 4 * 8, tmp.getUint32(0)));\n        }\n        return out;\n      },\n      /** Prints a hex output of the buffer contents, akin to hexdump **/\n      hexDumpBuffer: function (buffer) {\n        var stringBufferView = new DataView(buffer);\n        var string = '';\n        var pad = function (n, width) {\n          n = n + '';\n          return n.length >= width ? n : new Array(width - n.length + 1).join('0') + n;\n        };\n        for (var i = 0; i < stringBufferView.byteLength; i += 2) {\n          if (i % 16 == 0) string += '\\n' + i.toString(16) + '\\t';\n          string += pad(stringBufferView.getUint16(i).toString(16), 4) + ' ';\n        }\n        if (typeof console === undefined) {\n          console = console || {\n            log: function () {}\n          }; //fix for IE\n        }\n        console.log(string.toUpperCase());\n      }\n    };\n\n    /** @fileOverview Bit array codec implementations.\n     *\n     * @author Emily Stark\n     * @author Mike Hamburg\n     * @author Dan Boneh\n     */\n\n    /**\n     * UTF-8 strings\n     * @namespace\n     */\n    sjcl.codec.utf8String = {\n      /** Convert from a bitArray to a UTF-8 string. */\n      fromBits: function (arr) {\n        var out = \"\",\n          bl = sjcl.bitArray.bitLength(arr),\n          i,\n          tmp;\n        for (i = 0; i < bl / 8; i++) {\n          if ((i & 3) === 0) {\n            tmp = arr[i / 4];\n          }\n          out += String.fromCharCode(tmp >>> 8 >>> 8 >>> 8);\n          tmp <<= 8;\n        }\n        return decodeURIComponent(escape(out));\n      },\n      /** Convert from a UTF-8 string to a bitArray. */\n      toBits: function (str) {\n        str = unescape(encodeURIComponent(str));\n        var out = [],\n          i,\n          tmp = 0;\n        for (i = 0; i < str.length; i++) {\n          tmp = tmp << 8 | str.charCodeAt(i);\n          if ((i & 3) === 3) {\n            out.push(tmp);\n            tmp = 0;\n          }\n        }\n        if (i & 3) {\n          out.push(sjcl.bitArray.partial(8 * (i & 3), tmp));\n        }\n        return out;\n      }\n    };\n    /**\n     * base class for all ecc operations.\n     * @namespace\n     */\n    sjcl.ecc = {};\n\n    /**\n     * Represents a point on a curve in affine coordinates.\n     * @constructor\n     * @param {sjcl.ecc.curve} curve The curve that this point lies on.\n     * @param {bigInt} x The x coordinate.\n     * @param {bigInt} y The y coordinate.\n     */\n    sjcl.ecc.point = function (curve, x, y) {\n      if (x === undefined) {\n        this.isIdentity = true;\n      } else {\n        if (x instanceof sjcl.bn) {\n          x = new curve.field(x);\n        }\n        if (y instanceof sjcl.bn) {\n          y = new curve.field(y);\n        }\n        this.x = x;\n        this.y = y;\n        this.isIdentity = false;\n      }\n      this.curve = curve;\n    };\n    sjcl.ecc.point.prototype = {\n      toJac: function () {\n        return new sjcl.ecc.pointJac(this.curve, this.x, this.y, new this.curve.field(1));\n      },\n      mult: function (k) {\n        return this.toJac().mult(k, this).toAffine();\n      },\n      /**\n       * Multiply this point by k, added to affine2*k2, and return the answer in Jacobian coordinates.\n       * @param {bigInt} k The coefficient to multiply this by.\n       * @param {bigInt} k2 The coefficient to multiply affine2 this by.\n       * @param {sjcl.ecc.point} affine The other point in affine coordinates.\n       * @return {sjcl.ecc.pointJac} The result of the multiplication and addition, in Jacobian coordinates.\n       */\n      mult2: function (k, k2, affine2) {\n        return this.toJac().mult2(k, this, k2, affine2).toAffine();\n      },\n      multiples: function () {\n        var m, i, j;\n        if (this._multiples === undefined) {\n          j = this.toJac().doubl();\n          m = this._multiples = [new sjcl.ecc.point(this.curve), this, j.toAffine()];\n          for (i = 3; i < 16; i++) {\n            j = j.add(this);\n            m.push(j.toAffine());\n          }\n        }\n        return this._multiples;\n      },\n      negate: function () {\n        var newY = new this.curve.field(0).sub(this.y).normalize().reduce();\n        return new sjcl.ecc.point(this.curve, this.x, newY);\n      },\n      isValid: function () {\n        return this.y.square().equals(this.curve.b.add(this.x.mul(this.curve.a.add(this.x.square()))));\n      },\n      toBits: function () {\n        return sjcl.bitArray.concat(this.x.toBits(), this.y.toBits());\n      }\n    };\n\n    /**\n     * Represents a point on a curve in Jacobian coordinates. Coordinates can be specified as bigInts or strings (which\n     * will be converted to bigInts).\n     *\n     * @constructor\n     * @param {bigInt/string} x The x coordinate.\n     * @param {bigInt/string} y The y coordinate.\n     * @param {bigInt/string} z The z coordinate.\n     * @param {sjcl.ecc.curve} curve The curve that this point lies on.\n     */\n    sjcl.ecc.pointJac = function (curve, x, y, z) {\n      if (x === undefined) {\n        this.isIdentity = true;\n      } else {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.isIdentity = false;\n      }\n      this.curve = curve;\n    };\n    sjcl.ecc.pointJac.prototype = {\n      /**\n       * Adds S and T and returns the result in Jacobian coordinates. Note that S must be in Jacobian coordinates and T must be in affine coordinates.\n       * @param {sjcl.ecc.pointJac} S One of the points to add, in Jacobian coordinates.\n       * @param {sjcl.ecc.point} T The other point to add, in affine coordinates.\n       * @return {sjcl.ecc.pointJac} The sum of the two points, in Jacobian coordinates.\n       */\n      add: function (T) {\n        var S = this,\n          sz2,\n          c,\n          d,\n          c2,\n          x1,\n          x2,\n          x,\n          y1,\n          y2,\n          y,\n          z;\n        if (S.curve !== T.curve) {\n          throw new sjcl.exception.invalid(\"sjcl.ecc.add(): Points must be on the same curve to add them!\");\n        }\n        if (S.isIdentity) {\n          return T.toJac();\n        } else if (T.isIdentity) {\n          return S;\n        }\n        sz2 = S.z.square();\n        c = T.x.mul(sz2).subM(S.x);\n        if (c.equals(0)) {\n          if (S.y.equals(T.y.mul(sz2.mul(S.z)))) {\n            // same point\n            return S.doubl();\n          } else {\n            // inverses\n            return new sjcl.ecc.pointJac(S.curve);\n          }\n        }\n        d = T.y.mul(sz2.mul(S.z)).subM(S.y);\n        c2 = c.square();\n        x1 = d.square();\n        x2 = c.square().mul(c).addM(S.x.add(S.x).mul(c2));\n        x = x1.subM(x2);\n        y1 = S.x.mul(c2).subM(x).mul(d);\n        y2 = S.y.mul(c.square().mul(c));\n        y = y1.subM(y2);\n        z = S.z.mul(c);\n        return new sjcl.ecc.pointJac(this.curve, x, y, z);\n      },\n      /**\n       * doubles this point.\n       * @return {sjcl.ecc.pointJac} The doubled point.\n       */\n      doubl: function () {\n        if (this.isIdentity) {\n          return this;\n        }\n        var y2 = this.y.square(),\n          a = y2.mul(this.x.mul(4)),\n          b = y2.square().mul(8),\n          z2 = this.z.square(),\n          c = this.curve.a.toString() == new sjcl.bn(-3).toString() ? this.x.sub(z2).mul(3).mul(this.x.add(z2)) : this.x.square().mul(3).add(z2.square().mul(this.curve.a)),\n          x = c.square().subM(a).subM(a),\n          y = a.sub(x).mul(c).subM(b),\n          z = this.y.add(this.y).mul(this.z);\n        return new sjcl.ecc.pointJac(this.curve, x, y, z);\n      },\n      /**\n       * Returns a copy of this point converted to affine coordinates.\n       * @return {sjcl.ecc.point} The converted point.\n       */\n      toAffine: function () {\n        if (this.isIdentity || this.z.equals(0)) {\n          return new sjcl.ecc.point(this.curve);\n        }\n        var zi = this.z.inverse(),\n          zi2 = zi.square();\n        return new sjcl.ecc.point(this.curve, this.x.mul(zi2).fullReduce(), this.y.mul(zi2.mul(zi)).fullReduce());\n      },\n      /**\n       * Multiply this point by k and return the answer in Jacobian coordinates.\n       * @param {bigInt} k The coefficient to multiply by.\n       * @param {sjcl.ecc.point} affine This point in affine coordinates.\n       * @return {sjcl.ecc.pointJac} The result of the multiplication, in Jacobian coordinates.\n       */\n      mult: function (k, affine) {\n        if (typeof k === \"number\") {\n          k = [k];\n        } else if (k.limbs !== undefined) {\n          k = k.normalize().limbs;\n        }\n        var i,\n          j,\n          out = new sjcl.ecc.point(this.curve).toJac(),\n          multiples = affine.multiples();\n        for (i = k.length - 1; i >= 0; i--) {\n          for (j = sjcl.bn.prototype.radix - 4; j >= 0; j -= 4) {\n            out = out.doubl().doubl().doubl().doubl().add(multiples[k[i] >> j & 0xF]);\n          }\n        }\n        return out;\n      },\n      /**\n       * Multiply this point by k, added to affine2*k2, and return the answer in Jacobian coordinates.\n       * @param {bigInt} k The coefficient to multiply this by.\n       * @param {sjcl.ecc.point} affine This point in affine coordinates.\n       * @param {bigInt} k2 The coefficient to multiply affine2 this by.\n       * @param {sjcl.ecc.point} affine The other point in affine coordinates.\n       * @return {sjcl.ecc.pointJac} The result of the multiplication and addition, in Jacobian coordinates.\n       */\n      mult2: function (k1, affine, k2, affine2) {\n        if (typeof k1 === \"number\") {\n          k1 = [k1];\n        } else if (k1.limbs !== undefined) {\n          k1 = k1.normalize().limbs;\n        }\n        if (typeof k2 === \"number\") {\n          k2 = [k2];\n        } else if (k2.limbs !== undefined) {\n          k2 = k2.normalize().limbs;\n        }\n        var i,\n          j,\n          out = new sjcl.ecc.point(this.curve).toJac(),\n          m1 = affine.multiples(),\n          m2 = affine2.multiples(),\n          l1,\n          l2;\n        for (i = Math.max(k1.length, k2.length) - 1; i >= 0; i--) {\n          l1 = k1[i] | 0;\n          l2 = k2[i] | 0;\n          for (j = sjcl.bn.prototype.radix - 4; j >= 0; j -= 4) {\n            out = out.doubl().doubl().doubl().doubl().add(m1[l1 >> j & 0xF]).add(m2[l2 >> j & 0xF]);\n          }\n        }\n        return out;\n      },\n      negate: function () {\n        return this.toAffine().negate().toJac();\n      },\n      isValid: function () {\n        var z2 = this.z.square(),\n          z4 = z2.square(),\n          z6 = z4.mul(z2);\n        return this.y.square().equals(this.curve.b.mul(z6).add(this.x.mul(this.curve.a.mul(z4).add(this.x.square()))));\n      }\n    };\n\n    /**\n     * Construct an elliptic curve. Most users will not use this and instead start with one of the NIST curves defined below.\n     *\n     * @constructor\n     * @param {bigInt} p The prime modulus.\n     * @param {bigInt} r The prime order of the curve.\n     * @param {bigInt} a The constant a in the equation of the curve y^2 = x^3 + ax + b (for NIST curves, a is always -3).\n     * @param {bigInt} x The x coordinate of a base point of the curve.\n     * @param {bigInt} y The y coordinate of a base point of the curve.\n     */\n    sjcl.ecc.curve = function (Field, r, a, b, x, y) {\n      this.field = Field;\n      this.r = new sjcl.bn(r);\n      this.a = new Field(a);\n      this.b = new Field(b);\n      this.G = new sjcl.ecc.point(this, new Field(x), new Field(y));\n    };\n    sjcl.ecc.curve.prototype.fromBits = function (bits) {\n      var w = sjcl.bitArray,\n        l = this.field.prototype.exponent + 7 & -8,\n        p = new sjcl.ecc.point(this, this.field.fromBits(w.bitSlice(bits, 0, l)), this.field.fromBits(w.bitSlice(bits, l, 2 * l)));\n      if (!p.isValid()) {\n        throw new sjcl.exception.corrupt(\"not on the curve!\");\n      }\n      return p;\n    };\n    sjcl.ecc.curves = {\n      c192: new sjcl.ecc.curve(sjcl.bn.prime.p192, \"0xffffffffffffffffffffffff99def836146bc9b1b4d22831\", -3, \"0x64210519e59c80e70fa7e9ab72243049feb8deecc146b9b1\", \"0x188da80eb03090f67cbf20eb43a18800f4ff0afd82ff1012\", \"0x07192b95ffc8da78631011ed6b24cdd573f977a11e794811\"),\n      c224: new sjcl.ecc.curve(sjcl.bn.prime.p224, \"0xffffffffffffffffffffffffffff16a2e0b8f03e13dd29455c5c2a3d\", -3, \"0xb4050a850c04b3abf54132565044b0b7d7bfd8ba270b39432355ffb4\", \"0xb70e0cbd6bb4bf7f321390b94a03c1d356c21122343280d6115c1d21\", \"0xbd376388b5f723fb4c22dfe6cd4375a05a07476444d5819985007e34\"),\n      c256: new sjcl.ecc.curve(sjcl.bn.prime.p256, \"0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551\", -3, \"0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b\", \"0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296\", \"0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5\"),\n      c384: new sjcl.ecc.curve(sjcl.bn.prime.p384, \"0xffffffffffffffffffffffffffffffffffffffffffffffffc7634d81f4372ddf581a0db248b0a77aecec196accc52973\", -3, \"0xb3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef\", \"0xaa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a385502f25dbf55296c3a545e3872760ab7\", \"0x3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f\"),\n      c521: new sjcl.ecc.curve(sjcl.bn.prime.p521, \"0x1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA51868783BF2F966B7FCC0148F709A5D03BB5C9B8899C47AEBB6FB71E91386409\", -3, \"0x051953EB9618E1C9A1F929A21A0B68540EEA2DA725B99B315F3B8B489918EF109E156193951EC7E937B1652C0BD3BB1BF073573DF883D2C34F1EF451FD46B503F00\", \"0xC6858E06B70404E9CD9E3ECB662395B4429C648139053FB521F828AF606B4D3DBAA14B5E77EFE75928FE1DC127A2FFA8DE3348B3C1856A429BF97E7E31C2E5BD66\", \"0x11839296A789A3BC0045C8A5FB42C7D1BD998F54449579B446817AFBD17273E662C97EE72995EF42640C550B9013FAD0761353C7086A272C24088BE94769FD16650\"),\n      k192: new sjcl.ecc.curve(sjcl.bn.prime.p192k, \"0xfffffffffffffffffffffffe26f2fc170f69466a74defd8d\", 0, 3, \"0xdb4ff10ec057e9ae26b07d0280b7f4341da5d1b1eae06c7d\", \"0x9b2f2f6d9c5628a7844163d015be86344082aa88d95e2f9d\"),\n      k224: new sjcl.ecc.curve(sjcl.bn.prime.p224k, \"0x010000000000000000000000000001dce8d2ec6184caf0a971769fb1f7\", 0, 5, \"0xa1455b334df099df30fc28a169a467e9e47075a90f7e650eb6b7a45c\", \"0x7e089fed7fba344282cafbd6f7e319f7c0b0bd59e2ca4bdb556d61a5\"),\n      k256: new sjcl.ecc.curve(sjcl.bn.prime.p256k, \"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\", 0, 7, \"0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\", \"0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\")\n    };\n    sjcl.ecc.curveName = function (curve) {\n      var curcurve;\n      for (curcurve in sjcl.ecc.curves) {\n        if (sjcl.ecc.curves.hasOwnProperty(curcurve)) {\n          if (sjcl.ecc.curves[curcurve] === curve) {\n            return curcurve;\n          }\n        }\n      }\n      throw new sjcl.exception.invalid(\"no such curve\");\n    };\n    sjcl.ecc.deserialize = function (key) {\n      var types = [\"elGamal\", \"ecdsa\"];\n      if (!key || !key.curve || !sjcl.ecc.curves[key.curve]) {\n        throw new sjcl.exception.invalid(\"invalid serialization\");\n      }\n      if (types.indexOf(key.type) === -1) {\n        throw new sjcl.exception.invalid(\"invalid type\");\n      }\n      var curve = sjcl.ecc.curves[key.curve];\n      if (key.secretKey) {\n        if (!key.exponent) {\n          throw new sjcl.exception.invalid(\"invalid exponent\");\n        }\n        var exponent = new sjcl.bn(key.exponent);\n        return new sjcl.ecc[key.type].secretKey(curve, exponent);\n      } else {\n        if (!key.point) {\n          throw new sjcl.exception.invalid(\"invalid point\");\n        }\n        var point = curve.fromBits(sjcl.codec.hex.toBits(key.point));\n        return new sjcl.ecc[key.type].publicKey(curve, point);\n      }\n    };\n\n    /** our basicKey classes\n    */\n    sjcl.ecc.basicKey = {\n      /** ecc publicKey.\n      * @constructor\n      * @param {curve} curve the elliptic curve\n      * @param {point} point the point on the curve\n      */\n      publicKey: function (curve, point) {\n        this._curve = curve;\n        this._curveBitLength = curve.r.bitLength();\n        if (point instanceof Array) {\n          this._point = curve.fromBits(point);\n        } else {\n          this._point = point;\n        }\n        this.serialize = function () {\n          var curveName = sjcl.ecc.curveName(curve);\n          return {\n            type: this.getType(),\n            secretKey: false,\n            point: sjcl.codec.hex.fromBits(this._point.toBits()),\n            curve: curveName\n          };\n        };\n\n        /** get this keys point data\n        * @return x and y as bitArrays\n        */\n        this.get = function () {\n          var pointbits = this._point.toBits();\n          var len = sjcl.bitArray.bitLength(pointbits);\n          var x = sjcl.bitArray.bitSlice(pointbits, 0, len / 2);\n          var y = sjcl.bitArray.bitSlice(pointbits, len / 2);\n          return {\n            x: x,\n            y: y\n          };\n        };\n      },\n      /** ecc secretKey\n      * @constructor\n      * @param {curve} curve the elliptic curve\n      * @param exponent\n      */\n      secretKey: function (curve, exponent) {\n        this._curve = curve;\n        this._curveBitLength = curve.r.bitLength();\n        this._exponent = exponent;\n        this.serialize = function () {\n          var exponent = this.get();\n          var curveName = sjcl.ecc.curveName(curve);\n          return {\n            type: this.getType(),\n            secretKey: true,\n            exponent: sjcl.codec.hex.fromBits(exponent),\n            curve: curveName\n          };\n        };\n\n        /** get this keys exponent data\n        * @return {bitArray} exponent\n        */\n        this.get = function () {\n          return this._exponent.toBits();\n        };\n      }\n    };\n\n    /** @private */\n    sjcl.ecc.basicKey.generateKeys = function (cn) {\n      return function generateKeys(curve, paranoia, sec) {\n        curve = curve || 256;\n        if (typeof curve === \"number\") {\n          curve = sjcl.ecc.curves['c' + curve];\n          if (curve === undefined) {\n            throw new sjcl.exception.invalid(\"no such curve\");\n          }\n        }\n        sec = sec || sjcl.bn.random(curve.r, paranoia);\n        var pub = curve.G.mult(sec);\n        return {\n          pub: new sjcl.ecc[cn].publicKey(curve, pub),\n          sec: new sjcl.ecc[cn].secretKey(curve, sec)\n        };\n      };\n    };\n\n    /** elGamal keys */\n    sjcl.ecc.elGamal = {\n      /** generate keys\n      * @function\n      * @param curve\n      * @param {int} paranoia Paranoia for generation (default 6)\n      * @param {secretKey} sec secret Key to use. used to get the publicKey for ones secretKey\n      */\n      generateKeys: sjcl.ecc.basicKey.generateKeys(\"elGamal\"),\n      /** elGamal publicKey.\n      * @constructor\n      * @augments sjcl.ecc.basicKey.publicKey\n      */\n      publicKey: function (curve, point) {\n        sjcl.ecc.basicKey.publicKey.apply(this, arguments);\n      },\n      /** elGamal secretKey\n      * @constructor\n      * @augments sjcl.ecc.basicKey.secretKey\n      */\n      secretKey: function (curve, exponent) {\n        sjcl.ecc.basicKey.secretKey.apply(this, arguments);\n      }\n    };\n    sjcl.ecc.elGamal.publicKey.prototype = {\n      /** Kem function of elGamal Public Key\n      * @param paranoia paranoia to use for randomization.\n      * @return {object} key and tag. unkem(tag) with the corresponding secret key results in the key returned.\n      */\n      kem: function (paranoia) {\n        var sec = sjcl.bn.random(this._curve.r, paranoia),\n          tag = this._curve.G.mult(sec).toBits(),\n          key = sjcl.hash.sha256.hash(this._point.mult(sec).toBits());\n        return {\n          key: key,\n          tag: tag\n        };\n      },\n      getType: function () {\n        return \"elGamal\";\n      }\n    };\n    sjcl.ecc.elGamal.secretKey.prototype = {\n      /** UnKem function of elGamal Secret Key\n      * @param {bitArray} tag The Tag to decrypt.\n      * @return {bitArray} decrypted key.\n      */\n      unkem: function (tag) {\n        return sjcl.hash.sha256.hash(this._curve.fromBits(tag).mult(this._exponent).toBits());\n      },\n      /** Diffie-Hellmann function\n      * @param {elGamal.publicKey} pk The Public Key to do Diffie-Hellmann with\n      * @return {bitArray} diffie-hellmann result for this key combination.\n      */\n      dh: function (pk) {\n        return sjcl.hash.sha256.hash(pk._point.mult(this._exponent).toBits());\n      },\n      /** Diffie-Hellmann function, compatible with Java generateSecret\n      * @param {elGamal.publicKey} pk The Public Key to do Diffie-Hellmann with\n      * @return {bitArray} undigested X value, diffie-hellmann result for this key combination,\n      * compatible with Java generateSecret().\n      */\n      dhJavaEc: function (pk) {\n        return pk._point.mult(this._exponent).x.toBits();\n      },\n      getType: function () {\n        return \"elGamal\";\n      }\n    };\n\n    /** ecdsa keys */\n    sjcl.ecc.ecdsa = {\n      /** generate keys\n      * @function\n      * @param curve\n      * @param {int} paranoia Paranoia for generation (default 6)\n      * @param {secretKey} sec secret Key to use. used to get the publicKey for ones secretKey\n      */\n      generateKeys: sjcl.ecc.basicKey.generateKeys(\"ecdsa\")\n    };\n\n    /** ecdsa publicKey.\n    * @constructor\n    * @augments sjcl.ecc.basicKey.publicKey\n    */\n    sjcl.ecc.ecdsa.publicKey = function (curve, point) {\n      sjcl.ecc.basicKey.publicKey.apply(this, arguments);\n    };\n\n    /** specific functions for ecdsa publicKey. */\n    sjcl.ecc.ecdsa.publicKey.prototype = {\n      /** Diffie-Hellmann function\n      * @param {bitArray} hash hash to verify.\n      * @param {bitArray} rs signature bitArray.\n      * @param {boolean}  fakeLegacyVersion use old legacy version\n      */\n      verify: function (hash, rs, fakeLegacyVersion) {\n        if (sjcl.bitArray.bitLength(hash) > this._curveBitLength) {\n          hash = sjcl.bitArray.clamp(hash, this._curveBitLength);\n        }\n        var w = sjcl.bitArray,\n          R = this._curve.r,\n          l = this._curveBitLength,\n          r = sjcl.bn.fromBits(w.bitSlice(rs, 0, l)),\n          ss = sjcl.bn.fromBits(w.bitSlice(rs, l, 2 * l)),\n          s = fakeLegacyVersion ? ss : ss.inverseMod(R),\n          hG = sjcl.bn.fromBits(hash).mul(s).mod(R),\n          hA = r.mul(s).mod(R),\n          r2 = this._curve.G.mult2(hG, hA, this._point).x;\n        if (r.equals(0) || ss.equals(0) || r.greaterEquals(R) || ss.greaterEquals(R) || !r2.equals(r)) {\n          if (fakeLegacyVersion === undefined) {\n            return this.verify(hash, rs, true);\n          } else {\n            throw new sjcl.exception.corrupt(\"signature didn't check out\");\n          }\n        }\n        return true;\n      },\n      getType: function () {\n        return \"ecdsa\";\n      }\n    };\n\n    /** ecdsa secretKey\n    * @constructor\n    * @augments sjcl.ecc.basicKey.publicKey\n    */\n    sjcl.ecc.ecdsa.secretKey = function (curve, exponent) {\n      sjcl.ecc.basicKey.secretKey.apply(this, arguments);\n    };\n\n    /** specific functions for ecdsa secretKey. */\n    sjcl.ecc.ecdsa.secretKey.prototype = {\n      /** Diffie-Hellmann function\n      * @param {bitArray} hash hash to sign.\n      * @param {int} paranoia paranoia for random number generation\n      * @param {boolean} fakeLegacyVersion use old legacy version\n      */\n      sign: function (hash, paranoia, fakeLegacyVersion, fixedKForTesting) {\n        if (sjcl.bitArray.bitLength(hash) > this._curveBitLength) {\n          hash = sjcl.bitArray.clamp(hash, this._curveBitLength);\n        }\n        var R = this._curve.r,\n          l = R.bitLength(),\n          k = fixedKForTesting || sjcl.bn.random(R.sub(1), paranoia).add(1),\n          r = this._curve.G.mult(k).x.mod(R),\n          ss = sjcl.bn.fromBits(hash).add(r.mul(this._exponent)),\n          s = fakeLegacyVersion ? ss.inverseMod(R).mul(k).mod(R) : ss.mul(k.inverseMod(R)).mod(R);\n        return sjcl.bitArray.concat(r.toBits(l), s.toBits(l));\n      },\n      getType: function () {\n        return \"ecdsa\";\n      }\n    };\n    /** @fileOverview Javascript RIPEMD-160 implementation.\n     *\n     * @author Artem S Vybornov <vybornov@gmail.com>\n     */\n    (function () {\n      /**\n       * Context for a RIPEMD-160 operation in progress.\n       * @constructor\n       */\n      sjcl.hash.ripemd160 = function (hash) {\n        if (hash) {\n          this._h = hash._h.slice(0);\n          this._buffer = hash._buffer.slice(0);\n          this._length = hash._length;\n        } else {\n          this.reset();\n        }\n      };\n\n      /**\n       * Hash a string or an array of words.\n       * @static\n       * @param {bitArray|String} data the data to hash.\n       * @return {bitArray} The hash value, an array of 5 big-endian words.\n       */\n      sjcl.hash.ripemd160.hash = function (data) {\n        return new sjcl.hash.ripemd160().update(data).finalize();\n      };\n      sjcl.hash.ripemd160.prototype = {\n        /**\n         * Reset the hash state.\n         * @return this\n         */\n        reset: function () {\n          this._h = _h0.slice(0);\n          this._buffer = [];\n          this._length = 0;\n          return this;\n        },\n        /**\n         * Reset the hash state.\n         * @param {bitArray|String} data the data to hash.\n         * @return this\n         */\n        update: function (data) {\n          if (typeof data === \"string\") data = sjcl.codec.utf8String.toBits(data);\n          var i,\n            b = this._buffer = sjcl.bitArray.concat(this._buffer, data),\n            ol = this._length,\n            nl = this._length = ol + sjcl.bitArray.bitLength(data);\n          if (nl > 9007199254740991) {\n            throw new sjcl.exception.invalid(\"Cannot hash more than 2^53 - 1 bits\");\n          }\n          for (i = 512 + ol - (512 + ol & 511); i <= nl; i += 512) {\n            var words = b.splice(0, 16);\n            for (var w = 0; w < 16; ++w) words[w] = _cvt(words[w]);\n            _block.call(this, words);\n          }\n          return this;\n        },\n        /**\n         * Complete hashing and output the hash value.\n         * @return {bitArray} The hash value, an array of 5 big-endian words.\n         */\n        finalize: function () {\n          var b = sjcl.bitArray.concat(this._buffer, [sjcl.bitArray.partial(1, 1)]),\n            l = (this._length + 1) % 512,\n            z = (l > 448 ? 512 : 448) - l % 448,\n            zp = z % 32;\n          if (zp > 0) b = sjcl.bitArray.concat(b, [sjcl.bitArray.partial(zp, 0)]);\n          for (; z >= 32; z -= 32) b.push(0);\n          b.push(_cvt(this._length | 0));\n          b.push(_cvt(Math.floor(this._length / 0x100000000)));\n          while (b.length) {\n            var words = b.splice(0, 16);\n            for (var w = 0; w < 16; ++w) words[w] = _cvt(words[w]);\n            _block.call(this, words);\n          }\n          var h = this._h;\n          this.reset();\n          for (var w = 0; w < 5; ++w) h[w] = _cvt(h[w]);\n          return h;\n        }\n      };\n      var _h0 = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n      var _k1 = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e];\n      var _k2 = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000];\n      for (var i = 4; i >= 0; --i) {\n        for (var j = 1; j < 16; ++j) {\n          _k1.splice(i, 0, _k1[i]);\n          _k2.splice(i, 0, _k2[i]);\n        }\n      }\n      var _r1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];\n      var _r2 = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];\n      var _s1 = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];\n      var _s2 = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];\n      function _f0(x, y, z) {\n        return x ^ y ^ z;\n      }\n      function _f1(x, y, z) {\n        return x & y | ~x & z;\n      }\n      function _f2(x, y, z) {\n        return (x | ~y) ^ z;\n      }\n      function _f3(x, y, z) {\n        return x & z | y & ~z;\n      }\n      function _f4(x, y, z) {\n        return x ^ (y | ~z);\n      }\n      function _rol(n, l) {\n        return n << l | n >>> 32 - l;\n      }\n      function _cvt(n) {\n        return (n & 0xff << 0) << 24 | (n & 0xff << 8) << 8 | (n & 0xff << 16) >>> 8 | (n & 0xff << 24) >>> 24;\n      }\n      function _block(X) {\n        var A1 = this._h[0],\n          B1 = this._h[1],\n          C1 = this._h[2],\n          D1 = this._h[3],\n          E1 = this._h[4],\n          A2 = this._h[0],\n          B2 = this._h[1],\n          C2 = this._h[2],\n          D2 = this._h[3],\n          E2 = this._h[4];\n        var j = 0,\n          T;\n        for (; j < 16; ++j) {\n          T = _rol(A1 + _f0(B1, C1, D1) + X[_r1[j]] + _k1[j], _s1[j]) + E1;\n          A1 = E1;\n          E1 = D1;\n          D1 = _rol(C1, 10);\n          C1 = B1;\n          B1 = T;\n          T = _rol(A2 + _f4(B2, C2, D2) + X[_r2[j]] + _k2[j], _s2[j]) + E2;\n          A2 = E2;\n          E2 = D2;\n          D2 = _rol(C2, 10);\n          C2 = B2;\n          B2 = T;\n        }\n        for (; j < 32; ++j) {\n          T = _rol(A1 + _f1(B1, C1, D1) + X[_r1[j]] + _k1[j], _s1[j]) + E1;\n          A1 = E1;\n          E1 = D1;\n          D1 = _rol(C1, 10);\n          C1 = B1;\n          B1 = T;\n          T = _rol(A2 + _f3(B2, C2, D2) + X[_r2[j]] + _k2[j], _s2[j]) + E2;\n          A2 = E2;\n          E2 = D2;\n          D2 = _rol(C2, 10);\n          C2 = B2;\n          B2 = T;\n        }\n        for (; j < 48; ++j) {\n          T = _rol(A1 + _f2(B1, C1, D1) + X[_r1[j]] + _k1[j], _s1[j]) + E1;\n          A1 = E1;\n          E1 = D1;\n          D1 = _rol(C1, 10);\n          C1 = B1;\n          B1 = T;\n          T = _rol(A2 + _f2(B2, C2, D2) + X[_r2[j]] + _k2[j], _s2[j]) + E2;\n          A2 = E2;\n          E2 = D2;\n          D2 = _rol(C2, 10);\n          C2 = B2;\n          B2 = T;\n        }\n        for (; j < 64; ++j) {\n          T = _rol(A1 + _f3(B1, C1, D1) + X[_r1[j]] + _k1[j], _s1[j]) + E1;\n          A1 = E1;\n          E1 = D1;\n          D1 = _rol(C1, 10);\n          C1 = B1;\n          B1 = T;\n          T = _rol(A2 + _f1(B2, C2, D2) + X[_r2[j]] + _k2[j], _s2[j]) + E2;\n          A2 = E2;\n          E2 = D2;\n          D2 = _rol(C2, 10);\n          C2 = B2;\n          B2 = T;\n        }\n        for (; j < 80; ++j) {\n          T = _rol(A1 + _f4(B1, C1, D1) + X[_r1[j]] + _k1[j], _s1[j]) + E1;\n          A1 = E1;\n          E1 = D1;\n          D1 = _rol(C1, 10);\n          C1 = B1;\n          B1 = T;\n          T = _rol(A2 + _f0(B2, C2, D2) + X[_r2[j]] + _k2[j], _s2[j]) + E2;\n          A2 = E2;\n          E2 = D2;\n          D2 = _rol(C2, 10);\n          C2 = B2;\n          B2 = T;\n        }\n        T = this._h[1] + C1 + D2;\n        this._h[1] = this._h[2] + D1 + E2;\n        this._h[2] = this._h[3] + E1 + A2;\n        this._h[3] = this._h[4] + A1 + B2;\n        this._h[4] = this._h[0] + B1 + C2;\n        this._h[0] = T;\n      }\n    })();\n    /** @fileOverview Javascript SHA-256 implementation.\n     *\n     * An older version of this implementation is available in the public\n     * domain, but this one is (c) Emily Stark, Mike Hamburg, Dan Boneh,\n     * Stanford University 2008-2010 and BSD-licensed for liability\n     * reasons.\n     *\n     * Special thanks to Aldo Cortesi for pointing out several bugs in\n     * this code.\n     *\n     * @author Emily Stark\n     * @author Mike Hamburg\n     * @author Dan Boneh\n     */\n\n    /**\n     * Context for a SHA-256 operation in progress.\n     * @constructor\n     */\n    sjcl.hash.sha256 = function (hash) {\n      if (!this._key[0]) {\n        this._precompute();\n      }\n      if (hash) {\n        this._h = hash._h.slice(0);\n        this._buffer = hash._buffer.slice(0);\n        this._length = hash._length;\n      } else {\n        this.reset();\n      }\n    };\n\n    /**\n     * Hash a string or an array of words.\n     * @static\n     * @param {bitArray|String} data the data to hash.\n     * @return {bitArray} The hash value, an array of 16 big-endian words.\n     */\n    sjcl.hash.sha256.hash = function (data) {\n      return new sjcl.hash.sha256().update(data).finalize();\n    };\n    sjcl.hash.sha256.prototype = {\n      /**\n       * The hash's block size, in bits.\n       * @constant\n       */\n      blockSize: 512,\n      /**\n       * Reset the hash state.\n       * @return this\n       */\n      reset: function () {\n        this._h = this._init.slice(0);\n        this._buffer = [];\n        this._length = 0;\n        return this;\n      },\n      /**\n       * Input several words to the hash.\n       * @param {bitArray|String} data the data to hash.\n       * @return this\n       */\n      update: function (data) {\n        if (typeof data === \"string\") {\n          data = sjcl.codec.utf8String.toBits(data);\n        }\n        var i,\n          b = this._buffer = sjcl.bitArray.concat(this._buffer, data),\n          ol = this._length,\n          nl = this._length = ol + sjcl.bitArray.bitLength(data);\n        if (nl > 9007199254740991) {\n          throw new sjcl.exception.invalid(\"Cannot hash more than 2^53 - 1 bits\");\n        }\n        if (typeof Uint32Array !== 'undefined') {\n          var c = new Uint32Array(b);\n          var j = 0;\n          for (i = 512 + ol - (512 + ol & 511); i <= nl; i += 512) {\n            this._block(c.subarray(16 * j, 16 * (j + 1)));\n            j += 1;\n          }\n          b.splice(0, 16 * j);\n        } else {\n          for (i = 512 + ol - (512 + ol & 511); i <= nl; i += 512) {\n            this._block(b.splice(0, 16));\n          }\n        }\n        return this;\n      },\n      /**\n       * Complete hashing and output the hash value.\n       * @return {bitArray} The hash value, an array of 8 big-endian words.\n       */\n      finalize: function () {\n        var i,\n          b = this._buffer,\n          h = this._h;\n\n        // Round out and push the buffer\n        b = sjcl.bitArray.concat(b, [sjcl.bitArray.partial(1, 1)]);\n\n        // Round out the buffer to a multiple of 16 words, less the 2 length words.\n        for (i = b.length + 2; i & 15; i++) {\n          b.push(0);\n        }\n\n        // append the length\n        b.push(Math.floor(this._length / 0x100000000));\n        b.push(this._length | 0);\n        while (b.length) {\n          this._block(b.splice(0, 16));\n        }\n        this.reset();\n        return h;\n      },\n      /**\n       * The SHA-256 initialization vector, to be precomputed.\n       * @private\n       */\n      _init: [],\n      /*\n      _init:[0x6a09e667,0xbb67ae85,0x3c6ef372,0xa54ff53a,0x510e527f,0x9b05688c,0x1f83d9ab,0x5be0cd19],\n      */\n\n      /**\n       * The SHA-256 hash key, to be precomputed.\n       * @private\n       */\n      _key: [],\n      /*\n      _key:\n        [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n         0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n         0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n         0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n         0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n         0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n         0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n         0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2],\n      */\n\n      /**\n       * Function to precompute _init and _key.\n       * @private\n       */\n      _precompute: function () {\n        var i = 0,\n          prime = 2,\n          factor,\n          isPrime;\n        function frac(x) {\n          return (x - Math.floor(x)) * 0x100000000 | 0;\n        }\n        for (; i < 64; prime++) {\n          isPrime = true;\n          for (factor = 2; factor * factor <= prime; factor++) {\n            if (prime % factor === 0) {\n              isPrime = false;\n              break;\n            }\n          }\n          if (isPrime) {\n            if (i < 8) {\n              this._init[i] = frac(Math.pow(prime, 1 / 2));\n            }\n            this._key[i] = frac(Math.pow(prime, 1 / 3));\n            i++;\n          }\n        }\n      },\n      /**\n       * Perform one cycle of SHA-256.\n       * @param {Uint32Array|bitArray} w one block of words.\n       * @private\n       */\n      _block: function (w) {\n        var i,\n          tmp,\n          a,\n          b,\n          h = this._h,\n          k = this._key,\n          h0 = h[0],\n          h1 = h[1],\n          h2 = h[2],\n          h3 = h[3],\n          h4 = h[4],\n          h5 = h[5],\n          h6 = h[6],\n          h7 = h[7];\n\n        /* Rationale for placement of |0 :\n         * If a value can overflow is original 32 bits by a factor of more than a few\n         * million (2^23 ish), there is a possibility that it might overflow the\n         * 53-bit mantissa and lose precision.\n         *\n         * To avoid this, we clamp back to 32 bits by |'ing with 0 on any value that\n         * propagates around the loop, and on the hash state h[].  I don't believe\n         * that the clamps on h4 and on h0 are strictly necessary, but it's close\n         * (for h4 anyway), and better safe than sorry.\n         *\n         * The clamps on h[] are necessary for the output to be correct even in the\n         * common case and for short inputs.\n         */\n        for (i = 0; i < 64; i++) {\n          // load up the input word for this round\n          if (i < 16) {\n            tmp = w[i];\n          } else {\n            a = w[i + 1 & 15];\n            b = w[i + 14 & 15];\n            tmp = w[i & 15] = (a >>> 7 ^ a >>> 18 ^ a >>> 3 ^ a << 25 ^ a << 14) + (b >>> 17 ^ b >>> 19 ^ b >>> 10 ^ b << 15 ^ b << 13) + w[i & 15] + w[i + 9 & 15] | 0;\n          }\n          tmp = tmp + h7 + (h4 >>> 6 ^ h4 >>> 11 ^ h4 >>> 25 ^ h4 << 26 ^ h4 << 21 ^ h4 << 7) + (h6 ^ h4 & (h5 ^ h6)) + k[i]; // | 0;\n\n          // shift register\n          h7 = h6;\n          h6 = h5;\n          h5 = h4;\n          h4 = h3 + tmp | 0;\n          h3 = h2;\n          h2 = h1;\n          h1 = h0;\n          h0 = tmp + (h1 & h2 ^ h3 & (h1 ^ h2)) + (h1 >>> 2 ^ h1 >>> 13 ^ h1 >>> 22 ^ h1 << 30 ^ h1 << 19 ^ h1 << 10) | 0;\n        }\n        h[0] = h[0] + h0 | 0;\n        h[1] = h[1] + h1 | 0;\n        h[2] = h[2] + h2 | 0;\n        h[3] = h[3] + h3 | 0;\n        h[4] = h[4] + h4 | 0;\n        h[5] = h[5] + h5 | 0;\n        h[6] = h[6] + h6 | 0;\n        h[7] = h[7] + h7 | 0;\n      }\n    };\n\n    /** @fileOverview Random number generator.\n     *\n     * @author Emily Stark\n     * @author Mike Hamburg\n     * @author Dan Boneh\n     * @author Michael Brooks\n     * @author Steve Thomas\n     */\n\n    /** \n     * @class Random number generator\n     * @description\n     * <b>Use sjcl.random as a singleton for this class!</b>\n     * <p>\n     * This random number generator is a derivative of Ferguson and Schneier's\n     * generator Fortuna.  It collects entropy from various events into several\n     * pools, implemented by streaming SHA-256 instances.  It differs from\n     * ordinary Fortuna in a few ways, though.\n     * </p>\n     *\n     * <p>\n     * Most importantly, it has an entropy estimator.  This is present because\n     * there is a strong conflict here between making the generator available\n     * as soon as possible, and making sure that it doesn't \"run on empty\".\n     * In Fortuna, there is a saved state file, and the system is likely to have\n     * time to warm up.\n     * </p>\n     *\n     * <p>\n     * Second, because users are unlikely to stay on the page for very long,\n     * and to speed startup time, the number of pools increases logarithmically:\n     * a new pool is created when the previous one is actually used for a reseed.\n     * This gives the same asymptotic guarantees as Fortuna, but gives more\n     * entropy to early reseeds.\n     * </p>\n     *\n     * <p>\n     * The entire mechanism here feels pretty klunky.  Furthermore, there are\n     * several improvements that should be made, including support for\n     * dedicated cryptographic functions that may be present in some browsers;\n     * state files in local storage; cookies containing randomness; etc.  So\n     * look for improvements in future versions.\n     * </p>\n     * @constructor\n     */\n    sjcl.prng = function (defaultParanoia) {\n      /* private */\n      this._pools = [new sjcl.hash.sha256()];\n      this._poolEntropy = [0];\n      this._reseedCount = 0;\n      this._robins = {};\n      this._eventId = 0;\n      this._collectorIds = {};\n      this._collectorIdNext = 0;\n      this._strength = 0;\n      this._poolStrength = 0;\n      this._nextReseed = 0;\n      this._key = [0, 0, 0, 0, 0, 0, 0, 0];\n      this._counter = [0, 0, 0, 0];\n      this._cipher = undefined;\n      this._defaultParanoia = defaultParanoia;\n\n      /* event listener stuff */\n      this._collectorsStarted = false;\n      this._callbacks = {\n        progress: {},\n        seeded: {}\n      };\n      this._callbackI = 0;\n\n      /* constants */\n      this._NOT_READY = 0;\n      this._READY = 1;\n      this._REQUIRES_RESEED = 2;\n      this._MAX_WORDS_PER_BURST = 65536;\n      this._PARANOIA_LEVELS = [0, 48, 64, 96, 128, 192, 256, 384, 512, 768, 1024];\n      this._MILLISECONDS_PER_RESEED = 30000;\n      this._BITS_PER_RESEED = 80;\n    };\n    sjcl.prng.prototype = {\n      /** Generate several random words, and return them in an array.\n       * A word consists of 32 bits (4 bytes)\n       * @param {Number} nwords The number of words to generate.\n       */\n      randomWords: function (nwords, paranoia) {\n        var out = [],\n          i,\n          readiness = this.isReady(paranoia),\n          g;\n        if (readiness === this._NOT_READY) {\n          throw new sjcl.exception.notReady(\"generator isn't seeded\");\n        } else if (readiness & this._REQUIRES_RESEED) {\n          this._reseedFromPools(!(readiness & this._READY));\n        }\n        for (i = 0; i < nwords; i += 4) {\n          if ((i + 1) % this._MAX_WORDS_PER_BURST === 0) {\n            this._gate();\n          }\n          g = this._gen4words();\n          out.push(g[0], g[1], g[2], g[3]);\n        }\n        this._gate();\n        return out.slice(0, nwords);\n      },\n      setDefaultParanoia: function (paranoia, allowZeroParanoia) {\n        if (paranoia === 0 && allowZeroParanoia !== \"Setting paranoia=0 will ruin your security; use it only for testing\") {\n          throw new sjcl.exception.invalid(\"Setting paranoia=0 will ruin your security; use it only for testing\");\n        }\n        this._defaultParanoia = paranoia;\n      },\n      /**\n       * Add entropy to the pools.\n       * @param data The entropic value.  Should be a 32-bit integer, array of 32-bit integers, or string\n       * @param {Number} estimatedEntropy The estimated entropy of data, in bits\n       * @param {String} source The source of the entropy, eg \"mouse\"\n       */\n      addEntropy: function (data, estimatedEntropy, source) {\n        source = source || \"user\";\n        var id,\n          i,\n          tmp,\n          t = new Date().valueOf(),\n          robin = this._robins[source],\n          oldReady = this.isReady(),\n          err = 0,\n          objName;\n        id = this._collectorIds[source];\n        if (id === undefined) {\n          id = this._collectorIds[source] = this._collectorIdNext++;\n        }\n        if (robin === undefined) {\n          robin = this._robins[source] = 0;\n        }\n        this._robins[source] = (this._robins[source] + 1) % this._pools.length;\n        switch (typeof data) {\n          case \"number\":\n            if (estimatedEntropy === undefined) {\n              estimatedEntropy = 1;\n            }\n            this._pools[robin].update([id, this._eventId++, 1, estimatedEntropy, t, 1, data | 0]);\n            break;\n          case \"object\":\n            objName = Object.prototype.toString.call(data);\n            if (objName === \"[object Uint32Array]\") {\n              tmp = [];\n              for (i = 0; i < data.length; i++) {\n                tmp.push(data[i]);\n              }\n              data = tmp;\n            } else {\n              if (objName !== \"[object Array]\") {\n                err = 1;\n              }\n              for (i = 0; i < data.length && !err; i++) {\n                if (typeof data[i] !== \"number\") {\n                  err = 1;\n                }\n              }\n            }\n            if (!err) {\n              if (estimatedEntropy === undefined) {\n                /* horrible entropy estimator */\n                estimatedEntropy = 0;\n                for (i = 0; i < data.length; i++) {\n                  tmp = data[i];\n                  while (tmp > 0) {\n                    estimatedEntropy++;\n                    tmp = tmp >>> 1;\n                  }\n                }\n              }\n              this._pools[robin].update([id, this._eventId++, 2, estimatedEntropy, t, data.length].concat(data));\n            }\n            break;\n          case \"string\":\n            if (estimatedEntropy === undefined) {\n              /* English text has just over 1 bit per character of entropy.\n               * But this might be HTML or something, and have far less\n               * entropy than English...  Oh well, let's just say one bit.\n               */\n              estimatedEntropy = data.length;\n            }\n            this._pools[robin].update([id, this._eventId++, 3, estimatedEntropy, t, data.length]);\n            this._pools[robin].update(data);\n            break;\n          default:\n            err = 1;\n        }\n        if (err) {\n          throw new sjcl.exception.bug(\"random: addEntropy only supports number, array of numbers or string\");\n        }\n\n        /* record the new strength */\n        this._poolEntropy[robin] += estimatedEntropy;\n        this._poolStrength += estimatedEntropy;\n\n        /* fire off events */\n        if (oldReady === this._NOT_READY) {\n          if (this.isReady() !== this._NOT_READY) {\n            this._fireEvent(\"seeded\", Math.max(this._strength, this._poolStrength));\n          }\n          this._fireEvent(\"progress\", this.getProgress());\n        }\n      },\n      /** Is the generator ready? */\n      isReady: function (paranoia) {\n        var entropyRequired = this._PARANOIA_LEVELS[paranoia !== undefined ? paranoia : this._defaultParanoia];\n        if (this._strength && this._strength >= entropyRequired) {\n          return this._poolEntropy[0] > this._BITS_PER_RESEED && new Date().valueOf() > this._nextReseed ? this._REQUIRES_RESEED | this._READY : this._READY;\n        } else {\n          return this._poolStrength >= entropyRequired ? this._REQUIRES_RESEED | this._NOT_READY : this._NOT_READY;\n        }\n      },\n      /** Get the generator's progress toward readiness, as a fraction */\n      getProgress: function (paranoia) {\n        var entropyRequired = this._PARANOIA_LEVELS[paranoia ? paranoia : this._defaultParanoia];\n        if (this._strength >= entropyRequired) {\n          return 1.0;\n        } else {\n          return this._poolStrength > entropyRequired ? 1.0 : this._poolStrength / entropyRequired;\n        }\n      },\n      /** start the built-in entropy collectors */\n      startCollectors: function () {\n        if (this._collectorsStarted) {\n          return;\n        }\n        this._eventListener = {\n          loadTimeCollector: this._bind(this._loadTimeCollector),\n          mouseCollector: this._bind(this._mouseCollector),\n          keyboardCollector: this._bind(this._keyboardCollector),\n          accelerometerCollector: this._bind(this._accelerometerCollector),\n          touchCollector: this._bind(this._touchCollector)\n        };\n        if (window.addEventListener) {\n          window.addEventListener(\"load\", this._eventListener.loadTimeCollector, false);\n          window.addEventListener(\"mousemove\", this._eventListener.mouseCollector, false);\n          window.addEventListener(\"keypress\", this._eventListener.keyboardCollector, false);\n          window.addEventListener(\"devicemotion\", this._eventListener.accelerometerCollector, false);\n          window.addEventListener(\"touchmove\", this._eventListener.touchCollector, false);\n        } else if (document.attachEvent) {\n          document.attachEvent(\"onload\", this._eventListener.loadTimeCollector);\n          document.attachEvent(\"onmousemove\", this._eventListener.mouseCollector);\n          document.attachEvent(\"keypress\", this._eventListener.keyboardCollector);\n        } else {\n          throw new sjcl.exception.bug(\"can't attach event\");\n        }\n        this._collectorsStarted = true;\n      },\n      /** stop the built-in entropy collectors */\n      stopCollectors: function () {\n        if (!this._collectorsStarted) {\n          return;\n        }\n        if (window.removeEventListener) {\n          window.removeEventListener(\"load\", this._eventListener.loadTimeCollector, false);\n          window.removeEventListener(\"mousemove\", this._eventListener.mouseCollector, false);\n          window.removeEventListener(\"keypress\", this._eventListener.keyboardCollector, false);\n          window.removeEventListener(\"devicemotion\", this._eventListener.accelerometerCollector, false);\n          window.removeEventListener(\"touchmove\", this._eventListener.touchCollector, false);\n        } else if (document.detachEvent) {\n          document.detachEvent(\"onload\", this._eventListener.loadTimeCollector);\n          document.detachEvent(\"onmousemove\", this._eventListener.mouseCollector);\n          document.detachEvent(\"keypress\", this._eventListener.keyboardCollector);\n        }\n        this._collectorsStarted = false;\n      },\n      /* use a cookie to store entropy.\n      useCookie: function (all_cookies) {\n          throw new sjcl.exception.bug(\"random: useCookie is unimplemented\");\n      },*/\n\n      /** add an event listener for progress or seeded-ness. */\n      addEventListener: function (name, callback) {\n        this._callbacks[name][this._callbackI++] = callback;\n      },\n      /** remove an event listener for progress or seeded-ness */\n      removeEventListener: function (name, cb) {\n        var i,\n          j,\n          cbs = this._callbacks[name],\n          jsTemp = [];\n\n        /* I'm not sure if this is necessary; in C++, iterating over a\n         * collection and modifying it at the same time is a no-no.\n         */\n\n        for (j in cbs) {\n          if (cbs.hasOwnProperty(j) && cbs[j] === cb) {\n            jsTemp.push(j);\n          }\n        }\n        for (i = 0; i < jsTemp.length; i++) {\n          j = jsTemp[i];\n          delete cbs[j];\n        }\n      },\n      _bind: function (func) {\n        var that = this;\n        return function () {\n          func.apply(that, arguments);\n        };\n      },\n      /** Generate 4 random words, no reseed, no gate.\n       * @private\n       */\n      _gen4words: function () {\n        for (var i = 0; i < 4; i++) {\n          this._counter[i] = this._counter[i] + 1 | 0;\n          if (this._counter[i]) {\n            break;\n          }\n        }\n        return this._cipher.encrypt(this._counter);\n      },\n      /* Rekey the AES instance with itself after a request, or every _MAX_WORDS_PER_BURST words.\n       * @private\n       */\n      _gate: function () {\n        this._key = this._gen4words().concat(this._gen4words());\n        this._cipher = new sjcl.cipher.aes(this._key);\n      },\n      /** Reseed the generator with the given words\n       * @private\n       */\n      _reseed: function (seedWords) {\n        this._key = sjcl.hash.sha256.hash(this._key.concat(seedWords));\n        this._cipher = new sjcl.cipher.aes(this._key);\n        for (var i = 0; i < 4; i++) {\n          this._counter[i] = this._counter[i] + 1 | 0;\n          if (this._counter[i]) {\n            break;\n          }\n        }\n      },\n      /** reseed the data from the entropy pools\n       * @param full If set, use all the entropy pools in the reseed.\n       */\n      _reseedFromPools: function (full) {\n        var reseedData = [],\n          strength = 0,\n          i;\n        this._nextReseed = reseedData[0] = new Date().valueOf() + this._MILLISECONDS_PER_RESEED;\n        for (i = 0; i < 16; i++) {\n          /* On some browsers, this is cryptographically random.  So we might\n           * as well toss it in the pot and stir...\n           */\n          reseedData.push(Math.random() * 0x100000000 | 0);\n        }\n        for (i = 0; i < this._pools.length; i++) {\n          reseedData = reseedData.concat(this._pools[i].finalize());\n          strength += this._poolEntropy[i];\n          this._poolEntropy[i] = 0;\n          if (!full && this._reseedCount & 1 << i) {\n            break;\n          }\n        }\n\n        /* if we used the last pool, push a new one onto the stack */\n        if (this._reseedCount >= 1 << this._pools.length) {\n          this._pools.push(new sjcl.hash.sha256());\n          this._poolEntropy.push(0);\n        }\n\n        /* how strong was this reseed? */\n        this._poolStrength -= strength;\n        if (strength > this._strength) {\n          this._strength = strength;\n        }\n        this._reseedCount++;\n        this._reseed(reseedData);\n      },\n      _keyboardCollector: function () {\n        this._addCurrentTimeToEntropy(1);\n      },\n      _mouseCollector: function (ev) {\n        var x, y;\n        try {\n          x = ev.x || ev.clientX || ev.offsetX || 0;\n          y = ev.y || ev.clientY || ev.offsetY || 0;\n        } catch (err) {\n          // Event originated from a secure element. No mouse position available.\n          x = 0;\n          y = 0;\n        }\n        if (x != 0 && y != 0) {\n          this.addEntropy([x, y], 2, \"mouse\");\n        }\n        this._addCurrentTimeToEntropy(0);\n      },\n      _touchCollector: function (ev) {\n        var touch = ev.touches[0] || ev.changedTouches[0];\n        var x = touch.pageX || touch.clientX,\n          y = touch.pageY || touch.clientY;\n        this.addEntropy([x, y], 1, \"touch\");\n        this._addCurrentTimeToEntropy(0);\n      },\n      _loadTimeCollector: function () {\n        this._addCurrentTimeToEntropy(2);\n      },\n      _addCurrentTimeToEntropy: function (estimatedEntropy) {\n        if (typeof window !== 'undefined' && window.performance && typeof window.performance.now === \"function\") {\n          //how much entropy do we want to add here?\n          this.addEntropy(window.performance.now(), estimatedEntropy, \"loadtime\");\n        } else {\n          this.addEntropy(new Date().valueOf(), estimatedEntropy, \"loadtime\");\n        }\n      },\n      _accelerometerCollector: function (ev) {\n        var ac = ev.accelerationIncludingGravity.x || ev.accelerationIncludingGravity.y || ev.accelerationIncludingGravity.z;\n        if (window.orientation) {\n          var or = window.orientation;\n          if (typeof or === \"number\") {\n            this.addEntropy(or, 1, \"accelerometer\");\n          }\n        }\n        if (ac) {\n          this.addEntropy(ac, 2, \"accelerometer\");\n        }\n        this._addCurrentTimeToEntropy(0);\n      },\n      _fireEvent: function (name, arg) {\n        var j,\n          cbs = sjcl.random._callbacks[name],\n          cbsTemp = [];\n        /* TODO: there is a race condition between removing collectors and firing them */\n\n        /* I'm not sure if this is necessary; in C++, iterating over a\n         * collection and modifying it at the same time is a no-no.\n         */\n\n        for (j in cbs) {\n          if (cbs.hasOwnProperty(j)) {\n            cbsTemp.push(cbs[j]);\n          }\n        }\n        for (j = 0; j < cbsTemp.length; j++) {\n          cbsTemp[j](arg);\n        }\n      }\n    };\n\n    /** an instance for the prng.\n    * @see sjcl.prng\n    */\n    sjcl.random = new sjcl.prng(6);\n    (function () {\n      // function for getting nodejs crypto module. catches and ignores errors.\n      function getCryptoModule() {\n        try {\n          return require('crypto');\n        } catch (e) {\n          return null;\n        }\n      }\n      try {\n        var buf, crypt, ab;\n\n        // get cryptographically strong entropy depending on runtime environment\n        if (typeof module !== 'undefined' && module.exports && (crypt = getCryptoModule()) && crypt.randomBytes) {\n          buf = crypt.randomBytes(1024 / 8);\n          buf = new Uint32Array(new Uint8Array(buf).buffer);\n          sjcl.random.addEntropy(buf, 1024, \"crypto.randomBytes\");\n        } else if (typeof window !== 'undefined' && typeof Uint32Array !== 'undefined') {\n          ab = new Uint32Array(32);\n          if (window.crypto && window.crypto.getRandomValues) {\n            window.crypto.getRandomValues(ab);\n          } else if (window.msCrypto && window.msCrypto.getRandomValues) {\n            window.msCrypto.getRandomValues(ab);\n          } else {\n            return;\n          }\n\n          // get cryptographically strong entropy in Webkit\n          sjcl.random.addEntropy(ab, 1024, \"crypto.getRandomValues\");\n        } else {\n          // no getRandomValues :-(\n        }\n      } catch (e) {\n        if (typeof window !== 'undefined' && window.console) {\n          console.log(\"There was an error collecting entropy from the browser:\");\n          console.log(e);\n          //we do not want the library to fail due to randomness not being maintained.\n        }\n      }\n    })();\n    /* global sjcl */\n    sjcl.codec.base58 = {\n      alpha: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz',\n      lookup: {\n        '1': 0,\n        '2': 1,\n        '3': 2,\n        '4': 3,\n        '5': 4,\n        '6': 5,\n        '7': 6,\n        '8': 7,\n        '9': 8,\n        A: 9,\n        B: 10,\n        C: 11,\n        D: 12,\n        E: 13,\n        F: 14,\n        G: 15,\n        H: 16,\n        J: 17,\n        K: 18,\n        L: 19,\n        M: 20,\n        N: 21,\n        P: 22,\n        Q: 23,\n        R: 24,\n        S: 25,\n        T: 26,\n        U: 27,\n        V: 28,\n        W: 29,\n        X: 30,\n        Y: 31,\n        Z: 32,\n        a: 33,\n        b: 34,\n        c: 35,\n        d: 36,\n        e: 37,\n        f: 38,\n        g: 39,\n        h: 40,\n        i: 41,\n        j: 42,\n        k: 43,\n        m: 44,\n        n: 45,\n        o: 46,\n        p: 47,\n        q: 48,\n        r: 49,\n        s: 50,\n        t: 51,\n        u: 52,\n        v: 53,\n        w: 54,\n        x: 55,\n        y: 56,\n        z: 57\n      },\n      toBits: function (fromDigits) {\n        var work = new sjcl.bn();\n        var fb = new sjcl.bn(58);\n        for (var i = 0; i < fromDigits.length; i++) {\n          var digit = new sjcl.bn(sjcl.codec.base58.lookup[fromDigits[i]]);\n          work.addM(digit.mul(fb.power(fromDigits.length - i - 1)));\n        }\n        work.fullReduce();\n        return work.toBits();\n      },\n      fromBits: function (bits) {\n        var num = sjcl.bn.fromBits(bits);\n        var bitlen = sjcl.bitArray.bitLength(bits);\n        var len = Math.ceil(bitlen * (Math.log(2) / Math.log(58)));\n        var base = new sjcl.bn(58);\n        var str = '';\n        for (var i = len - 1; i >= 0; i--) {\n          var iBig = new sjcl.bn(i);\n          var exp = base.power(iBig);\n          var pos = 0;\n          while (num.greaterEquals(exp)) {\n            num.subM(exp);\n            num.normalize();\n            pos++;\n          }\n          if (!(i === len - 1 && pos === 0)) {\n            str += sjcl.codec.base58.alpha[pos];\n          }\n        }\n        return str;\n      }\n    };\n    /* global sjcl */\n\n    sjcl.codec.base58Check = {\n      defaultChecksumFn: function (bits) {\n        return sjcl.bitArray.bitSlice(sjcl.hash.sha256.hash(sjcl.hash.sha256.hash(bits)), 0, 32);\n      },\n      fromBits: function (version, bits, checksumFn) {\n        checksumFn = checksumFn || sjcl.codec.base58Check.defaultChecksumFn;\n        var bitsWithHeader = sjcl.bitArray.concat([sjcl.bitArray.partial(8, version)], bits);\n        var checksum = checksumFn(bitsWithHeader);\n        var headerPayloadAndChecksum = sjcl.bitArray.concat(bitsWithHeader, checksum);\n        var base58str = sjcl.codec.base58.fromBits(headerPayloadAndChecksum);\n        var leadingZeroBits = 0;\n        while (sjcl.bitArray.extract(headerPayloadAndChecksum, leadingZeroBits, 8) == 0) {\n          base58str = '1' + base58str;\n          leadingZeroBits += 8;\n        }\n        return base58str;\n      },\n      toBits: function (str, checksumFn) {\n        checksumFn = checksumFn || sjcl.codec.base58Check.defaultChecksumFn;\n        var bits = sjcl.codec.base58.toBits(str);\n        var bitlen = sjcl.bitArray.bitLength(bits);\n        //    var headerByte = sjcl.bitArray.extract(bits, 0, 8);\n        var payload = sjcl.bitArray.bitSlice(bits, 0, bitlen - 32);\n        var transmittedChecksum = sjcl.bitArray.bitSlice(bits, bitlen - 32);\n        var computedChecksum = checksumFn(payload);\n        if (!sjcl.bitArray.equal(computedChecksum, transmittedChecksum)) {\n          throw new Error('Checksums do not match');\n        }\n        return payload;\n      }\n    };\n    /* global sjcl */\n    sjcl.codec.steemit = {\n      ROLES: ['owner', 'memo', 'active', 'posting'],\n      MAINNET: {\n        pubHeader: 0x0,\n        privHeader: 0x80,\n        pubPrefix: 'STM'\n      },\n      TESTNET: {\n        pubHeader: 0x0,\n        privHeader: 0x80,\n        pubPrefix: 'TST'\n      },\n      keyChecksum: function (bits) {\n        return sjcl.bitArray.bitSlice(sjcl.hash.ripemd160.hash(bits), 0, 32);\n      },\n      keysFromPassword: function (account, password) {\n        var keyPairs = {};\n        var CURVE = sjcl.ecc.curves.k256;\n        for (var i = 0; i < sjcl.codec.steemit.ROLES.length; i++) {\n          var role = sjcl.codec.steemit.ROLES[i];\n          var seed = account + role + password;\n          var secret = sjcl.bn.fromBits(sjcl.hash.sha256.hash(sjcl.codec.utf8String.toBits(seed)));\n          keyPairs[role] = sjcl.ecc.ecdsa.generateKeys(CURVE, 0, secret);\n        }\n        return keyPairs;\n      },\n      signRecoverably: function (sec, hash, paranoia, fixedKForTesting) {\n        /*\n         * an explanation of the format of the recovery parameter.\n         * given any ECDSA signature (r, s), there are 4 possible public keys that could have\n         * generated the signature over the hash. Two have odd Y-coordinates and two have\n         * even Y-coordinates. the recovery parameter deterministically identifies the public key\n         * that _did_ generate the signature.\n         *\n         * to get the public key given the recovery parameter, do the following:\n         * a. if the recovery parameter is between 27 and 31, subtract 27 and remember that the public\n         * key that produced the signature is canonically an \"uncompressed\" public key (i.e. known by\n         * its X and Y coordinates)\n         * b. If the recovery parameter is between 31 and 34, subtract 31 and remember that the public\n         * key that produced the signature is canonically a \"compressed\" public key (i.e. known by only\n         * its X coordinate).\n         *\n         * note that in the Steem blockchain, all public keys are canonically compressed and therefore the\n         * recovery parameter will always be between 31 and 34. therefore only case \"b\" applies here.\n         *\n         * after the subtraction, you will get a number between 0 and 4. this number, i, encodes the parity\n         * and \"overflow\" of the candidate public key among the four options.\n         *\n         * the lowest bit of i in binary notation indicates the parity of the candidate public key.\n         * if the lowest bit is set, the candidate public key's Y coordinate is odd. If it is cleared, the\n         * Y coordinate is even.\n         *\n         * The next-lowest bit of i, if set, indicates that the candidate public key's x was greater than\n         * the order of k. This is true of approximately 1 in 1^127 points on the secp256k1 curve.\n         * considering the rarity of this condition, it's much much simpler to just brute-force this\n         * condition when it occurs, following §4.1.6.\n         */\n\n        if (sjcl.bitArray.bitLength(hash) > this._curveBitLength) {\n          hash = sjcl.bitArray.clamp(hash, this._curveBitLength);\n        }\n        while (true) {\n          var CURVE = sjcl.ecc.curves.k256,\n            n = CURVE.r,\n            l = n.bitLength(),\n            k = fixedKForTesting || sjcl.bn.random(n.sub(1), paranoia).add(1),\n            R = CURVE.G.mult(k);\n          if (fixedKForTesting) {\n            fixedKForTesting = fixedKForTesting.add(1);\n          }\n          if (R.isIdentity) {\n            continue;\n          }\n          var r = R.x.mod(n),\n            ss = sjcl.bn.fromBits(hash).add(r.mul(sec._exponent)),\n            s = ss.mul(k.inverseMod(n)).mod(n),\n            isOdd = R.y.limbs[0] & 0x1 == 1,\n            recoveryParam = 31;\n          if (isOdd) {\n            recoveryParam++;\n          }\n          var rBitArray = r.toBits(l);\n          var sBitArray = s.toBits(l);\n          var r0 = sjcl.bitArray.extract(rBitArray, 0, 8);\n          var r1 = sjcl.bitArray.extract(rBitArray, 8, 8);\n          var s0 = sjcl.bitArray.extract(sBitArray, 0, 8);\n          var s1 = sjcl.bitArray.extract(sBitArray, 8, 8);\n          if (!(r0 & 0x80) && !(r0 == 0 && !(r1 & 0x80)) && !(s0 & 0x80) && !(s0 == 0 && !(s1 & 0x80))) {\n            var rawSig = sjcl.bitArray.concat(r.toBits(l), s.toBits(l));\n            return sjcl.bitArray.concat([sjcl.bitArray.partial(8, recoveryParam)], rawSig);\n          }\n        }\n      },\n      recoverPublicKey: function (hash, sig) {\n        var CURVE = sjcl.ecc.curves.k256;\n        var n = CURVE.r;\n        var G = CURVE.G;\n        var recoveryParameter = sjcl.bitArray.extract(sig, 0, 8) - 31;\n        var e = sjcl.bn.fromBits(hash);\n        var r = sjcl.bn.fromBits(sjcl.bitArray.bitSlice(sig, 8, 264));\n        var s = sjcl.bn.fromBits(sjcl.bitArray.bitSlice(sig, 264));\n        if (recoveryParameter < 0 || recoveryParameter > 4) {\n          throw new Error('Corrupt signature: recovery parameter is wrong');\n        }\n        var hasOddParity = (recoveryParameter & 0x1) === 1;\n        for (var j = 0; j <= 1; j++) {\n          var x = r.add(n.mul(j));\n          var y = sjcl.codec.steemit._yFromX(x, hasOddParity);\n          var p = new sjcl.ecc.point(CURVE, x, y);\n          var rInv = r.inverseMod(n);\n          var eNeg = new sjcl.bn(0).sub(e).mod(n);\n          var keyPoint = G.mult2(eNeg, s, p).mult(rInv);\n          var key = new sjcl.ecc.ecdsa.publicKey(CURVE, keyPoint);\n          try {\n            key.verify(hash, sjcl.bitArray.bitSlice(sig, 8));\n            return key;\n          } catch (_) {\n            // do nothing, wait for next j\n          }\n        }\n        throw new Error('public key was unrecoverable');\n      },\n      serializePublicKey: function (key, net) {\n        net = net || sjcl.codec.steemit.MAINNET;\n        var point = key.get();\n        var header = net.pubHeader;\n\n        // the public key header sets 0x3 if X is odd, 0x2 if even\n        if (sjcl.bn.fromBits(point.y).limbs[0] & 0x1) {\n          header |= 0x3;\n        } else {\n          header |= 0x2;\n        }\n        return net.pubPrefix + sjcl.codec.base58Check.fromBits(header, point.x, sjcl.codec.steemit.keyChecksum);\n      },\n      deserializePublicKey: function (pubKey, net) {\n        net = net || sjcl.codec.steemit.MAINNET;\n        var CURVE = sjcl.ecc.curves.k256;\n        if (pubKey.indexOf(net.pubPrefix) !== 0) {\n          throw new Error('Public key is not in correct format, it should begin with \"' + net.pubPrefix + '\"');\n        }\n        var payload = sjcl.codec.base58Check.toBits(pubKey.slice(3), sjcl.codec.steemit.keyChecksum);\n        var headerByte = sjcl.bitArray.extract(payload, 0, 8);\n        var isOdd = headerByte == 0x3;\n        if ((headerByte & net.pubHeader) !== net.pubHeader) {\n          throw new Error('public key has invalid header');\n        } else if ((headerByte & 0x3) === 0 && (headerByte & 0x2) === 0) {\n          throw new Error('public key has invalid header: should set 0x2 or 0x3, but got 0x' + headerByte.toString(16));\n        }\n        var xBits = sjcl.bitArray.bitSlice(payload, 8);\n        var x = sjcl.bn.fromBits(xBits);\n        var y = sjcl.codec.steemit._yFromX(x, isOdd);\n        return new sjcl.ecc.ecdsa.publicKey(CURVE, new sjcl.ecc.point(CURVE, x, y));\n      },\n      serializePrivateKey: function (key, net) {\n        net = net || sjcl.codec.steemit.MAINNET;\n        return sjcl.codec.base58Check.fromBits(net.privHeader, key.get());\n      },\n      deserializePrivateKey: function (wif, header) {\n        header = header || sjcl.codec.steemit.MAINNET.privHeader;\n        var curve = sjcl.ecc.curves.k256;\n        var payload = sjcl.codec.base58Check.toBits(wif);\n        var headerByte = sjcl.bitArray.extract(payload, 0, 8);\n        if (headerByte !== header) {\n          throw new Error('private key has invalid header: wanted 0x' + header.toString(16) + ', got 0x' + headerByte.toString(16));\n        }\n        var keyBits = sjcl.bitArray.bitSlice(payload, 8);\n        return new sjcl.ecc.ecdsa.secretKey(curve, sjcl.bn.fromBits(keyBits));\n      },\n      _yFromX: function (x, shouldBeOdd) {\n        var CURVE = sjcl.ecc.curves.k256;\n        var PIDENT = sjcl.codec.steemit._getPident();\n        var alpha = x.powermod(3, CURVE.field.modulus).add(x.mulmod(CURVE.a, CURVE.field.modulus)).add(CURVE.b).mod(CURVE.field.modulus);\n        var y = alpha.powermod(PIDENT, CURVE.field.modulus);\n        var yIsOdd = y.mod(2).equals(1);\n        if (yIsOdd && shouldBeOdd || !yIsOdd && !shouldBeOdd) {\n          return y;\n        } else {\n          return CURVE.field.modulus.sub(y).normalize();\n        }\n      },\n      _getPident: function () {\n        if (!sjcl.codec.steemit.PIDENT) {\n          sjcl.codec.steemit.PIDENT = sjcl.ecc.curves.k256.field.modulus.add(1).normalize().halveM().halveM().normalize();\n        }\n        return sjcl.codec.steemit.PIDENT;\n      }\n    };\n    return sjcl;\n  }();\n  exports.sjcl = sjcl;\n  function PrivateKey(priv, pub) {\n    // we deliberately avoid exposing private key material on the instance.\n    // this is paranoid and probably doesn't protect against a determined\n    // attack, but why make things easy?\n    this.getPublicKey = function () {\n      if (!pub) {\n        pub = sjcl.ecc.ecdsa.generateKeys(sjcl.ecc.curves.k256, undefined, sjcl.bn.fromBits(priv.get())).pub;\n      }\n      return new PublicKey(pub);\n    };\n    this.sign = function (hash) {\n      return fromBits(sjcl.codec.steemit.signRecoverably(priv, toBits(hash)));\n    };\n  }\n  PrivateKey.from = function (wif, header) {\n    return new PrivateKey(sjcl.codec.steemit.deserializePrivateKey(wif, header));\n  };\n  function PublicKey(pub) {\n    this._p = pub;\n  }\n  PublicKey.from = function (str) {\n    return new PublicKey(sjcl.codec.steemit.deserializePublicKey(str));\n  };\n  PublicKey.recover = function (hash, sig) {\n    return new PublicKey(sjcl.codec.steemit.recoverPublicKey(toBits(hash), toBits(sig)));\n  };\n  PublicKey.prototype = {\n    toString: function () {\n      return sjcl.codec.steemit.serializePublicKey(this._p);\n    },\n    verify: function (hash, signature) {\n      try {\n        var rawSig = sjcl.bitArray.bitSlice(toBits(signature), 8);\n        this._p.verify(toBits(hash), rawSig);\n        return true;\n      } catch (_) {\n        return false;\n      }\n    }\n  };\n  function generateKeys() {\n    var k = sjcl.ecc.ecdsa.generateKeys(sjcl.ecc.curves.k256);\n    return serializePair(k);\n  }\n  function keysFromPassword(accountName, accountPassword) {\n    var keys = sjcl.codec.steemit.keysFromPassword(accountName, accountPassword);\n    return {\n      owner: serializePair(keys.owner),\n      memo: serializePair(keys.memo),\n      posting: serializePair(keys.posting),\n      active: serializePair(keys.active)\n    };\n  }\n  function sha256(data) {\n    return fromBits(sjcl.hash.sha256.hash(toBits(data)));\n  }\n  function ripemd160(data) {\n    return fromBits(sjcl.hash.ripemd160.hash(toBits(data)));\n  }\n  function hexify(data) {\n    var result = '';\n    var view = new Uint8Array(data);\n    for (var i = 0; i < view.byteLength; i++) {\n      if (view[i] < 16) {\n        result += '0';\n      }\n      result += view[i].toString(16);\n    }\n    return result;\n  }\n  function serializePair(k) {\n    return {\n      private: sjcl.codec.steemit.serializePrivateKey(k.sec),\n      public: sjcl.codec.steemit.serializePublicKey(k.pub)\n    };\n  }\n  function toBits(a) {\n    if (a instanceof ArrayBuffer) {\n      return sjcl.codec.arrayBuffer.toBits(a);\n    } else {\n      throw new Error('You must supply an ArrayBuffer');\n    }\n  }\n  function fromBits(a) {\n    return sjcl.codec.arrayBuffer.fromBits(a, 0, 0);\n  }\n});","map":{"version":3,"names":["root","factory","exports","nodeName","steemit","crypto","self","PrivateKey","PublicKey","generateKeys","keysFromPassword","sha256","ripemd160","hexify","sjcl","cipher","hash","keyexchange","mode","misc","codec","exception","corrupt","message","toString","invalid","bug","notReady","bitArray","bitSlice","a","bstart","bend","_shiftRight","slice","undefined","clamp","extract","blength","x","sh","Math","floor","concat","a1","a2","length","last","shift","getPartial","bitLength","l","len","ceil","partial","_end","round","equal","b","i","carry","out","last2","shift2","push","pop","_xor4","y","byteswapM","v","m","aes","key","_tables","_precompute","j","tmp","encKey","decKey","sbox","decTable","keyLen","rcon","_key","prototype","encrypt","data","_crypt","decrypt","encTable","sboxInv","xInv","d","th","x2","x4","x8","s","tEnc","tDec","input","dir","c","b2","c2","nInnerRounds","kIndex","table","t0","t1","t2","t3","bn","it","initWith","radix","maxMul","_class","copy","k","limbs","normalize","replace","parseInt","substring","max","equals","that","difference","fullReduce","getLimb","greaterEquals","less","greater","addM","ll","doubleM","r","radixMask","halveM","subM","mod","neg","ci","sub","trim","inverseMod","p","nz","add","mul","al","bl","ai","ii","cnormalize","reduce","square","power","pow","mulmod","N","powermod","montOut","montpowermod","R","wind","bitsize","map","RR","NN","RP","NP","RT","R2","montIn","montMul","ab","right","abBar","mask","h","precomp","cap","getBit","exp","off","indx","pv","placeVal","ipv","toBits","exponent","w","e","min","fromBits","bits","Class","words","t","unshift","pseudoMersennePrime","coeff","ppr","mo","modOffset","offset","factor","minOffset","fullMask","fullOffset","fullFactor","modulus","ol","fac","_strongReduce","inverse","sbp","prime","p127","p25519","p192k","p224k","p256k","p192","p224","p256","p384","p521","random","paranoia","randomWords","ArrayBuffer","globals","DataView","arrayBuffer","arr","padding","padding_count","smallest","setUint32","byteLength","buffer","setUint8","getUint8","inView","getUint32","hexDumpBuffer","stringBufferView","string","pad","n","width","Array","join","getUint16","console","log","toUpperCase","utf8String","String","fromCharCode","decodeURIComponent","escape","str","unescape","encodeURIComponent","charCodeAt","ecc","point","curve","isIdentity","field","toJac","pointJac","mult","toAffine","mult2","k2","affine2","multiples","_multiples","doubl","negate","newY","isValid","z","T","S","sz2","x1","y1","y2","z2","zi","zi2","affine","k1","m1","m2","l1","l2","z4","z6","Field","G","curves","c192","c224","c256","c384","c521","k192","k224","k256","curveName","curcurve","hasOwnProperty","deserialize","types","indexOf","type","secretKey","hex","publicKey","basicKey","_curve","_curveBitLength","_point","serialize","getType","get","pointbits","_exponent","cn","sec","pub","elGamal","apply","arguments","kem","tag","unkem","dh","pk","dhJavaEc","ecdsa","verify","rs","fakeLegacyVersion","ss","hG","hA","r2","sign","fixedKForTesting","_h","_buffer","_length","reset","update","finalize","_h0","nl","splice","_cvt","_block","call","zp","_k1","_k2","_r1","_r2","_s1","_s2","_f0","_f1","_f2","_f3","_f4","_rol","X","A1","B1","C1","D1","E1","A2","B2","C2","D2","E2","blockSize","_init","Uint32Array","subarray","isPrime","frac","h0","h1","h2","h3","h4","h5","h6","h7","prng","defaultParanoia","_pools","_poolEntropy","_reseedCount","_robins","_eventId","_collectorIds","_collectorIdNext","_strength","_poolStrength","_nextReseed","_counter","_cipher","_defaultParanoia","_collectorsStarted","_callbacks","progress","seeded","_callbackI","_NOT_READY","_READY","_REQUIRES_RESEED","_MAX_WORDS_PER_BURST","_PARANOIA_LEVELS","_MILLISECONDS_PER_RESEED","_BITS_PER_RESEED","nwords","readiness","isReady","g","_reseedFromPools","_gate","_gen4words","setDefaultParanoia","allowZeroParanoia","addEntropy","estimatedEntropy","source","id","Date","valueOf","robin","oldReady","err","objName","Object","_fireEvent","getProgress","entropyRequired","startCollectors","_eventListener","loadTimeCollector","_bind","_loadTimeCollector","mouseCollector","_mouseCollector","keyboardCollector","_keyboardCollector","accelerometerCollector","_accelerometerCollector","touchCollector","_touchCollector","window","addEventListener","document","attachEvent","stopCollectors","removeEventListener","detachEvent","name","callback","cb","cbs","jsTemp","func","_reseed","seedWords","full","reseedData","strength","_addCurrentTimeToEntropy","ev","clientX","offsetX","clientY","offsetY","touch","touches","changedTouches","pageX","pageY","performance","now","ac","accelerationIncludingGravity","orientation","or","arg","cbsTemp","getCryptoModule","require","buf","crypt","module","randomBytes","Uint8Array","getRandomValues","msCrypto","base58","alpha","lookup","A","B","C","D","E","F","H","J","K","L","M","P","Q","U","V","W","Y","Z","f","o","q","u","fromDigits","work","fb","digit","num","bitlen","base","iBig","pos","base58Check","defaultChecksumFn","version","checksumFn","bitsWithHeader","checksum","headerPayloadAndChecksum","base58str","leadingZeroBits","payload","transmittedChecksum","computedChecksum","Error","ROLES","MAINNET","pubHeader","privHeader","pubPrefix","TESTNET","keyChecksum","account","password","keyPairs","CURVE","role","seed","secret","signRecoverably","isOdd","recoveryParam","rBitArray","sBitArray","r0","r1","s0","s1","rawSig","recoverPublicKey","sig","recoveryParameter","hasOddParity","_yFromX","rInv","eNeg","keyPoint","_","serializePublicKey","net","header","deserializePublicKey","pubKey","headerByte","xBits","serializePrivateKey","deserializePrivateKey","wif","keyBits","shouldBeOdd","PIDENT","_getPident","yIsOdd","priv","getPublicKey","from","_p","recover","signature","serializePair","accountName","accountPassword","keys","owner","memo","posting","active","result","view","private","public"],"sources":["C:/Users/sunil/kalakaari/node_modules/@steemit/libcrypto/lib/crypto.js"],"sourcesContent":["/* global self */\n(function(root, factory) {\n  if (typeof exports === 'object' && typeof exports.nodeName !== 'string') {\n    // CommonJS\n    factory(exports);\n  } else {\n    // Browser globals\n    root.steemit = root.steemit || {};\n    factory((root.steemit.crypto = {}));\n  }\n})(typeof self !== 'undefined' ? self : this, function(exports) {\n  exports.PrivateKey = PrivateKey;\n  exports.PublicKey = PublicKey;\n  exports.generateKeys = generateKeys;\n  exports.keysFromPassword = keysFromPassword;\n  exports.sha256 = sha256;\n  exports.ripemd160 = ripemd160;\n  exports.hexify = hexify;\n\n  var sjcl = (function() {\n    // SJCL is inserted here automatically by the build process.\n    /** @fileOverview Javascript cryptography implementation.\n *\n * Crush to remove comments, shorten variable names and\n * generally reduce transmission size.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n\"use strict\";\n/*jslint indent: 2, bitwise: false, nomen: false, plusplus: false, white: false, regexp: false */\n/*global document, window, escape, unescape, module, require, Uint32Array */\n\n/**\n * The Stanford Javascript Crypto Library, top-level namespace.\n * @namespace\n */\nvar sjcl = {\n  /**\n   * Symmetric ciphers.\n   * @namespace\n   */\n  cipher: {},\n\n  /**\n   * Hash functions.  Right now only SHA256 is implemented.\n   * @namespace\n   */\n  hash: {},\n\n  /**\n   * Key exchange functions.  Right now only SRP is implemented.\n   * @namespace\n   */\n  keyexchange: {},\n  \n  /**\n   * Cipher modes of operation.\n   * @namespace\n   */\n  mode: {},\n\n  /**\n   * Miscellaneous.  HMAC and PBKDF2.\n   * @namespace\n   */\n  misc: {},\n  \n  /**\n   * Bit array encoders and decoders.\n   * @namespace\n   *\n   * @description\n   * The members of this namespace are functions which translate between\n   * SJCL's bitArrays and other objects (usually strings).  Because it\n   * isn't always clear which direction is encoding and which is decoding,\n   * the method names are \"fromBits\" and \"toBits\".\n   */\n  codec: {},\n  \n  /**\n   * Exceptions.\n   * @namespace\n   */\n  exception: {\n    /**\n     * Ciphertext is corrupt.\n     * @constructor\n     */\n    corrupt: function(message) {\n      this.toString = function() { return \"CORRUPT: \"+this.message; };\n      this.message = message;\n    },\n    \n    /**\n     * Invalid parameter.\n     * @constructor\n     */\n    invalid: function(message) {\n      this.toString = function() { return \"INVALID: \"+this.message; };\n      this.message = message;\n    },\n    \n    /**\n     * Bug or missing feature in SJCL.\n     * @constructor\n     */\n    bug: function(message) {\n      this.toString = function() { return \"BUG: \"+this.message; };\n      this.message = message;\n    },\n\n    /**\n     * Something isn't ready.\n     * @constructor\n     */\n    notReady: function(message) {\n      this.toString = function() { return \"NOT READY: \"+this.message; };\n      this.message = message;\n    }\n  }\n};\n/** @fileOverview Arrays of bits, encoded as arrays of Numbers.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/**\n * Arrays of bits, encoded as arrays of Numbers.\n * @namespace\n * @description\n * <p>\n * These objects are the currency accepted by SJCL's crypto functions.\n * </p>\n *\n * <p>\n * Most of our crypto primitives operate on arrays of 4-byte words internally,\n * but many of them can take arguments that are not a multiple of 4 bytes.\n * This library encodes arrays of bits (whose size need not be a multiple of 8\n * bits) as arrays of 32-bit words.  The bits are packed, big-endian, into an\n * array of words, 32 bits at a time.  Since the words are double-precision\n * floating point numbers, they fit some extra data.  We use this (in a private,\n * possibly-changing manner) to encode the number of bits actually  present\n * in the last word of the array.\n * </p>\n *\n * <p>\n * Because bitwise ops clear this out-of-band data, these arrays can be passed\n * to ciphers like AES which want arrays of words.\n * </p>\n */\nsjcl.bitArray = {\n  /**\n   * Array slices in units of bits.\n   * @param {bitArray} a The array to slice.\n   * @param {Number} bstart The offset to the start of the slice, in bits.\n   * @param {Number} bend The offset to the end of the slice, in bits.  If this is undefined,\n   * slice until the end of the array.\n   * @return {bitArray} The requested slice.\n   */\n  bitSlice: function (a, bstart, bend) {\n    a = sjcl.bitArray._shiftRight(a.slice(bstart/32), 32 - (bstart & 31)).slice(1);\n    return (bend === undefined) ? a : sjcl.bitArray.clamp(a, bend-bstart);\n  },\n\n  /**\n   * Extract a number packed into a bit array.\n   * @param {bitArray} a The array to slice.\n   * @param {Number} bstart The offset to the start of the slice, in bits.\n   * @param {Number} blength The length of the number to extract.\n   * @return {Number} The requested slice.\n   */\n  extract: function(a, bstart, blength) {\n    // FIXME: this Math.floor is not necessary at all, but for some reason\n    // seems to suppress a bug in the Chromium JIT.\n    var x, sh = Math.floor((-bstart-blength) & 31);\n    if ((bstart + blength - 1 ^ bstart) & -32) {\n      // it crosses a boundary\n      x = (a[bstart/32|0] << (32 - sh)) ^ (a[bstart/32+1|0] >>> sh);\n    } else {\n      // within a single word\n      x = a[bstart/32|0] >>> sh;\n    }\n    return x & ((1<<blength) - 1);\n  },\n\n  /**\n   * Concatenate two bit arrays.\n   * @param {bitArray} a1 The first array.\n   * @param {bitArray} a2 The second array.\n   * @return {bitArray} The concatenation of a1 and a2.\n   */\n  concat: function (a1, a2) {\n    if (a1.length === 0 || a2.length === 0) {\n      return a1.concat(a2);\n    }\n    \n    var last = a1[a1.length-1], shift = sjcl.bitArray.getPartial(last);\n    if (shift === 32) {\n      return a1.concat(a2);\n    } else {\n      return sjcl.bitArray._shiftRight(a2, shift, last|0, a1.slice(0,a1.length-1));\n    }\n  },\n\n  /**\n   * Find the length of an array of bits.\n   * @param {bitArray} a The array.\n   * @return {Number} The length of a, in bits.\n   */\n  bitLength: function (a) {\n    var l = a.length, x;\n    if (l === 0) { return 0; }\n    x = a[l - 1];\n    return (l-1) * 32 + sjcl.bitArray.getPartial(x);\n  },\n\n  /**\n   * Truncate an array.\n   * @param {bitArray} a The array.\n   * @param {Number} len The length to truncate to, in bits.\n   * @return {bitArray} A new array, truncated to len bits.\n   */\n  clamp: function (a, len) {\n    if (a.length * 32 < len) { return a; }\n    a = a.slice(0, Math.ceil(len / 32));\n    var l = a.length;\n    len = len & 31;\n    if (l > 0 && len) {\n      a[l-1] = sjcl.bitArray.partial(len, a[l-1] & 0x80000000 >> (len-1), 1);\n    }\n    return a;\n  },\n\n  /**\n   * Make a partial word for a bit array.\n   * @param {Number} len The number of bits in the word.\n   * @param {Number} x The bits.\n   * @param {Number} [_end=0] Pass 1 if x has already been shifted to the high side.\n   * @return {Number} The partial word.\n   */\n  partial: function (len, x, _end) {\n    if (len === 32) { return x; }\n    return (_end ? x|0 : x << (32-len)) + len * 0x10000000000;\n  },\n\n  /**\n   * Get the number of bits used by a partial word.\n   * @param {Number} x The partial word.\n   * @return {Number} The number of bits used by the partial word.\n   */\n  getPartial: function (x) {\n    return Math.round(x/0x10000000000) || 32;\n  },\n\n  /**\n   * Compare two arrays for equality in a predictable amount of time.\n   * @param {bitArray} a The first array.\n   * @param {bitArray} b The second array.\n   * @return {boolean} true if a == b; false otherwise.\n   */\n  equal: function (a, b) {\n    if (sjcl.bitArray.bitLength(a) !== sjcl.bitArray.bitLength(b)) {\n      return false;\n    }\n    var x = 0, i;\n    for (i=0; i<a.length; i++) {\n      x |= a[i]^b[i];\n    }\n    return (x === 0);\n  },\n\n  /** Shift an array right.\n   * @param {bitArray} a The array to shift.\n   * @param {Number} shift The number of bits to shift.\n   * @param {Number} [carry=0] A byte to carry in\n   * @param {bitArray} [out=[]] An array to prepend to the output.\n   * @private\n   */\n  _shiftRight: function (a, shift, carry, out) {\n    var i, last2=0, shift2;\n    if (out === undefined) { out = []; }\n    \n    for (; shift >= 32; shift -= 32) {\n      out.push(carry);\n      carry = 0;\n    }\n    if (shift === 0) {\n      return out.concat(a);\n    }\n    \n    for (i=0; i<a.length; i++) {\n      out.push(carry | a[i]>>>shift);\n      carry = a[i] << (32-shift);\n    }\n    last2 = a.length ? a[a.length-1] : 0;\n    shift2 = sjcl.bitArray.getPartial(last2);\n    out.push(sjcl.bitArray.partial(shift+shift2 & 31, (shift + shift2 > 32) ? carry : out.pop(),1));\n    return out;\n  },\n  \n  /** xor a block of 4 words together.\n   * @private\n   */\n  _xor4: function(x,y) {\n    return [x[0]^y[0],x[1]^y[1],x[2]^y[2],x[3]^y[3]];\n  },\n\n  /** byteswap a word array inplace.\n   * (does not handle partial words)\n   * @param {sjcl.bitArray} a word array\n   * @return {sjcl.bitArray} byteswapped array\n   */\n  byteswapM: function(a) {\n    var i, v, m = 0xff00;\n    for (i = 0; i < a.length; ++i) {\n      v = a[i];\n      a[i] = (v >>> 24) | ((v >>> 8) & m) | ((v & m) << 8) | (v << 24);\n    }\n    return a;\n  }\n};\n/** @fileOverview Low-level AES implementation.\n *\n * This file contains a low-level implementation of AES, optimized for\n * size and for efficiency on several browsers.  It is based on\n * OpenSSL's aes_core.c, a public-domain implementation by Vincent\n * Rijmen, Antoon Bosselaers and Paulo Barreto.\n *\n * An older version of this implementation is available in the public\n * domain, but this one is (c) Emily Stark, Mike Hamburg, Dan Boneh,\n * Stanford University 2008-2010 and BSD-licensed for liability\n * reasons.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/**\n * Schedule out an AES key for both encryption and decryption.  This\n * is a low-level class.  Use a cipher mode to do bulk encryption.\n *\n * @constructor\n * @param {Array} key The key as an array of 4, 6 or 8 words.\n */\nsjcl.cipher.aes = function (key) {\n  if (!this._tables[0][0][0]) {\n    this._precompute();\n  }\n  \n  var i, j, tmp,\n    encKey, decKey,\n    sbox = this._tables[0][4], decTable = this._tables[1],\n    keyLen = key.length, rcon = 1;\n  \n  if (keyLen !== 4 && keyLen !== 6 && keyLen !== 8) {\n    throw new sjcl.exception.invalid(\"invalid aes key size\");\n  }\n  \n  this._key = [encKey = key.slice(0), decKey = []];\n  \n  // schedule encryption keys\n  for (i = keyLen; i < 4 * keyLen + 28; i++) {\n    tmp = encKey[i-1];\n    \n    // apply sbox\n    if (i%keyLen === 0 || (keyLen === 8 && i%keyLen === 4)) {\n      tmp = sbox[tmp>>>24]<<24 ^ sbox[tmp>>16&255]<<16 ^ sbox[tmp>>8&255]<<8 ^ sbox[tmp&255];\n      \n      // shift rows and add rcon\n      if (i%keyLen === 0) {\n        tmp = tmp<<8 ^ tmp>>>24 ^ rcon<<24;\n        rcon = rcon<<1 ^ (rcon>>7)*283;\n      }\n    }\n    \n    encKey[i] = encKey[i-keyLen] ^ tmp;\n  }\n  \n  // schedule decryption keys\n  for (j = 0; i; j++, i--) {\n    tmp = encKey[j&3 ? i : i - 4];\n    if (i<=4 || j<4) {\n      decKey[j] = tmp;\n    } else {\n      decKey[j] = decTable[0][sbox[tmp>>>24      ]] ^\n                  decTable[1][sbox[tmp>>16  & 255]] ^\n                  decTable[2][sbox[tmp>>8   & 255]] ^\n                  decTable[3][sbox[tmp      & 255]];\n    }\n  }\n};\n\nsjcl.cipher.aes.prototype = {\n  // public\n  /* Something like this might appear here eventually\n  name: \"AES\",\n  blockSize: 4,\n  keySizes: [4,6,8],\n  */\n  \n  /**\n   * Encrypt an array of 4 big-endian words.\n   * @param {Array} data The plaintext.\n   * @return {Array} The ciphertext.\n   */\n  encrypt:function (data) { return this._crypt(data,0); },\n  \n  /**\n   * Decrypt an array of 4 big-endian words.\n   * @param {Array} data The ciphertext.\n   * @return {Array} The plaintext.\n   */\n  decrypt:function (data) { return this._crypt(data,1); },\n  \n  /**\n   * The expanded S-box and inverse S-box tables.  These will be computed\n   * on the client so that we don't have to send them down the wire.\n   *\n   * There are two tables, _tables[0] is for encryption and\n   * _tables[1] is for decryption.\n   *\n   * The first 4 sub-tables are the expanded S-box with MixColumns.  The\n   * last (_tables[01][4]) is the S-box itself.\n   *\n   * @private\n   */\n  _tables: [[[],[],[],[],[]],[[],[],[],[],[]]],\n\n  /**\n   * Expand the S-box tables.\n   *\n   * @private\n   */\n  _precompute: function () {\n   var encTable = this._tables[0], decTable = this._tables[1],\n       sbox = encTable[4], sboxInv = decTable[4],\n       i, x, xInv, d=[], th=[], x2, x4, x8, s, tEnc, tDec;\n\n    // Compute double and third tables\n   for (i = 0; i < 256; i++) {\n     th[( d[i] = i<<1 ^ (i>>7)*283 )^i]=i;\n   }\n   \n   for (x = xInv = 0; !sbox[x]; x ^= x2 || 1, xInv = th[xInv] || 1) {\n     // Compute sbox\n     s = xInv ^ xInv<<1 ^ xInv<<2 ^ xInv<<3 ^ xInv<<4;\n     s = s>>8 ^ s&255 ^ 99;\n     sbox[x] = s;\n     sboxInv[s] = x;\n     \n     // Compute MixColumns\n     x8 = d[x4 = d[x2 = d[x]]];\n     tDec = x8*0x1010101 ^ x4*0x10001 ^ x2*0x101 ^ x*0x1010100;\n     tEnc = d[s]*0x101 ^ s*0x1010100;\n     \n     for (i = 0; i < 4; i++) {\n       encTable[i][x] = tEnc = tEnc<<24 ^ tEnc>>>8;\n       decTable[i][s] = tDec = tDec<<24 ^ tDec>>>8;\n     }\n   }\n   \n   // Compactify.  Considerable speedup on Firefox.\n   for (i = 0; i < 5; i++) {\n     encTable[i] = encTable[i].slice(0);\n     decTable[i] = decTable[i].slice(0);\n   }\n  },\n  \n  /**\n   * Encryption and decryption core.\n   * @param {Array} input Four words to be encrypted or decrypted.\n   * @param dir The direction, 0 for encrypt and 1 for decrypt.\n   * @return {Array} The four encrypted or decrypted words.\n   * @private\n   */\n  _crypt:function (input, dir) {\n    if (input.length !== 4) {\n      throw new sjcl.exception.invalid(\"invalid aes block size\");\n    }\n    \n    var key = this._key[dir],\n        // state variables a,b,c,d are loaded with pre-whitened data\n        a = input[0]           ^ key[0],\n        b = input[dir ? 3 : 1] ^ key[1],\n        c = input[2]           ^ key[2],\n        d = input[dir ? 1 : 3] ^ key[3],\n        a2, b2, c2,\n        \n        nInnerRounds = key.length/4 - 2,\n        i,\n        kIndex = 4,\n        out = [0,0,0,0],\n        table = this._tables[dir],\n        \n        // load up the tables\n        t0    = table[0],\n        t1    = table[1],\n        t2    = table[2],\n        t3    = table[3],\n        sbox  = table[4];\n \n    // Inner rounds.  Cribbed from OpenSSL.\n    for (i = 0; i < nInnerRounds; i++) {\n      a2 = t0[a>>>24] ^ t1[b>>16 & 255] ^ t2[c>>8 & 255] ^ t3[d & 255] ^ key[kIndex];\n      b2 = t0[b>>>24] ^ t1[c>>16 & 255] ^ t2[d>>8 & 255] ^ t3[a & 255] ^ key[kIndex + 1];\n      c2 = t0[c>>>24] ^ t1[d>>16 & 255] ^ t2[a>>8 & 255] ^ t3[b & 255] ^ key[kIndex + 2];\n      d  = t0[d>>>24] ^ t1[a>>16 & 255] ^ t2[b>>8 & 255] ^ t3[c & 255] ^ key[kIndex + 3];\n      kIndex += 4;\n      a=a2; b=b2; c=c2;\n    }\n        \n    // Last round.\n    for (i = 0; i < 4; i++) {\n      out[dir ? 3&-i : i] =\n        sbox[a>>>24      ]<<24 ^ \n        sbox[b>>16  & 255]<<16 ^\n        sbox[c>>8   & 255]<<8  ^\n        sbox[d      & 255]     ^\n        key[kIndex++];\n      a2=a; a=b; b=c; c=d; d=a2;\n    }\n    \n    return out;\n  }\n};\n\n/**\n * Constructs a new bignum from another bignum, a number or a hex string.\n * @constructor\n */\nsjcl.bn = function(it) {\n  this.initWith(it);\n};\n\nsjcl.bn.prototype = {\n  radix: 24,\n  maxMul: 8,\n  _class: sjcl.bn,\n\n  copy: function() {\n    return new this._class(this);\n  },\n\n  /**\n   * Initializes this with it, either as a bn, a number, or a hex string.\n   */\n  initWith: function(it) {\n    var i=0, k;\n    switch(typeof it) {\n    case \"object\":\n      this.limbs = it.limbs.slice(0);\n      break;\n\n    case \"number\":\n      this.limbs = [it];\n      this.normalize();\n      break;\n\n    case \"string\":\n      it = it.replace(/^0x/, '');\n      this.limbs = [];\n      // hack\n      k = this.radix / 4;\n      for (i=0; i < it.length; i+=k) {\n        this.limbs.push(parseInt(it.substring(Math.max(it.length - i - k, 0), it.length - i),16));\n      }\n      break;\n\n    default:\n      this.limbs = [0];\n    }\n    return this;\n  },\n\n  /**\n   * Returns true if \"this\" and \"that\" are equal.  Calls fullReduce().\n   * Equality test is in constant time.\n   */\n  equals: function(that) {\n    if (typeof that === \"number\") { that = new this._class(that); }\n    var difference = 0, i;\n    this.fullReduce();\n    that.fullReduce();\n    for (i = 0; i < this.limbs.length || i < that.limbs.length; i++) {\n      difference |= this.getLimb(i) ^ that.getLimb(i);\n    }\n    return (difference === 0);\n  },\n\n  /**\n   * Get the i'th limb of this, zero if i is too large.\n   */\n  getLimb: function(i) {\n    return (i >= this.limbs.length) ? 0 : this.limbs[i];\n  },\n\n  /**\n   * Constant time comparison function.\n   * Returns 1 if this >= that, or zero otherwise.\n   */\n  greaterEquals: function(that) {\n    if (typeof that === \"number\") { that = new this._class(that); }\n    var less = 0, greater = 0, i, a, b;\n    i = Math.max(this.limbs.length, that.limbs.length) - 1;\n    for (; i>= 0; i--) {\n      a = this.getLimb(i);\n      b = that.getLimb(i);\n      greater |= (b - a) & ~less;\n      less |= (a - b) & ~greater;\n    }\n    return (greater | ~less) >>> 31;\n  },\n\n  /**\n   * Convert to a hex string.\n   */\n  toString: function() {\n    this.fullReduce();\n    var out=\"\", i, s, l = this.limbs;\n    for (i=0; i < this.limbs.length; i++) {\n      s = l[i].toString(16);\n      while (i < this.limbs.length - 1 && s.length < 6) {\n        s = \"0\" + s;\n      }\n      out = s + out;\n    }\n    return \"0x\"+out;\n  },\n\n  /** this += that.  Does not normalize. */\n  addM: function(that) {\n    if (typeof(that) !== \"object\") { that = new this._class(that); }\n    var i, l=this.limbs, ll=that.limbs;\n    for (i=l.length; i<ll.length; i++) {\n      l[i] = 0;\n    }\n    for (i=0; i<ll.length; i++) {\n      l[i] += ll[i];\n    }\n    return this;\n  },\n\n  /** this *= 2.  Requires normalized; ends up normalized. */\n  doubleM: function() {\n    var i, carry=0, tmp, r=this.radix, m=this.radixMask, l=this.limbs;\n    for (i=0; i<l.length; i++) {\n      tmp = l[i];\n      tmp = tmp+tmp+carry;\n      l[i] = tmp & m;\n      carry = tmp >> r;\n    }\n    if (carry) {\n      l.push(carry);\n    }\n    return this;\n  },\n\n  /** this /= 2, rounded down.  Requires normalized; ends up normalized. */\n  halveM: function() {\n    var i, carry=0, tmp, r=this.radix, l=this.limbs;\n    for (i=l.length-1; i>=0; i--) {\n      tmp = l[i];\n      l[i] = (tmp+carry)>>1;\n      carry = (tmp&1) << r;\n    }\n    if (!l[l.length-1]) {\n      l.pop();\n    }\n    return this;\n  },\n\n  /** this -= that.  Does not normalize. */\n  subM: function(that) {\n    if (typeof(that) !== \"object\") { that = new this._class(that); }\n    var i, l=this.limbs, ll=that.limbs;\n    for (i=l.length; i<ll.length; i++) {\n      l[i] = 0;\n    }\n    for (i=0; i<ll.length; i++) {\n      l[i] -= ll[i];\n    }\n    return this;\n  },\n\n  mod: function(that) {\n    var neg = !this.greaterEquals(new sjcl.bn(0));\n\n    that = new sjcl.bn(that).normalize(); // copy before we begin\n    var out = new sjcl.bn(this).normalize(), ci=0;\n\n    if (neg) out = (new sjcl.bn(0)).subM(out).normalize();\n\n    for (; out.greaterEquals(that); ci++) {\n      that.doubleM();\n    }\n\n    if (neg) out = that.sub(out).normalize();\n\n    for (; ci > 0; ci--) {\n      that.halveM();\n      if (out.greaterEquals(that)) {\n        out.subM(that).normalize();\n      }\n    }\n    return out.trim();\n  },\n\n  /** return inverse mod prime p.  p must be odd. Binary extended Euclidean algorithm mod p. */\n  inverseMod: function(p) {\n    var a = new sjcl.bn(1), b = new sjcl.bn(0), x = new sjcl.bn(this), y = new sjcl.bn(p), tmp, i, nz=1;\n\n    if (!(p.limbs[0] & 1)) {\n      throw (new sjcl.exception.invalid(\"inverseMod: p must be odd\"));\n    }\n\n    // invariant: y is odd\n    do {\n      if (x.limbs[0] & 1) {\n        if (!x.greaterEquals(y)) {\n          // x < y; swap everything\n          tmp = x; x = y; y = tmp;\n          tmp = a; a = b; b = tmp;\n        }\n        x.subM(y);\n        x.normalize();\n\n        if (!a.greaterEquals(b)) {\n          a.addM(p);\n        }\n        a.subM(b);\n      }\n\n      // cut everything in half\n      x.halveM();\n      if (a.limbs[0] & 1) {\n        a.addM(p);\n      }\n      a.normalize();\n      a.halveM();\n\n      // check for termination: x ?= 0\n      for (i=nz=0; i<x.limbs.length; i++) {\n        nz |= x.limbs[i];\n      }\n    } while(nz);\n\n    if (!y.equals(1)) {\n      throw (new sjcl.exception.invalid(\"inverseMod: p and x must be relatively prime\"));\n    }\n\n    return b;\n  },\n\n  /** this + that.  Does not normalize. */\n  add: function(that) {\n    return this.copy().addM(that);\n  },\n\n  /** this - that.  Does not normalize. */\n  sub: function(that) {\n    return this.copy().subM(that);\n  },\n\n  /** this * that.  Normalizes and reduces. */\n  mul: function(that) {\n    if (typeof(that) === \"number\") { that = new this._class(that); }\n    var i, j, a = this.limbs, b = that.limbs, al = a.length, bl = b.length, out = new this._class(), c = out.limbs, ai, ii=this.maxMul;\n\n    for (i=0; i < this.limbs.length + that.limbs.length + 1; i++) {\n      c[i] = 0;\n    }\n    for (i=0; i<al; i++) {\n      ai = a[i];\n      for (j=0; j<bl; j++) {\n        c[i+j] += ai * b[j];\n      }\n\n      if (!--ii) {\n        ii = this.maxMul;\n        out.cnormalize();\n      }\n    }\n    return out.cnormalize().reduce();\n  },\n\n  /** this ^ 2.  Normalizes and reduces. */\n  square: function() {\n    return this.mul(this);\n  },\n\n  /** this ^ n.  Uses square-and-multiply.  Normalizes and reduces. */\n  power: function(l) {\n    l = new sjcl.bn(l).normalize().trim().limbs;\n    var i, j, out = new this._class(1), pow = this;\n\n    for (i=0; i<l.length; i++) {\n      for (j=0; j<this.radix; j++) {\n        if (l[i] & (1<<j)) { out = out.mul(pow); }\n        if (i == (l.length - 1) && l[i]>>(j + 1) == 0) { break; }\n\n        pow = pow.square();\n      }\n    }\n\n    return out;\n  },\n\n  /** this * that mod N */\n  mulmod: function(that, N) {\n    return this.mod(N).mul(that.mod(N)).mod(N);\n  },\n\n  /** this ^ x mod N */\n  powermod: function(x, N) {\n    x = new sjcl.bn(x);\n    N = new sjcl.bn(N);\n\n    // Jump to montpowermod if possible.\n    if ((N.limbs[0] & 1) == 1) {\n      var montOut = this.montpowermod(x, N);\n\n      if (montOut != false) { return montOut; } // else go to slow powermod\n    }\n\n    var i, j, l = x.normalize().trim().limbs, out = new this._class(1), pow = this;\n\n    for (i=0; i<l.length; i++) {\n      for (j=0; j<this.radix; j++) {\n        if (l[i] & (1<<j)) { out = out.mulmod(pow, N); }\n        if (i == (l.length - 1) && l[i]>>(j + 1) == 0) { break; }\n\n        pow = pow.mulmod(pow, N);\n      }\n    }\n\n    return out;\n  },\n\n  /** this ^ x mod N with Montomery reduction */\n  montpowermod: function(x, N) {\n    x = new sjcl.bn(x).normalize().trim();\n    N = new sjcl.bn(N);\n\n    var i, j,\n      radix = this.radix,\n      out = new this._class(1),\n      pow = this.copy();\n\n    // Generate R as a cap of N.\n    var R, s, wind, bitsize = x.bitLength();\n\n    R = new sjcl.bn({\n      limbs: N.copy().normalize().trim().limbs.map(function() { return 0; })\n    });\n\n    for (s = this.radix; s > 0; s--) {\n      if (((N.limbs[N.limbs.length - 1] >> s) & 1) == 1) {\n        R.limbs[R.limbs.length - 1] = 1 << s;\n        break;\n      }\n    }\n\n    // Calculate window size as a function of the exponent's size.\n    if (bitsize == 0) {\n      return this;\n    } else if (bitsize < 18)  {\n      wind = 1;\n    } else if (bitsize < 48)  {\n      wind = 3;\n    } else if (bitsize < 144) {\n      wind = 4;\n    } else if (bitsize < 768) {\n      wind = 5;\n    } else {\n      wind = 6;\n    }\n\n    // Find R' and N' such that R * R' - N * N' = 1.\n    var RR = R.copy(), NN = N.copy(), RP = new sjcl.bn(1), NP = new sjcl.bn(0), RT = R.copy();\n\n    while (RT.greaterEquals(1)) {\n      RT.halveM();\n\n      if ((RP.limbs[0] & 1) == 0) {\n        RP.halveM();\n        NP.halveM();\n      } else {\n        RP.addM(NN);\n        RP.halveM();\n\n        NP.halveM();\n        NP.addM(RR);\n      }\n    }\n\n    RP = RP.normalize();\n    NP = NP.normalize();\n\n    RR.doubleM();\n    var R2 = RR.mulmod(RR, N);\n\n    // Check whether the invariant holds.\n    // If it doesn't, we can't use Montgomery reduction on this modulus.\n    if (!RR.mul(RP).sub(N.mul(NP)).equals(1)) {\n      return false;\n    }\n\n    var montIn = function(c) { return montMul(c, R2); },\n    montMul = function(a, b) {\n      // Standard Montgomery reduction\n      var k, carry, ab, right, abBar, mask = (1 << (s + 1)) - 1;\n\n      ab = a.mul(b);\n\n      right = ab.mul(NP);\n      right.limbs = right.limbs.slice(0, R.limbs.length);\n\n      if (right.limbs.length == R.limbs.length) {\n        right.limbs[R.limbs.length - 1] &= mask;\n      }\n\n      right = right.mul(N);\n\n      abBar = ab.add(right).normalize().trim();\n      abBar.limbs = abBar.limbs.slice(R.limbs.length - 1);\n\n      // Division.  Equivelent to calling *.halveM() s times.\n      for (k=0; k < abBar.limbs.length; k++) {\n        if (k > 0) {\n          abBar.limbs[k - 1] |= (abBar.limbs[k] & mask) << (radix - s - 1);\n        }\n\n        abBar.limbs[k] = abBar.limbs[k] >> (s + 1);\n      }\n\n      if (abBar.greaterEquals(N)) {\n        abBar.subM(N);\n      }\n\n      return abBar;\n    },\n    montOut = function(c) { return montMul(c, 1); };\n\n    pow = montIn(pow);\n    out = montIn(out);\n\n    // Sliding-Window Exponentiation (HAC 14.85)\n    var h, precomp = {}, cap = (1 << (wind - 1)) - 1;\n\n    precomp[1] = pow.copy();\n    precomp[2] = montMul(pow, pow);\n\n    for (h=1; h<=cap; h++) {\n      precomp[(2 * h) + 1] = montMul(precomp[(2 * h) - 1], precomp[2]);\n    }\n\n    var getBit = function(exp, i) { // Gets ith bit of exp.\n      var off = i % exp.radix;\n\n      return (exp.limbs[Math.floor(i / exp.radix)] & (1 << off)) >> off;\n    };\n\n    for (i = x.bitLength() - 1; i >= 0; ) {\n      if (getBit(x, i) == 0) {\n        // If the next bit is zero:\n        //   Square, move forward one bit.\n        out = montMul(out, out);\n        i = i - 1;\n      } else {\n        // If the next bit is one:\n        //   Find the longest sequence of bits after this one, less than `wind`\n        //   bits long, that ends with a 1.  Convert the sequence into an\n        //   integer and look up the pre-computed value to add.\n        var l = i - wind + 1;\n\n        while (getBit(x, l) == 0) {\n          l++;\n        }\n\n        var indx = 0;\n        for (j = l; j <= i; j++) {\n          indx += getBit(x, j) << (j - l);\n          out = montMul(out, out);\n        }\n\n        out = montMul(out, precomp[indx]);\n\n        i = l - 1;\n      }\n    }\n\n    return montOut(out);\n  },\n\n  trim: function() {\n    var l = this.limbs, p;\n    do {\n      p = l.pop();\n    } while (l.length && p === 0);\n    l.push(p);\n    return this;\n  },\n\n  /** Reduce mod a modulus.  Stubbed for subclassing. */\n  reduce: function() {\n    return this;\n  },\n\n  /** Reduce and normalize. */\n  fullReduce: function() {\n    return this.normalize();\n  },\n\n  /** Propagate carries. */\n  normalize: function() {\n    var carry=0, i, pv = this.placeVal, ipv = this.ipv, l, m, limbs = this.limbs, ll = limbs.length, mask = this.radixMask;\n    for (i=0; i < ll || (carry !== 0 && carry !== -1); i++) {\n      l = (limbs[i]||0) + carry;\n      m = limbs[i] = l & mask;\n      carry = (l-m)*ipv;\n    }\n    if (carry === -1) {\n      limbs[i-1] -= pv;\n    }\n    this.trim();\n    return this;\n  },\n\n  /** Constant-time normalize. Does not allocate additional space. */\n  cnormalize: function() {\n    var carry=0, i, ipv = this.ipv, l, m, limbs = this.limbs, ll = limbs.length, mask = this.radixMask;\n    for (i=0; i < ll-1; i++) {\n      l = limbs[i] + carry;\n      m = limbs[i] = l & mask;\n      carry = (l-m)*ipv;\n    }\n    limbs[i] += carry;\n    return this;\n  },\n\n  /** Serialize to a bit array */\n  toBits: function(len) {\n    this.fullReduce();\n    len = len || this.exponent || this.bitLength();\n    var i = Math.floor((len-1)/24), w=sjcl.bitArray, e = (len + 7 & -8) % this.radix || this.radix,\n        out = [w.partial(e, this.getLimb(i))];\n    for (i--; i >= 0; i--) {\n      out = w.concat(out, [w.partial(Math.min(this.radix,len), this.getLimb(i))]);\n      len -= this.radix;\n    }\n    return out;\n  },\n\n  /** Return the length in bits, rounded up to the nearest byte. */\n  bitLength: function() {\n    this.fullReduce();\n    var out = this.radix * (this.limbs.length - 1),\n        b = this.limbs[this.limbs.length - 1];\n    for (; b; b >>>= 1) {\n      out ++;\n    }\n    return out+7 & -8;\n  }\n};\n\n/** @memberOf sjcl.bn\n* @this { sjcl.bn }\n*/\nsjcl.bn.fromBits = function(bits) {\n  var Class = this, out = new Class(), words=[], w=sjcl.bitArray, t = this.prototype,\n      l = Math.min(this.bitLength || 0x100000000, w.bitLength(bits)), e = l % t.radix || t.radix;\n\n  words[0] = w.extract(bits, 0, e);\n  for (; e < l; e += t.radix) {\n    words.unshift(w.extract(bits, e, t.radix));\n  }\n\n  out.limbs = words;\n  return out;\n};\n\n\n\nsjcl.bn.prototype.ipv = 1 / (sjcl.bn.prototype.placeVal = Math.pow(2,sjcl.bn.prototype.radix));\nsjcl.bn.prototype.radixMask = (1 << sjcl.bn.prototype.radix) - 1;\n\n/**\n * Creates a new subclass of bn, based on reduction modulo a pseudo-Mersenne prime,\n * i.e. a prime of the form 2^e + sum(a * 2^b),where the sum is negative and sparse.\n */\nsjcl.bn.pseudoMersennePrime = function(exponent, coeff) {\n  /** @constructor\n  * @private\n  */\n  function p(it) {\n    this.initWith(it);\n    /*if (this.limbs[this.modOffset]) {\n      this.reduce();\n    }*/\n  }\n\n  var ppr = p.prototype = new sjcl.bn(), i, tmp, mo;\n  mo = ppr.modOffset = Math.ceil(tmp = exponent / ppr.radix);\n  ppr.exponent = exponent;\n  ppr.offset = [];\n  ppr.factor = [];\n  ppr.minOffset = mo;\n  ppr.fullMask = 0;\n  ppr.fullOffset = [];\n  ppr.fullFactor = [];\n  ppr.modulus = p.modulus = new sjcl.bn(Math.pow(2,exponent));\n\n  ppr.fullMask = 0|-Math.pow(2, exponent % ppr.radix);\n\n  for (i=0; i<coeff.length; i++) {\n    ppr.offset[i] = Math.floor(coeff[i][0] / ppr.radix - tmp);\n    ppr.fullOffset[i] = Math.ceil(coeff[i][0] / ppr.radix - tmp);\n    ppr.factor[i] = coeff[i][1] * Math.pow(1/2, exponent - coeff[i][0] + ppr.offset[i] * ppr.radix);\n    ppr.fullFactor[i] = coeff[i][1] * Math.pow(1/2, exponent - coeff[i][0] + ppr.fullOffset[i] * ppr.radix);\n    ppr.modulus.addM(new sjcl.bn(Math.pow(2,coeff[i][0])*coeff[i][1]));\n    ppr.minOffset = Math.min(ppr.minOffset, -ppr.offset[i]); // conservative\n  }\n  ppr._class = p;\n  ppr.modulus.cnormalize();\n\n  /** Approximate reduction mod p.  May leave a number which is negative or slightly larger than p.\n   * @memberof sjcl.bn\n   * @this { sjcl.bn }\n   */\n  ppr.reduce = function() {\n    var i, k, l, mo = this.modOffset, limbs = this.limbs, off = this.offset, ol = this.offset.length, fac = this.factor, ll;\n\n    i = this.minOffset;\n    while (limbs.length > mo) {\n      l = limbs.pop();\n      ll = limbs.length;\n      for (k=0; k<ol; k++) {\n        limbs[ll+off[k]] -= fac[k] * l;\n      }\n\n      i--;\n      if (!i) {\n        limbs.push(0);\n        this.cnormalize();\n        i = this.minOffset;\n      }\n    }\n    this.cnormalize();\n\n    return this;\n  };\n\n  /** @memberof sjcl.bn\n  * @this { sjcl.bn }\n  */\n  ppr._strongReduce = (ppr.fullMask === -1) ? ppr.reduce : function() {\n    var limbs = this.limbs, i = limbs.length - 1, k, l;\n    this.reduce();\n    if (i === this.modOffset - 1) {\n      l = limbs[i] & this.fullMask;\n      limbs[i] -= l;\n      for (k=0; k<this.fullOffset.length; k++) {\n        limbs[i+this.fullOffset[k]] -= this.fullFactor[k] * l;\n      }\n      this.normalize();\n    }\n  };\n\n  /** mostly constant-time, very expensive full reduction.\n   * @memberof sjcl.bn\n   * @this { sjcl.bn }\n   */\n  ppr.fullReduce = function() {\n    var greater, i;\n    // massively above the modulus, may be negative\n\n    this._strongReduce();\n    // less than twice the modulus, may be negative\n\n    this.addM(this.modulus);\n    this.addM(this.modulus);\n    this.normalize();\n    // probably 2-3x the modulus\n\n    this._strongReduce();\n    // less than the power of 2.  still may be more than\n    // the modulus\n\n    // HACK: pad out to this length\n    for (i=this.limbs.length; i<this.modOffset; i++) {\n      this.limbs[i] = 0;\n    }\n\n    // constant-time subtract modulus\n    greater = this.greaterEquals(this.modulus);\n    for (i=0; i<this.limbs.length; i++) {\n      this.limbs[i] -= this.modulus.limbs[i] * greater;\n    }\n    this.cnormalize();\n\n    return this;\n  };\n\n\n  /** @memberof sjcl.bn\n  * @this { sjcl.bn }\n  */\n  ppr.inverse = function() {\n    return (this.power(this.modulus.sub(2)));\n  };\n\n  p.fromBits = sjcl.bn.fromBits;\n\n  return p;\n};\n\n// a small Mersenne prime\nvar sbp = sjcl.bn.pseudoMersennePrime;\nsjcl.bn.prime = {\n  p127: sbp(127, [[0,-1]]),\n\n  // Bernstein's prime for Curve25519\n  p25519: sbp(255, [[0,-19]]),\n\n  // Koblitz primes\n  p192k: sbp(192, [[32,-1],[12,-1],[8,-1],[7,-1],[6,-1],[3,-1],[0,-1]]),\n  p224k: sbp(224, [[32,-1],[12,-1],[11,-1],[9,-1],[7,-1],[4,-1],[1,-1],[0,-1]]),\n  p256k: sbp(256, [[32,-1],[9,-1],[8,-1],[7,-1],[6,-1],[4,-1],[0,-1]]),\n\n  // NIST primes\n  p192: sbp(192, [[0,-1],[64,-1]]),\n  p224: sbp(224, [[0,1],[96,-1]]),\n  p256: sbp(256, [[0,-1],[96,1],[192,1],[224,-1]]),\n  p384: sbp(384, [[0,-1],[32,1],[96,-1],[128,-1]]),\n  p521: sbp(521, [[0,-1]])\n};\n\nsjcl.bn.random = function(modulus, paranoia) {\n  if (typeof modulus !== \"object\") { modulus = new sjcl.bn(modulus); }\n  var words, i, l = modulus.limbs.length, m = modulus.limbs[l-1]+1, out = new sjcl.bn();\n  while (true) {\n    // get a sequence whose first digits make sense\n    do {\n      words = sjcl.random.randomWords(l, paranoia);\n      if (words[l-1] < 0) { words[l-1] += 0x100000000; }\n    } while (Math.floor(words[l-1] / m) === Math.floor(0x100000000 / m));\n    words[l-1] %= m;\n\n    // mask off all the limbs\n    for (i=0; i<l-1; i++) {\n      words[i] &= modulus.radixMask;\n    }\n\n    // check the rest of the digitssj\n    out.limbs = words;\n    if (!out.greaterEquals(modulus)) {\n      return out;\n    }\n  }\n};\n/** @fileOverview Bit array codec implementations.\n *\n * @author Marco Munizaga\n */\n\n//patch arraybuffers if they don't exist\nif (typeof(ArrayBuffer) === 'undefined') {\n  (function(globals){\n      \"use strict\";\n      globals.ArrayBuffer = function(){};\n      globals.DataView = function(){};\n  }(this));\n}\n\n/**\n * ArrayBuffer\n * @namespace\n */\nsjcl.codec.arrayBuffer = {\n  /** Convert from a bitArray to an ArrayBuffer. \n   * Will default to 8byte padding if padding is undefined*/\n  fromBits: function (arr, padding, padding_count) {\n    var out, i, ol, tmp, smallest;\n    padding = padding==undefined  ? true : padding;\n    padding_count = padding_count || 8;\n\n    if (arr.length === 0) {\n      return new ArrayBuffer(0);\n    }\n\n    ol = sjcl.bitArray.bitLength(arr)/8;\n\n    //check to make sure the bitLength is divisible by 8, if it isn't \n    //we can't do anything since arraybuffers work with bytes, not bits\n    if ( sjcl.bitArray.bitLength(arr)%8 !== 0 ) {\n      throw new sjcl.exception.invalid(\"Invalid bit size, must be divisble by 8 to fit in an arraybuffer correctly\");\n    }\n\n    if (padding && ol%padding_count !== 0){\n      ol += padding_count - (ol%padding_count);\n    }\n\n\n    //padded temp for easy copying\n    tmp = new DataView(new ArrayBuffer(arr.length*4));\n    for (i=0; i<arr.length; i++) {\n      tmp.setUint32(i*4, (arr[i]<<32)); //get rid of the higher bits\n    }\n\n    //now copy the final message if we are not going to 0 pad\n    out = new DataView(new ArrayBuffer(ol));\n\n    //save a step when the tmp and out bytelength are ===\n    if (out.byteLength === tmp.byteLength){\n      return tmp.buffer;\n    }\n\n    smallest = tmp.byteLength < out.byteLength ? tmp.byteLength : out.byteLength;\n    for(i=0; i<smallest; i++){\n      out.setUint8(i,tmp.getUint8(i));\n    }\n\n\n    return out.buffer;\n  },\n\n  toBits: function (buffer) {\n    var i, out=[], len, inView, tmp;\n\n    if (buffer.byteLength === 0) {\n      return [];\n    }\n\n    inView = new DataView(buffer);\n    len = inView.byteLength - inView.byteLength%4;\n\n    for (var i = 0; i < len; i+=4) {\n      out.push(inView.getUint32(i));\n    }\n\n    if (inView.byteLength%4 != 0) {\n      tmp = new DataView(new ArrayBuffer(4));\n      for (var i = 0, l = inView.byteLength%4; i < l; i++) {\n        //we want the data to the right, because partial slices off the starting bits\n        tmp.setUint8(i+4-l, inView.getUint8(len+i)); // big-endian, \n      }\n      out.push(\n        sjcl.bitArray.partial( (inView.byteLength%4)*8, tmp.getUint32(0) )\n      ); \n    }\n    return out;\n  },\n\n\n\n  /** Prints a hex output of the buffer contents, akin to hexdump **/\n  hexDumpBuffer: function(buffer){\n      var stringBufferView = new DataView(buffer);\n      var string = '';\n      var pad = function (n, width) {\n          n = n + '';\n          return n.length >= width ? n : new Array(width - n.length + 1).join('0') + n;\n      };\n\n      for (var i = 0; i < stringBufferView.byteLength; i+=2) {\n          if (i%16 == 0) string += ('\\n'+(i).toString(16)+'\\t');\n          string += ( pad(stringBufferView.getUint16(i).toString(16),4) + ' ');\n      }\n\n      if ( typeof console === undefined ){\n        console = console || {log:function(){}}; //fix for IE\n      }\n      console.log(string.toUpperCase());\n  }\n};\n\n/** @fileOverview Bit array codec implementations.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/**\n * UTF-8 strings\n * @namespace\n */\nsjcl.codec.utf8String = {\n  /** Convert from a bitArray to a UTF-8 string. */\n  fromBits: function (arr) {\n    var out = \"\", bl = sjcl.bitArray.bitLength(arr), i, tmp;\n    for (i=0; i<bl/8; i++) {\n      if ((i&3) === 0) {\n        tmp = arr[i/4];\n      }\n      out += String.fromCharCode(tmp >>> 8 >>> 8 >>> 8);\n      tmp <<= 8;\n    }\n    return decodeURIComponent(escape(out));\n  },\n\n  /** Convert from a UTF-8 string to a bitArray. */\n  toBits: function (str) {\n    str = unescape(encodeURIComponent(str));\n    var out = [], i, tmp=0;\n    for (i=0; i<str.length; i++) {\n      tmp = tmp << 8 | str.charCodeAt(i);\n      if ((i&3) === 3) {\n        out.push(tmp);\n        tmp = 0;\n      }\n    }\n    if (i&3) {\n      out.push(sjcl.bitArray.partial(8*(i&3), tmp));\n    }\n    return out;\n  }\n};\n/**\n * base class for all ecc operations.\n * @namespace\n */\nsjcl.ecc = {};\n\n/**\n * Represents a point on a curve in affine coordinates.\n * @constructor\n * @param {sjcl.ecc.curve} curve The curve that this point lies on.\n * @param {bigInt} x The x coordinate.\n * @param {bigInt} y The y coordinate.\n */\nsjcl.ecc.point = function(curve,x,y) {\n  if (x === undefined) {\n    this.isIdentity = true;\n  } else {\n    if (x instanceof sjcl.bn) {\n      x = new curve.field(x);\n    }\n    if (y instanceof sjcl.bn) {\n      y = new curve.field(y);\n    }\n\n    this.x = x;\n    this.y = y;\n\n    this.isIdentity = false;\n  }\n  this.curve = curve;\n};\n\n\n\nsjcl.ecc.point.prototype = {\n  toJac: function() {\n    return new sjcl.ecc.pointJac(this.curve, this.x, this.y, new this.curve.field(1));\n  },\n\n  mult: function(k) {\n    return this.toJac().mult(k, this).toAffine();\n  },\n\n  /**\n   * Multiply this point by k, added to affine2*k2, and return the answer in Jacobian coordinates.\n   * @param {bigInt} k The coefficient to multiply this by.\n   * @param {bigInt} k2 The coefficient to multiply affine2 this by.\n   * @param {sjcl.ecc.point} affine The other point in affine coordinates.\n   * @return {sjcl.ecc.pointJac} The result of the multiplication and addition, in Jacobian coordinates.\n   */\n  mult2: function(k, k2, affine2) {\n    return this.toJac().mult2(k, this, k2, affine2).toAffine();\n  },\n\n  multiples: function() {\n    var m, i, j;\n    if (this._multiples === undefined) {\n      j = this.toJac().doubl();\n      m = this._multiples = [new sjcl.ecc.point(this.curve), this, j.toAffine()];\n      for (i=3; i<16; i++) {\n        j = j.add(this);\n        m.push(j.toAffine());\n      }\n    }\n    return this._multiples;\n  },\n\n  negate: function() {\n    var newY = new this.curve.field(0).sub(this.y).normalize().reduce();\n    return new sjcl.ecc.point(this.curve, this.x, newY);\n  },\n\n  isValid: function() {\n    return this.y.square().equals(this.curve.b.add(this.x.mul(this.curve.a.add(this.x.square()))));\n  },\n\n  toBits: function() {\n    return sjcl.bitArray.concat(this.x.toBits(), this.y.toBits());\n  }\n};\n\n/**\n * Represents a point on a curve in Jacobian coordinates. Coordinates can be specified as bigInts or strings (which\n * will be converted to bigInts).\n *\n * @constructor\n * @param {bigInt/string} x The x coordinate.\n * @param {bigInt/string} y The y coordinate.\n * @param {bigInt/string} z The z coordinate.\n * @param {sjcl.ecc.curve} curve The curve that this point lies on.\n */\nsjcl.ecc.pointJac = function(curve, x, y, z) {\n  if (x === undefined) {\n    this.isIdentity = true;\n  } else {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.isIdentity = false;\n  }\n  this.curve = curve;\n};\n\nsjcl.ecc.pointJac.prototype = {\n  /**\n   * Adds S and T and returns the result in Jacobian coordinates. Note that S must be in Jacobian coordinates and T must be in affine coordinates.\n   * @param {sjcl.ecc.pointJac} S One of the points to add, in Jacobian coordinates.\n   * @param {sjcl.ecc.point} T The other point to add, in affine coordinates.\n   * @return {sjcl.ecc.pointJac} The sum of the two points, in Jacobian coordinates.\n   */\n  add: function(T) {\n    var S = this, sz2, c, d, c2, x1, x2, x, y1, y2, y, z;\n    if (S.curve !== T.curve) {\n      throw new sjcl.exception.invalid(\"sjcl.ecc.add(): Points must be on the same curve to add them!\");\n    }\n\n    if (S.isIdentity) {\n      return T.toJac();\n    } else if (T.isIdentity) {\n      return S;\n    }\n\n    sz2 = S.z.square();\n    c = T.x.mul(sz2).subM(S.x);\n\n    if (c.equals(0)) {\n      if (S.y.equals(T.y.mul(sz2.mul(S.z)))) {\n        // same point\n        return S.doubl();\n      } else {\n        // inverses\n        return new sjcl.ecc.pointJac(S.curve);\n      }\n    }\n\n    d = T.y.mul(sz2.mul(S.z)).subM(S.y);\n    c2 = c.square();\n\n    x1 = d.square();\n    x2 = c.square().mul(c).addM( S.x.add(S.x).mul(c2) );\n    x  = x1.subM(x2);\n\n    y1 = S.x.mul(c2).subM(x).mul(d);\n    y2 = S.y.mul(c.square().mul(c));\n    y  = y1.subM(y2);\n\n    z  = S.z.mul(c);\n\n    return new sjcl.ecc.pointJac(this.curve,x,y,z);\n  },\n\n  /**\n   * doubles this point.\n   * @return {sjcl.ecc.pointJac} The doubled point.\n   */\n  doubl: function() {\n    if (this.isIdentity) { return this; }\n\n    var\n      y2 = this.y.square(),\n      a  = y2.mul(this.x.mul(4)),\n      b  = y2.square().mul(8),\n      z2 = this.z.square(),\n      c  = this.curve.a.toString() == (new sjcl.bn(-3)).toString() ?\n                this.x.sub(z2).mul(3).mul(this.x.add(z2)) :\n                this.x.square().mul(3).add(z2.square().mul(this.curve.a)),\n      x  = c.square().subM(a).subM(a),\n      y  = a.sub(x).mul(c).subM(b),\n      z  = this.y.add(this.y).mul(this.z);\n    return new sjcl.ecc.pointJac(this.curve, x, y, z);\n  },\n\n  /**\n   * Returns a copy of this point converted to affine coordinates.\n   * @return {sjcl.ecc.point} The converted point.\n   */\n  toAffine: function() {\n    if (this.isIdentity || this.z.equals(0)) {\n      return new sjcl.ecc.point(this.curve);\n    }\n    var zi = this.z.inverse(), zi2 = zi.square();\n    return new sjcl.ecc.point(this.curve, this.x.mul(zi2).fullReduce(), this.y.mul(zi2.mul(zi)).fullReduce());\n  },\n\n  /**\n   * Multiply this point by k and return the answer in Jacobian coordinates.\n   * @param {bigInt} k The coefficient to multiply by.\n   * @param {sjcl.ecc.point} affine This point in affine coordinates.\n   * @return {sjcl.ecc.pointJac} The result of the multiplication, in Jacobian coordinates.\n   */\n  mult: function(k, affine) {\n    if (typeof(k) === \"number\") {\n      k = [k];\n    } else if (k.limbs !== undefined) {\n      k = k.normalize().limbs;\n    }\n\n    var i, j, out = new sjcl.ecc.point(this.curve).toJac(), multiples = affine.multiples();\n\n    for (i=k.length-1; i>=0; i--) {\n      for (j=sjcl.bn.prototype.radix-4; j>=0; j-=4) {\n        out = out.doubl().doubl().doubl().doubl().add(multiples[k[i]>>j & 0xF]);\n      }\n    }\n\n    return out;\n  },\n\n  /**\n   * Multiply this point by k, added to affine2*k2, and return the answer in Jacobian coordinates.\n   * @param {bigInt} k The coefficient to multiply this by.\n   * @param {sjcl.ecc.point} affine This point in affine coordinates.\n   * @param {bigInt} k2 The coefficient to multiply affine2 this by.\n   * @param {sjcl.ecc.point} affine The other point in affine coordinates.\n   * @return {sjcl.ecc.pointJac} The result of the multiplication and addition, in Jacobian coordinates.\n   */\n  mult2: function(k1, affine, k2, affine2) {\n    if (typeof(k1) === \"number\") {\n      k1 = [k1];\n    } else if (k1.limbs !== undefined) {\n      k1 = k1.normalize().limbs;\n    }\n\n    if (typeof(k2) === \"number\") {\n      k2 = [k2];\n    } else if (k2.limbs !== undefined) {\n      k2 = k2.normalize().limbs;\n    }\n\n    var i, j, out = new sjcl.ecc.point(this.curve).toJac(), m1 = affine.multiples(),\n        m2 = affine2.multiples(), l1, l2;\n\n    for (i=Math.max(k1.length,k2.length)-1; i>=0; i--) {\n      l1 = k1[i] | 0;\n      l2 = k2[i] | 0;\n      for (j=sjcl.bn.prototype.radix-4; j>=0; j-=4) {\n        out = out.doubl().doubl().doubl().doubl().add(m1[l1>>j & 0xF]).add(m2[l2>>j & 0xF]);\n      }\n    }\n\n    return out;\n  },\n\n  negate: function() {\n    return this.toAffine().negate().toJac();\n  },\n\n  isValid: function() {\n    var z2 = this.z.square(), z4 = z2.square(), z6 = z4.mul(z2);\n    return this.y.square().equals(\n             this.curve.b.mul(z6).add(this.x.mul(\n               this.curve.a.mul(z4).add(this.x.square()))));\n  }\n};\n\n/**\n * Construct an elliptic curve. Most users will not use this and instead start with one of the NIST curves defined below.\n *\n * @constructor\n * @param {bigInt} p The prime modulus.\n * @param {bigInt} r The prime order of the curve.\n * @param {bigInt} a The constant a in the equation of the curve y^2 = x^3 + ax + b (for NIST curves, a is always -3).\n * @param {bigInt} x The x coordinate of a base point of the curve.\n * @param {bigInt} y The y coordinate of a base point of the curve.\n */\nsjcl.ecc.curve = function(Field, r, a, b, x, y) {\n  this.field = Field;\n  this.r = new sjcl.bn(r);\n  this.a = new Field(a);\n  this.b = new Field(b);\n  this.G = new sjcl.ecc.point(this, new Field(x), new Field(y));\n};\n\nsjcl.ecc.curve.prototype.fromBits = function (bits) {\n  var w = sjcl.bitArray, l = this.field.prototype.exponent + 7 & -8,\n      p = new sjcl.ecc.point(this, this.field.fromBits(w.bitSlice(bits, 0, l)),\n                             this.field.fromBits(w.bitSlice(bits, l, 2*l)));\n  if (!p.isValid()) {\n    throw new sjcl.exception.corrupt(\"not on the curve!\");\n  }\n  return p;\n};\n\nsjcl.ecc.curves = {\n  c192: new sjcl.ecc.curve(\n    sjcl.bn.prime.p192,\n    \"0xffffffffffffffffffffffff99def836146bc9b1b4d22831\",\n    -3,\n    \"0x64210519e59c80e70fa7e9ab72243049feb8deecc146b9b1\",\n    \"0x188da80eb03090f67cbf20eb43a18800f4ff0afd82ff1012\",\n    \"0x07192b95ffc8da78631011ed6b24cdd573f977a11e794811\"),\n\n  c224: new sjcl.ecc.curve(\n    sjcl.bn.prime.p224,\n    \"0xffffffffffffffffffffffffffff16a2e0b8f03e13dd29455c5c2a3d\",\n    -3,\n    \"0xb4050a850c04b3abf54132565044b0b7d7bfd8ba270b39432355ffb4\",\n    \"0xb70e0cbd6bb4bf7f321390b94a03c1d356c21122343280d6115c1d21\",\n    \"0xbd376388b5f723fb4c22dfe6cd4375a05a07476444d5819985007e34\"),\n\n  c256: new sjcl.ecc.curve(\n    sjcl.bn.prime.p256,\n    \"0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551\",\n    -3,\n    \"0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b\",\n    \"0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296\",\n    \"0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5\"),\n\n  c384: new sjcl.ecc.curve(\n    sjcl.bn.prime.p384,\n    \"0xffffffffffffffffffffffffffffffffffffffffffffffffc7634d81f4372ddf581a0db248b0a77aecec196accc52973\",\n    -3,\n    \"0xb3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef\",\n    \"0xaa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a385502f25dbf55296c3a545e3872760ab7\",\n    \"0x3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f\"),\n    \n  c521: new sjcl.ecc.curve(\n    sjcl.bn.prime.p521,\n    \"0x1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA51868783BF2F966B7FCC0148F709A5D03BB5C9B8899C47AEBB6FB71E91386409\",\n    -3,\n    \"0x051953EB9618E1C9A1F929A21A0B68540EEA2DA725B99B315F3B8B489918EF109E156193951EC7E937B1652C0BD3BB1BF073573DF883D2C34F1EF451FD46B503F00\",\n    \"0xC6858E06B70404E9CD9E3ECB662395B4429C648139053FB521F828AF606B4D3DBAA14B5E77EFE75928FE1DC127A2FFA8DE3348B3C1856A429BF97E7E31C2E5BD66\",\n    \"0x11839296A789A3BC0045C8A5FB42C7D1BD998F54449579B446817AFBD17273E662C97EE72995EF42640C550B9013FAD0761353C7086A272C24088BE94769FD16650\"),\n\n  k192: new sjcl.ecc.curve(\n    sjcl.bn.prime.p192k,\n    \"0xfffffffffffffffffffffffe26f2fc170f69466a74defd8d\",\n    0,\n    3,\n    \"0xdb4ff10ec057e9ae26b07d0280b7f4341da5d1b1eae06c7d\",\n    \"0x9b2f2f6d9c5628a7844163d015be86344082aa88d95e2f9d\"),\n\n  k224: new sjcl.ecc.curve(\n    sjcl.bn.prime.p224k,\n    \"0x010000000000000000000000000001dce8d2ec6184caf0a971769fb1f7\",\n    0,\n    5,\n    \"0xa1455b334df099df30fc28a169a467e9e47075a90f7e650eb6b7a45c\",\n    \"0x7e089fed7fba344282cafbd6f7e319f7c0b0bd59e2ca4bdb556d61a5\"),\n\n  k256: new sjcl.ecc.curve(\n    sjcl.bn.prime.p256k,\n    \"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\",\n    0,\n    7,\n    \"0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\",\n    \"0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\")\n\n};\n\nsjcl.ecc.curveName = function (curve) {\n  var curcurve;\n  for (curcurve in sjcl.ecc.curves) {\n    if (sjcl.ecc.curves.hasOwnProperty(curcurve)) {\n      if (sjcl.ecc.curves[curcurve] === curve) {\n        return curcurve;\n      }\n    }\n  }\n\n  throw new sjcl.exception.invalid(\"no such curve\");\n};\n\nsjcl.ecc.deserialize = function (key) {\n  var types = [\"elGamal\", \"ecdsa\"];\n\n  if (!key || !key.curve || !sjcl.ecc.curves[key.curve]) { throw new sjcl.exception.invalid(\"invalid serialization\"); }\n  if (types.indexOf(key.type) === -1) { throw new sjcl.exception.invalid(\"invalid type\"); }\n\n  var curve = sjcl.ecc.curves[key.curve];\n\n  if (key.secretKey) {\n    if (!key.exponent) { throw new sjcl.exception.invalid(\"invalid exponent\"); }\n    var exponent = new sjcl.bn(key.exponent);\n    return new sjcl.ecc[key.type].secretKey(curve, exponent);\n  } else {\n    if (!key.point) { throw new sjcl.exception.invalid(\"invalid point\"); }\n    \n    var point = curve.fromBits(sjcl.codec.hex.toBits(key.point));\n    return new sjcl.ecc[key.type].publicKey(curve, point);\n  }\n};\n\n/** our basicKey classes\n*/\nsjcl.ecc.basicKey = {\n  /** ecc publicKey.\n  * @constructor\n  * @param {curve} curve the elliptic curve\n  * @param {point} point the point on the curve\n  */\n  publicKey: function(curve, point) {\n    this._curve = curve;\n    this._curveBitLength = curve.r.bitLength();\n    if (point instanceof Array) {\n      this._point = curve.fromBits(point);\n    } else {\n      this._point = point;\n    }\n\n    this.serialize = function () {\n      var curveName = sjcl.ecc.curveName(curve);\n      return {\n        type: this.getType(),\n        secretKey: false,\n        point: sjcl.codec.hex.fromBits(this._point.toBits()),\n        curve: curveName\n      };\n    };\n\n    /** get this keys point data\n    * @return x and y as bitArrays\n    */\n    this.get = function() {\n      var pointbits = this._point.toBits();\n      var len = sjcl.bitArray.bitLength(pointbits);\n      var x = sjcl.bitArray.bitSlice(pointbits, 0, len/2);\n      var y = sjcl.bitArray.bitSlice(pointbits, len/2);\n      return { x: x, y: y };\n    };\n  },\n\n  /** ecc secretKey\n  * @constructor\n  * @param {curve} curve the elliptic curve\n  * @param exponent\n  */\n  secretKey: function(curve, exponent) {\n    this._curve = curve;\n    this._curveBitLength = curve.r.bitLength();\n    this._exponent = exponent;\n\n    this.serialize = function () {\n      var exponent = this.get();\n      var curveName = sjcl.ecc.curveName(curve);\n      return {\n        type: this.getType(),\n        secretKey: true,\n        exponent: sjcl.codec.hex.fromBits(exponent),\n        curve: curveName\n      };\n    };\n\n    /** get this keys exponent data\n    * @return {bitArray} exponent\n    */\n    this.get = function () {\n      return this._exponent.toBits();\n    };\n  }\n};\n\n/** @private */\nsjcl.ecc.basicKey.generateKeys = function(cn) {\n  return function generateKeys(curve, paranoia, sec) {\n    curve = curve || 256;\n\n    if (typeof curve === \"number\") {\n      curve = sjcl.ecc.curves['c'+curve];\n      if (curve === undefined) {\n        throw new sjcl.exception.invalid(\"no such curve\");\n      }\n    }\n    sec = sec || sjcl.bn.random(curve.r, paranoia);\n\n    var pub = curve.G.mult(sec);\n    return { pub: new sjcl.ecc[cn].publicKey(curve, pub),\n             sec: new sjcl.ecc[cn].secretKey(curve, sec) };\n  };\n};\n\n/** elGamal keys */\nsjcl.ecc.elGamal = {\n  /** generate keys\n  * @function\n  * @param curve\n  * @param {int} paranoia Paranoia for generation (default 6)\n  * @param {secretKey} sec secret Key to use. used to get the publicKey for ones secretKey\n  */\n  generateKeys: sjcl.ecc.basicKey.generateKeys(\"elGamal\"),\n  /** elGamal publicKey.\n  * @constructor\n  * @augments sjcl.ecc.basicKey.publicKey\n  */\n  publicKey: function (curve, point) {\n    sjcl.ecc.basicKey.publicKey.apply(this, arguments);\n  },\n  /** elGamal secretKey\n  * @constructor\n  * @augments sjcl.ecc.basicKey.secretKey\n  */\n  secretKey: function (curve, exponent) {\n    sjcl.ecc.basicKey.secretKey.apply(this, arguments);\n  }\n};\n\nsjcl.ecc.elGamal.publicKey.prototype = {\n  /** Kem function of elGamal Public Key\n  * @param paranoia paranoia to use for randomization.\n  * @return {object} key and tag. unkem(tag) with the corresponding secret key results in the key returned.\n  */\n  kem: function(paranoia) {\n    var sec = sjcl.bn.random(this._curve.r, paranoia),\n        tag = this._curve.G.mult(sec).toBits(),\n        key = sjcl.hash.sha256.hash(this._point.mult(sec).toBits());\n    return { key: key, tag: tag };\n  },\n  \n  getType: function() {\n    return \"elGamal\";\n  }\n};\n\nsjcl.ecc.elGamal.secretKey.prototype = {\n  /** UnKem function of elGamal Secret Key\n  * @param {bitArray} tag The Tag to decrypt.\n  * @return {bitArray} decrypted key.\n  */\n  unkem: function(tag) {\n    return sjcl.hash.sha256.hash(this._curve.fromBits(tag).mult(this._exponent).toBits());\n  },\n\n  /** Diffie-Hellmann function\n  * @param {elGamal.publicKey} pk The Public Key to do Diffie-Hellmann with\n  * @return {bitArray} diffie-hellmann result for this key combination.\n  */\n  dh: function(pk) {\n    return sjcl.hash.sha256.hash(pk._point.mult(this._exponent).toBits());\n  },\n\n  /** Diffie-Hellmann function, compatible with Java generateSecret\n  * @param {elGamal.publicKey} pk The Public Key to do Diffie-Hellmann with\n  * @return {bitArray} undigested X value, diffie-hellmann result for this key combination,\n  * compatible with Java generateSecret().\n  */\n  dhJavaEc: function(pk) {\n    return pk._point.mult(this._exponent).x.toBits();\n  }, \n\n  getType: function() {\n    return \"elGamal\";\n  }\n};\n\n/** ecdsa keys */\nsjcl.ecc.ecdsa = {\n  /** generate keys\n  * @function\n  * @param curve\n  * @param {int} paranoia Paranoia for generation (default 6)\n  * @param {secretKey} sec secret Key to use. used to get the publicKey for ones secretKey\n  */\n  generateKeys: sjcl.ecc.basicKey.generateKeys(\"ecdsa\")\n};\n\n/** ecdsa publicKey.\n* @constructor\n* @augments sjcl.ecc.basicKey.publicKey\n*/\nsjcl.ecc.ecdsa.publicKey = function (curve, point) {\n  sjcl.ecc.basicKey.publicKey.apply(this, arguments);\n};\n\n/** specific functions for ecdsa publicKey. */\nsjcl.ecc.ecdsa.publicKey.prototype = {\n  /** Diffie-Hellmann function\n  * @param {bitArray} hash hash to verify.\n  * @param {bitArray} rs signature bitArray.\n  * @param {boolean}  fakeLegacyVersion use old legacy version\n  */\n  verify: function(hash, rs, fakeLegacyVersion) {\n    if (sjcl.bitArray.bitLength(hash) > this._curveBitLength) {\n      hash = sjcl.bitArray.clamp(hash, this._curveBitLength);\n    }\n    var w = sjcl.bitArray,\n        R = this._curve.r,\n        l = this._curveBitLength,\n        r = sjcl.bn.fromBits(w.bitSlice(rs,0,l)),\n        ss = sjcl.bn.fromBits(w.bitSlice(rs,l,2*l)),\n        s = fakeLegacyVersion ? ss : ss.inverseMod(R),\n        hG = sjcl.bn.fromBits(hash).mul(s).mod(R),\n        hA = r.mul(s).mod(R),\n        r2 = this._curve.G.mult2(hG, hA, this._point).x;\n    if (r.equals(0) || ss.equals(0) || r.greaterEquals(R) || ss.greaterEquals(R) || !r2.equals(r)) {\n      if (fakeLegacyVersion === undefined) {\n        return this.verify(hash, rs, true);\n      } else {\n        throw (new sjcl.exception.corrupt(\"signature didn't check out\"));\n      }\n    }\n    return true;\n  },\n\n  getType: function() {\n    return \"ecdsa\";\n  }\n};\n\n/** ecdsa secretKey\n* @constructor\n* @augments sjcl.ecc.basicKey.publicKey\n*/\nsjcl.ecc.ecdsa.secretKey = function (curve, exponent) {\n  sjcl.ecc.basicKey.secretKey.apply(this, arguments);\n};\n\n/** specific functions for ecdsa secretKey. */\nsjcl.ecc.ecdsa.secretKey.prototype = {\n  /** Diffie-Hellmann function\n  * @param {bitArray} hash hash to sign.\n  * @param {int} paranoia paranoia for random number generation\n  * @param {boolean} fakeLegacyVersion use old legacy version\n  */\n  sign: function(hash, paranoia, fakeLegacyVersion, fixedKForTesting) {\n    if (sjcl.bitArray.bitLength(hash) > this._curveBitLength) {\n      hash = sjcl.bitArray.clamp(hash, this._curveBitLength);\n    }\n    var R  = this._curve.r,\n        l  = R.bitLength(),\n        k  = fixedKForTesting || sjcl.bn.random(R.sub(1), paranoia).add(1),\n        r  = this._curve.G.mult(k).x.mod(R),\n        ss = sjcl.bn.fromBits(hash).add(r.mul(this._exponent)),\n        s  = fakeLegacyVersion ? ss.inverseMod(R).mul(k).mod(R)\n             : ss.mul(k.inverseMod(R)).mod(R);\n    return sjcl.bitArray.concat(r.toBits(l), s.toBits(l));\n  },\n\n  getType: function() {\n    return \"ecdsa\";\n  }\n};\n/** @fileOverview Javascript RIPEMD-160 implementation.\n *\n * @author Artem S Vybornov <vybornov@gmail.com>\n */\n(function() {\n\n/**\n * Context for a RIPEMD-160 operation in progress.\n * @constructor\n */\nsjcl.hash.ripemd160 = function (hash) {\n    if (hash) {\n        this._h = hash._h.slice(0);\n        this._buffer = hash._buffer.slice(0);\n        this._length = hash._length;\n    } else {\n        this.reset();\n    }\n};\n\n/**\n * Hash a string or an array of words.\n * @static\n * @param {bitArray|String} data the data to hash.\n * @return {bitArray} The hash value, an array of 5 big-endian words.\n */\nsjcl.hash.ripemd160.hash = function (data) {\n  return (new sjcl.hash.ripemd160()).update(data).finalize();\n};\n\nsjcl.hash.ripemd160.prototype = {\n    /**\n     * Reset the hash state.\n     * @return this\n     */\n    reset: function () {\n        this._h = _h0.slice(0);\n        this._buffer = [];\n        this._length = 0;\n        return this;\n    },\n\n    /**\n     * Reset the hash state.\n     * @param {bitArray|String} data the data to hash.\n     * @return this\n     */\n    update: function (data) {\n        if ( typeof data === \"string\" )\n            data = sjcl.codec.utf8String.toBits(data);\n\n        var i, b = this._buffer = sjcl.bitArray.concat(this._buffer, data),\n            ol = this._length,\n            nl = this._length = ol + sjcl.bitArray.bitLength(data);\n        if (nl > 9007199254740991){\n            throw new sjcl.exception.invalid(\"Cannot hash more than 2^53 - 1 bits\");\n        }\n        for (i = 512+ol - ((512+ol) & 511); i <= nl; i+= 512) {\n            var words = b.splice(0,16);\n            for ( var w = 0; w < 16; ++w )\n                words[w] = _cvt(words[w]);\n\n            _block.call( this, words );\n        }\n\n        return this;\n    },\n\n    /**\n     * Complete hashing and output the hash value.\n     * @return {bitArray} The hash value, an array of 5 big-endian words.\n     */\n    finalize: function () {\n        var b = sjcl.bitArray.concat( this._buffer, [ sjcl.bitArray.partial(1,1) ] ),\n            l = ( this._length + 1 ) % 512,\n            z = ( l > 448 ? 512 : 448 ) - l % 448,\n            zp = z % 32;\n\n        if ( zp > 0 )\n            b = sjcl.bitArray.concat( b, [ sjcl.bitArray.partial(zp,0) ] );\n        for ( ; z >= 32; z -= 32 )\n            b.push(0);\n\n        b.push( _cvt( this._length | 0 ) );\n        b.push( _cvt( Math.floor(this._length / 0x100000000) ) );\n\n        while ( b.length ) {\n            var words = b.splice(0,16);\n            for ( var w = 0; w < 16; ++w )\n                words[w] = _cvt(words[w]);\n\n            _block.call( this, words );\n        }\n\n        var h = this._h;\n        this.reset();\n\n        for ( var w = 0; w < 5; ++w )\n            h[w] = _cvt(h[w]);\n\n        return h;\n    }\n};\n\nvar _h0 = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];\n\nvar _k1 = [ 0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e ];\nvar _k2 = [ 0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000 ];\nfor ( var i = 4; i >= 0; --i ) {\n    for ( var j = 1; j < 16; ++j ) {\n        _k1.splice(i,0,_k1[i]);\n        _k2.splice(i,0,_k2[i]);\n    }\n}\n\nvar _r1 = [  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n             7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,\n             3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,\n             1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,\n             4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13 ];\nvar _r2 = [  5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,\n             6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,\n            15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,\n             8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,\n            12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11 ];\n\nvar _s1 = [ 11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,\n             7,  6,  8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,\n            11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,\n            11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,\n             9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ];\nvar _s2 = [  8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,\n             9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,\n             9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,\n            15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,\n             8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ];\n\nfunction _f0(x,y,z) {\n    return x ^ y ^ z;\n}\n\nfunction _f1(x,y,z) {\n    return (x & y) | (~x & z);\n}\n\nfunction _f2(x,y,z) {\n    return (x | ~y) ^ z;\n}\n\nfunction _f3(x,y,z) {\n    return (x & z) | (y & ~z);\n}\n\nfunction _f4(x,y,z) {\n    return x ^ (y | ~z);\n}\n\nfunction _rol(n,l) {\n    return (n << l) | (n >>> (32-l));\n}\n\nfunction _cvt(n) {\n    return ( (n & 0xff <<  0) <<  24 )\n         | ( (n & 0xff <<  8) <<   8 )\n         | ( (n & 0xff << 16) >>>  8 )\n         | ( (n & 0xff << 24) >>> 24 );\n}\n\nfunction _block(X) {\n    var A1 = this._h[0], B1 = this._h[1], C1 = this._h[2], D1 = this._h[3], E1 = this._h[4],\n        A2 = this._h[0], B2 = this._h[1], C2 = this._h[2], D2 = this._h[3], E2 = this._h[4];\n\n    var j = 0, T;\n\n    for ( ; j < 16; ++j ) {\n        T = _rol( A1 + _f0(B1,C1,D1) + X[_r1[j]] + _k1[j], _s1[j] ) + E1;\n        A1 = E1; E1 = D1; D1 = _rol(C1,10); C1 = B1; B1 = T;\n        T = _rol( A2 + _f4(B2,C2,D2) + X[_r2[j]] + _k2[j], _s2[j] ) + E2;\n        A2 = E2; E2 = D2; D2 = _rol(C2,10); C2 = B2; B2 = T; }\n    for ( ; j < 32; ++j ) {\n        T = _rol( A1 + _f1(B1,C1,D1) + X[_r1[j]] + _k1[j], _s1[j] ) + E1;\n        A1 = E1; E1 = D1; D1 = _rol(C1,10); C1 = B1; B1 = T;\n        T = _rol( A2 + _f3(B2,C2,D2) + X[_r2[j]] + _k2[j], _s2[j] ) + E2;\n        A2 = E2; E2 = D2; D2 = _rol(C2,10); C2 = B2; B2 = T; }\n    for ( ; j < 48; ++j ) {\n        T = _rol( A1 + _f2(B1,C1,D1) + X[_r1[j]] + _k1[j], _s1[j] ) + E1;\n        A1 = E1; E1 = D1; D1 = _rol(C1,10); C1 = B1; B1 = T;\n        T = _rol( A2 + _f2(B2,C2,D2) + X[_r2[j]] + _k2[j], _s2[j] ) + E2;\n        A2 = E2; E2 = D2; D2 = _rol(C2,10); C2 = B2; B2 = T; }\n    for ( ; j < 64; ++j ) {\n        T = _rol( A1 + _f3(B1,C1,D1) + X[_r1[j]] + _k1[j], _s1[j] ) + E1;\n        A1 = E1; E1 = D1; D1 = _rol(C1,10); C1 = B1; B1 = T;\n        T = _rol( A2 + _f1(B2,C2,D2) + X[_r2[j]] + _k2[j], _s2[j] ) + E2;\n        A2 = E2; E2 = D2; D2 = _rol(C2,10); C2 = B2; B2 = T; }\n    for ( ; j < 80; ++j ) {\n        T = _rol( A1 + _f4(B1,C1,D1) + X[_r1[j]] + _k1[j], _s1[j] ) + E1;\n        A1 = E1; E1 = D1; D1 = _rol(C1,10); C1 = B1; B1 = T;\n        T = _rol( A2 + _f0(B2,C2,D2) + X[_r2[j]] + _k2[j], _s2[j] ) + E2;\n        A2 = E2; E2 = D2; D2 = _rol(C2,10); C2 = B2; B2 = T; }\n\n    T = this._h[1] + C1 + D2;\n    this._h[1] = this._h[2] + D1 + E2;\n    this._h[2] = this._h[3] + E1 + A2;\n    this._h[3] = this._h[4] + A1 + B2;\n    this._h[4] = this._h[0] + B1 + C2;\n    this._h[0] = T;\n}\n\n})();\n/** @fileOverview Javascript SHA-256 implementation.\n *\n * An older version of this implementation is available in the public\n * domain, but this one is (c) Emily Stark, Mike Hamburg, Dan Boneh,\n * Stanford University 2008-2010 and BSD-licensed for liability\n * reasons.\n *\n * Special thanks to Aldo Cortesi for pointing out several bugs in\n * this code.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/**\n * Context for a SHA-256 operation in progress.\n * @constructor\n */\nsjcl.hash.sha256 = function (hash) {\n  if (!this._key[0]) { this._precompute(); }\n  if (hash) {\n    this._h = hash._h.slice(0);\n    this._buffer = hash._buffer.slice(0);\n    this._length = hash._length;\n  } else {\n    this.reset();\n  }\n};\n\n/**\n * Hash a string or an array of words.\n * @static\n * @param {bitArray|String} data the data to hash.\n * @return {bitArray} The hash value, an array of 16 big-endian words.\n */\nsjcl.hash.sha256.hash = function (data) {\n  return (new sjcl.hash.sha256()).update(data).finalize();\n};\n\nsjcl.hash.sha256.prototype = {\n  /**\n   * The hash's block size, in bits.\n   * @constant\n   */\n  blockSize: 512,\n   \n  /**\n   * Reset the hash state.\n   * @return this\n   */\n  reset:function () {\n    this._h = this._init.slice(0);\n    this._buffer = [];\n    this._length = 0;\n    return this;\n  },\n  \n  /**\n   * Input several words to the hash.\n   * @param {bitArray|String} data the data to hash.\n   * @return this\n   */\n  update: function (data) {\n    if (typeof data === \"string\") {\n      data = sjcl.codec.utf8String.toBits(data);\n    }\n    var i, b = this._buffer = sjcl.bitArray.concat(this._buffer, data),\n        ol = this._length,\n        nl = this._length = ol + sjcl.bitArray.bitLength(data);\n    if (nl > 9007199254740991){\n      throw new sjcl.exception.invalid(\"Cannot hash more than 2^53 - 1 bits\");\n    }\n\n    if (typeof Uint32Array !== 'undefined') {\n\tvar c = new Uint32Array(b);\n    \tvar j = 0;\n    \tfor (i = 512+ol - ((512+ol) & 511); i <= nl; i+= 512) {\n      \t    this._block(c.subarray(16 * j, 16 * (j+1)));\n      \t    j += 1;\n    \t}\n    \tb.splice(0, 16 * j);\n    } else {\n\tfor (i = 512+ol - ((512+ol) & 511); i <= nl; i+= 512) {\n      \t    this._block(b.splice(0,16));\n      \t}\n    }\n    return this;\n  },\n  \n  /**\n   * Complete hashing and output the hash value.\n   * @return {bitArray} The hash value, an array of 8 big-endian words.\n   */\n  finalize:function () {\n    var i, b = this._buffer, h = this._h;\n\n    // Round out and push the buffer\n    b = sjcl.bitArray.concat(b, [sjcl.bitArray.partial(1,1)]);\n    \n    // Round out the buffer to a multiple of 16 words, less the 2 length words.\n    for (i = b.length + 2; i & 15; i++) {\n      b.push(0);\n    }\n    \n    // append the length\n    b.push(Math.floor(this._length / 0x100000000));\n    b.push(this._length | 0);\n\n    while (b.length) {\n      this._block(b.splice(0,16));\n    }\n\n    this.reset();\n    return h;\n  },\n\n  /**\n   * The SHA-256 initialization vector, to be precomputed.\n   * @private\n   */\n  _init:[],\n  /*\n  _init:[0x6a09e667,0xbb67ae85,0x3c6ef372,0xa54ff53a,0x510e527f,0x9b05688c,0x1f83d9ab,0x5be0cd19],\n  */\n  \n  /**\n   * The SHA-256 hash key, to be precomputed.\n   * @private\n   */\n  _key:[],\n  /*\n  _key:\n    [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n     0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n     0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n     0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n     0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n     0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n     0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n     0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2],\n  */\n\n\n  /**\n   * Function to precompute _init and _key.\n   * @private\n   */\n  _precompute: function () {\n    var i = 0, prime = 2, factor, isPrime;\n\n    function frac(x) { return (x-Math.floor(x)) * 0x100000000 | 0; }\n\n    for (; i<64; prime++) {\n      isPrime = true;\n      for (factor=2; factor*factor <= prime; factor++) {\n        if (prime % factor === 0) {\n          isPrime = false;\n          break;\n        }\n      }\n      if (isPrime) {\n        if (i<8) {\n          this._init[i] = frac(Math.pow(prime, 1/2));\n        }\n        this._key[i] = frac(Math.pow(prime, 1/3));\n        i++;\n      }\n    }\n  },\n  \n  /**\n   * Perform one cycle of SHA-256.\n   * @param {Uint32Array|bitArray} w one block of words.\n   * @private\n   */\n  _block:function (w) {  \n    var i, tmp, a, b,\n      h = this._h,\n      k = this._key,\n      h0 = h[0], h1 = h[1], h2 = h[2], h3 = h[3],\n      h4 = h[4], h5 = h[5], h6 = h[6], h7 = h[7];\n\n    /* Rationale for placement of |0 :\n     * If a value can overflow is original 32 bits by a factor of more than a few\n     * million (2^23 ish), there is a possibility that it might overflow the\n     * 53-bit mantissa and lose precision.\n     *\n     * To avoid this, we clamp back to 32 bits by |'ing with 0 on any value that\n     * propagates around the loop, and on the hash state h[].  I don't believe\n     * that the clamps on h4 and on h0 are strictly necessary, but it's close\n     * (for h4 anyway), and better safe than sorry.\n     *\n     * The clamps on h[] are necessary for the output to be correct even in the\n     * common case and for short inputs.\n     */\n    for (i=0; i<64; i++) {\n      // load up the input word for this round\n      if (i<16) {\n        tmp = w[i];\n      } else {\n        a   = w[(i+1 ) & 15];\n        b   = w[(i+14) & 15];\n        tmp = w[i&15] = ((a>>>7  ^ a>>>18 ^ a>>>3  ^ a<<25 ^ a<<14) + \n                         (b>>>17 ^ b>>>19 ^ b>>>10 ^ b<<15 ^ b<<13) +\n                         w[i&15] + w[(i+9) & 15]) | 0;\n      }\n      \n      tmp = (tmp + h7 + (h4>>>6 ^ h4>>>11 ^ h4>>>25 ^ h4<<26 ^ h4<<21 ^ h4<<7) +  (h6 ^ h4&(h5^h6)) + k[i]); // | 0;\n      \n      // shift register\n      h7 = h6; h6 = h5; h5 = h4;\n      h4 = h3 + tmp | 0;\n      h3 = h2; h2 = h1; h1 = h0;\n\n      h0 = (tmp +  ((h1&h2) ^ (h3&(h1^h2))) + (h1>>>2 ^ h1>>>13 ^ h1>>>22 ^ h1<<30 ^ h1<<19 ^ h1<<10)) | 0;\n    }\n\n    h[0] = h[0]+h0 | 0;\n    h[1] = h[1]+h1 | 0;\n    h[2] = h[2]+h2 | 0;\n    h[3] = h[3]+h3 | 0;\n    h[4] = h[4]+h4 | 0;\n    h[5] = h[5]+h5 | 0;\n    h[6] = h[6]+h6 | 0;\n    h[7] = h[7]+h7 | 0;\n  }\n};\n\n\n/** @fileOverview Random number generator.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n * @author Michael Brooks\n * @author Steve Thomas\n */\n\n/** \n * @class Random number generator\n * @description\n * <b>Use sjcl.random as a singleton for this class!</b>\n * <p>\n * This random number generator is a derivative of Ferguson and Schneier's\n * generator Fortuna.  It collects entropy from various events into several\n * pools, implemented by streaming SHA-256 instances.  It differs from\n * ordinary Fortuna in a few ways, though.\n * </p>\n *\n * <p>\n * Most importantly, it has an entropy estimator.  This is present because\n * there is a strong conflict here between making the generator available\n * as soon as possible, and making sure that it doesn't \"run on empty\".\n * In Fortuna, there is a saved state file, and the system is likely to have\n * time to warm up.\n * </p>\n *\n * <p>\n * Second, because users are unlikely to stay on the page for very long,\n * and to speed startup time, the number of pools increases logarithmically:\n * a new pool is created when the previous one is actually used for a reseed.\n * This gives the same asymptotic guarantees as Fortuna, but gives more\n * entropy to early reseeds.\n * </p>\n *\n * <p>\n * The entire mechanism here feels pretty klunky.  Furthermore, there are\n * several improvements that should be made, including support for\n * dedicated cryptographic functions that may be present in some browsers;\n * state files in local storage; cookies containing randomness; etc.  So\n * look for improvements in future versions.\n * </p>\n * @constructor\n */\nsjcl.prng = function(defaultParanoia) {\n  \n  /* private */\n  this._pools                   = [new sjcl.hash.sha256()];\n  this._poolEntropy             = [0];\n  this._reseedCount             = 0;\n  this._robins                  = {};\n  this._eventId                 = 0;\n  \n  this._collectorIds            = {};\n  this._collectorIdNext         = 0;\n  \n  this._strength                = 0;\n  this._poolStrength            = 0;\n  this._nextReseed              = 0;\n  this._key                     = [0,0,0,0,0,0,0,0];\n  this._counter                 = [0,0,0,0];\n  this._cipher                  = undefined;\n  this._defaultParanoia         = defaultParanoia;\n  \n  /* event listener stuff */\n  this._collectorsStarted       = false;\n  this._callbacks               = {progress: {}, seeded: {}};\n  this._callbackI               = 0;\n  \n  /* constants */\n  this._NOT_READY               = 0;\n  this._READY                   = 1;\n  this._REQUIRES_RESEED         = 2;\n\n  this._MAX_WORDS_PER_BURST     = 65536;\n  this._PARANOIA_LEVELS         = [0,48,64,96,128,192,256,384,512,768,1024];\n  this._MILLISECONDS_PER_RESEED = 30000;\n  this._BITS_PER_RESEED         = 80;\n};\n \nsjcl.prng.prototype = {\n  /** Generate several random words, and return them in an array.\n   * A word consists of 32 bits (4 bytes)\n   * @param {Number} nwords The number of words to generate.\n   */\n  randomWords: function (nwords, paranoia) {\n    var out = [], i, readiness = this.isReady(paranoia), g;\n  \n    if (readiness === this._NOT_READY) {\n      throw new sjcl.exception.notReady(\"generator isn't seeded\");\n    } else if (readiness & this._REQUIRES_RESEED) {\n      this._reseedFromPools(!(readiness & this._READY));\n    }\n  \n    for (i=0; i<nwords; i+= 4) {\n      if ((i+1) % this._MAX_WORDS_PER_BURST === 0) {\n        this._gate();\n      }\n   \n      g = this._gen4words();\n      out.push(g[0],g[1],g[2],g[3]);\n    }\n    this._gate();\n  \n    return out.slice(0,nwords);\n  },\n  \n  setDefaultParanoia: function (paranoia, allowZeroParanoia) {\n    if (paranoia === 0 && allowZeroParanoia !== \"Setting paranoia=0 will ruin your security; use it only for testing\") {\n      throw new sjcl.exception.invalid(\"Setting paranoia=0 will ruin your security; use it only for testing\");\n    }\n\n    this._defaultParanoia = paranoia;\n  },\n  \n  /**\n   * Add entropy to the pools.\n   * @param data The entropic value.  Should be a 32-bit integer, array of 32-bit integers, or string\n   * @param {Number} estimatedEntropy The estimated entropy of data, in bits\n   * @param {String} source The source of the entropy, eg \"mouse\"\n   */\n  addEntropy: function (data, estimatedEntropy, source) {\n    source = source || \"user\";\n  \n    var id,\n      i, tmp,\n      t = (new Date()).valueOf(),\n      robin = this._robins[source],\n      oldReady = this.isReady(), err = 0, objName;\n      \n    id = this._collectorIds[source];\n    if (id === undefined) { id = this._collectorIds[source] = this._collectorIdNext ++; }\n      \n    if (robin === undefined) { robin = this._robins[source] = 0; }\n    this._robins[source] = ( this._robins[source] + 1 ) % this._pools.length;\n  \n    switch(typeof(data)) {\n      \n    case \"number\":\n      if (estimatedEntropy === undefined) {\n        estimatedEntropy = 1;\n      }\n      this._pools[robin].update([id,this._eventId++,1,estimatedEntropy,t,1,data|0]);\n      break;\n      \n    case \"object\":\n      objName = Object.prototype.toString.call(data);\n      if (objName === \"[object Uint32Array]\") {\n        tmp = [];\n        for (i = 0; i < data.length; i++) {\n          tmp.push(data[i]);\n        }\n        data = tmp;\n      } else {\n        if (objName !== \"[object Array]\") {\n          err = 1;\n        }\n        for (i=0; i<data.length && !err; i++) {\n          if (typeof(data[i]) !== \"number\") {\n            err = 1;\n          }\n        }\n      }\n      if (!err) {\n        if (estimatedEntropy === undefined) {\n          /* horrible entropy estimator */\n          estimatedEntropy = 0;\n          for (i=0; i<data.length; i++) {\n            tmp= data[i];\n            while (tmp>0) {\n              estimatedEntropy++;\n              tmp = tmp >>> 1;\n            }\n          }\n        }\n        this._pools[robin].update([id,this._eventId++,2,estimatedEntropy,t,data.length].concat(data));\n      }\n      break;\n      \n    case \"string\":\n      if (estimatedEntropy === undefined) {\n       /* English text has just over 1 bit per character of entropy.\n        * But this might be HTML or something, and have far less\n        * entropy than English...  Oh well, let's just say one bit.\n        */\n       estimatedEntropy = data.length;\n      }\n      this._pools[robin].update([id,this._eventId++,3,estimatedEntropy,t,data.length]);\n      this._pools[robin].update(data);\n      break;\n      \n    default:\n      err=1;\n    }\n    if (err) {\n      throw new sjcl.exception.bug(\"random: addEntropy only supports number, array of numbers or string\");\n    }\n  \n    /* record the new strength */\n    this._poolEntropy[robin] += estimatedEntropy;\n    this._poolStrength += estimatedEntropy;\n  \n    /* fire off events */\n    if (oldReady === this._NOT_READY) {\n      if (this.isReady() !== this._NOT_READY) {\n        this._fireEvent(\"seeded\", Math.max(this._strength, this._poolStrength));\n      }\n      this._fireEvent(\"progress\", this.getProgress());\n    }\n  },\n  \n  /** Is the generator ready? */\n  isReady: function (paranoia) {\n    var entropyRequired = this._PARANOIA_LEVELS[ (paranoia !== undefined) ? paranoia : this._defaultParanoia ];\n  \n    if (this._strength && this._strength >= entropyRequired) {\n      return (this._poolEntropy[0] > this._BITS_PER_RESEED && (new Date()).valueOf() > this._nextReseed) ?\n        this._REQUIRES_RESEED | this._READY :\n        this._READY;\n    } else {\n      return (this._poolStrength >= entropyRequired) ?\n        this._REQUIRES_RESEED | this._NOT_READY :\n        this._NOT_READY;\n    }\n  },\n  \n  /** Get the generator's progress toward readiness, as a fraction */\n  getProgress: function (paranoia) {\n    var entropyRequired = this._PARANOIA_LEVELS[ paranoia ? paranoia : this._defaultParanoia ];\n  \n    if (this._strength >= entropyRequired) {\n      return 1.0;\n    } else {\n      return (this._poolStrength > entropyRequired) ?\n        1.0 :\n        this._poolStrength / entropyRequired;\n    }\n  },\n  \n  /** start the built-in entropy collectors */\n  startCollectors: function () {\n    if (this._collectorsStarted) { return; }\n  \n    this._eventListener = {\n      loadTimeCollector: this._bind(this._loadTimeCollector),\n      mouseCollector: this._bind(this._mouseCollector),\n      keyboardCollector: this._bind(this._keyboardCollector),\n      accelerometerCollector: this._bind(this._accelerometerCollector),\n      touchCollector: this._bind(this._touchCollector)\n    };\n\n    if (window.addEventListener) {\n      window.addEventListener(\"load\", this._eventListener.loadTimeCollector, false);\n      window.addEventListener(\"mousemove\", this._eventListener.mouseCollector, false);\n      window.addEventListener(\"keypress\", this._eventListener.keyboardCollector, false);\n      window.addEventListener(\"devicemotion\", this._eventListener.accelerometerCollector, false);\n      window.addEventListener(\"touchmove\", this._eventListener.touchCollector, false);\n    } else if (document.attachEvent) {\n      document.attachEvent(\"onload\", this._eventListener.loadTimeCollector);\n      document.attachEvent(\"onmousemove\", this._eventListener.mouseCollector);\n      document.attachEvent(\"keypress\", this._eventListener.keyboardCollector);\n    } else {\n      throw new sjcl.exception.bug(\"can't attach event\");\n    }\n  \n    this._collectorsStarted = true;\n  },\n  \n  /** stop the built-in entropy collectors */\n  stopCollectors: function () {\n    if (!this._collectorsStarted) { return; }\n  \n    if (window.removeEventListener) {\n      window.removeEventListener(\"load\", this._eventListener.loadTimeCollector, false);\n      window.removeEventListener(\"mousemove\", this._eventListener.mouseCollector, false);\n      window.removeEventListener(\"keypress\", this._eventListener.keyboardCollector, false);\n      window.removeEventListener(\"devicemotion\", this._eventListener.accelerometerCollector, false);\n      window.removeEventListener(\"touchmove\", this._eventListener.touchCollector, false);\n    } else if (document.detachEvent) {\n      document.detachEvent(\"onload\", this._eventListener.loadTimeCollector);\n      document.detachEvent(\"onmousemove\", this._eventListener.mouseCollector);\n      document.detachEvent(\"keypress\", this._eventListener.keyboardCollector);\n    }\n\n    this._collectorsStarted = false;\n  },\n  \n  /* use a cookie to store entropy.\n  useCookie: function (all_cookies) {\n      throw new sjcl.exception.bug(\"random: useCookie is unimplemented\");\n  },*/\n  \n  /** add an event listener for progress or seeded-ness. */\n  addEventListener: function (name, callback) {\n    this._callbacks[name][this._callbackI++] = callback;\n  },\n  \n  /** remove an event listener for progress or seeded-ness */\n  removeEventListener: function (name, cb) {\n    var i, j, cbs=this._callbacks[name], jsTemp=[];\n\n    /* I'm not sure if this is necessary; in C++, iterating over a\n     * collection and modifying it at the same time is a no-no.\n     */\n\n    for (j in cbs) {\n      if (cbs.hasOwnProperty(j) && cbs[j] === cb) {\n        jsTemp.push(j);\n      }\n    }\n\n    for (i=0; i<jsTemp.length; i++) {\n      j = jsTemp[i];\n      delete cbs[j];\n    }\n  },\n  \n  _bind: function (func) {\n    var that = this;\n    return function () {\n      func.apply(that, arguments);\n    };\n  },\n\n  /** Generate 4 random words, no reseed, no gate.\n   * @private\n   */\n  _gen4words: function () {\n    for (var i=0; i<4; i++) {\n      this._counter[i] = this._counter[i]+1 | 0;\n      if (this._counter[i]) { break; }\n    }\n    return this._cipher.encrypt(this._counter);\n  },\n  \n  /* Rekey the AES instance with itself after a request, or every _MAX_WORDS_PER_BURST words.\n   * @private\n   */\n  _gate: function () {\n    this._key = this._gen4words().concat(this._gen4words());\n    this._cipher = new sjcl.cipher.aes(this._key);\n  },\n  \n  /** Reseed the generator with the given words\n   * @private\n   */\n  _reseed: function (seedWords) {\n    this._key = sjcl.hash.sha256.hash(this._key.concat(seedWords));\n    this._cipher = new sjcl.cipher.aes(this._key);\n    for (var i=0; i<4; i++) {\n      this._counter[i] = this._counter[i]+1 | 0;\n      if (this._counter[i]) { break; }\n    }\n  },\n  \n  /** reseed the data from the entropy pools\n   * @param full If set, use all the entropy pools in the reseed.\n   */\n  _reseedFromPools: function (full) {\n    var reseedData = [], strength = 0, i;\n  \n    this._nextReseed = reseedData[0] =\n      (new Date()).valueOf() + this._MILLISECONDS_PER_RESEED;\n    \n    for (i=0; i<16; i++) {\n      /* On some browsers, this is cryptographically random.  So we might\n       * as well toss it in the pot and stir...\n       */\n      reseedData.push(Math.random()*0x100000000|0);\n    }\n    \n    for (i=0; i<this._pools.length; i++) {\n     reseedData = reseedData.concat(this._pools[i].finalize());\n     strength += this._poolEntropy[i];\n     this._poolEntropy[i] = 0;\n   \n     if (!full && (this._reseedCount & (1<<i))) { break; }\n    }\n  \n    /* if we used the last pool, push a new one onto the stack */\n    if (this._reseedCount >= 1 << this._pools.length) {\n     this._pools.push(new sjcl.hash.sha256());\n     this._poolEntropy.push(0);\n    }\n  \n    /* how strong was this reseed? */\n    this._poolStrength -= strength;\n    if (strength > this._strength) {\n      this._strength = strength;\n    }\n  \n    this._reseedCount ++;\n    this._reseed(reseedData);\n  },\n  \n  _keyboardCollector: function () {\n    this._addCurrentTimeToEntropy(1);\n  },\n  \n  _mouseCollector: function (ev) {\n    var x, y;\n\n    try {\n      x = ev.x || ev.clientX || ev.offsetX || 0;\n      y = ev.y || ev.clientY || ev.offsetY || 0;\n    } catch (err) {\n      // Event originated from a secure element. No mouse position available.\n      x = 0;\n      y = 0;\n    }\n\n    if (x != 0 && y!= 0) {\n      this.addEntropy([x,y], 2, \"mouse\");\n    }\n\n    this._addCurrentTimeToEntropy(0);\n  },\n\n  _touchCollector: function(ev) {\n    var touch = ev.touches[0] || ev.changedTouches[0];\n    var x = touch.pageX || touch.clientX,\n        y = touch.pageY || touch.clientY;\n\n    this.addEntropy([x,y],1,\"touch\");\n\n    this._addCurrentTimeToEntropy(0);\n  },\n  \n  _loadTimeCollector: function () {\n    this._addCurrentTimeToEntropy(2);\n  },\n\n  _addCurrentTimeToEntropy: function (estimatedEntropy) {\n    if (typeof window !== 'undefined' && window.performance && typeof window.performance.now === \"function\") {\n      //how much entropy do we want to add here?\n      this.addEntropy(window.performance.now(), estimatedEntropy, \"loadtime\");\n    } else {\n      this.addEntropy((new Date()).valueOf(), estimatedEntropy, \"loadtime\");\n    }\n  },\n  _accelerometerCollector: function (ev) {\n    var ac = ev.accelerationIncludingGravity.x||ev.accelerationIncludingGravity.y||ev.accelerationIncludingGravity.z;\n    if(window.orientation){\n      var or = window.orientation;\n      if (typeof or === \"number\") {\n        this.addEntropy(or, 1, \"accelerometer\");\n      }\n    }\n    if (ac) {\n      this.addEntropy(ac, 2, \"accelerometer\");\n    }\n    this._addCurrentTimeToEntropy(0);\n  },\n\n  _fireEvent: function (name, arg) {\n    var j, cbs=sjcl.random._callbacks[name], cbsTemp=[];\n    /* TODO: there is a race condition between removing collectors and firing them */\n\n    /* I'm not sure if this is necessary; in C++, iterating over a\n     * collection and modifying it at the same time is a no-no.\n     */\n\n    for (j in cbs) {\n      if (cbs.hasOwnProperty(j)) {\n        cbsTemp.push(cbs[j]);\n      }\n    }\n\n    for (j=0; j<cbsTemp.length; j++) {\n      cbsTemp[j](arg);\n    }\n  }\n};\n\n/** an instance for the prng.\n* @see sjcl.prng\n*/\nsjcl.random = new sjcl.prng(6);\n\n(function(){\n  // function for getting nodejs crypto module. catches and ignores errors.\n  function getCryptoModule() {\n    try {\n      return require('crypto');\n    }\n    catch (e) {\n      return null;\n    }\n  }\n\n  try {\n    var buf, crypt, ab;\n\n    // get cryptographically strong entropy depending on runtime environment\n    if (typeof module !== 'undefined' && module.exports && (crypt = getCryptoModule()) && crypt.randomBytes) {\n      buf = crypt.randomBytes(1024/8);\n      buf = new Uint32Array(new Uint8Array(buf).buffer);\n      sjcl.random.addEntropy(buf, 1024, \"crypto.randomBytes\");\n\n    } else if (typeof window !== 'undefined' && typeof Uint32Array !== 'undefined') {\n      ab = new Uint32Array(32);\n      if (window.crypto && window.crypto.getRandomValues) {\n        window.crypto.getRandomValues(ab);\n      } else if (window.msCrypto && window.msCrypto.getRandomValues) {\n        window.msCrypto.getRandomValues(ab);\n      } else {\n        return;\n      }\n\n      // get cryptographically strong entropy in Webkit\n      sjcl.random.addEntropy(ab, 1024, \"crypto.getRandomValues\");\n\n    } else {\n      // no getRandomValues :-(\n    }\n  } catch (e) {\n    if (typeof window !== 'undefined' && window.console) {\n      console.log(\"There was an error collecting entropy from the browser:\");\n      console.log(e);\n      //we do not want the library to fail due to randomness not being maintained.\n    }\n  }\n}());\n/* global sjcl */\nsjcl.codec.base58 = {\n  alpha: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz',\n  lookup: {\n    '1': 0,\n    '2': 1,\n    '3': 2,\n    '4': 3,\n    '5': 4,\n    '6': 5,\n    '7': 6,\n    '8': 7,\n    '9': 8,\n    A: 9,\n    B: 10,\n    C: 11,\n    D: 12,\n    E: 13,\n    F: 14,\n    G: 15,\n    H: 16,\n    J: 17,\n    K: 18,\n    L: 19,\n    M: 20,\n    N: 21,\n    P: 22,\n    Q: 23,\n    R: 24,\n    S: 25,\n    T: 26,\n    U: 27,\n    V: 28,\n    W: 29,\n    X: 30,\n    Y: 31,\n    Z: 32,\n    a: 33,\n    b: 34,\n    c: 35,\n    d: 36,\n    e: 37,\n    f: 38,\n    g: 39,\n    h: 40,\n    i: 41,\n    j: 42,\n    k: 43,\n    m: 44,\n    n: 45,\n    o: 46,\n    p: 47,\n    q: 48,\n    r: 49,\n    s: 50,\n    t: 51,\n    u: 52,\n    v: 53,\n    w: 54,\n    x: 55,\n    y: 56,\n    z: 57\n  },\n\n  toBits: function(fromDigits) {\n    var work = new sjcl.bn();\n    var fb = new sjcl.bn(58);\n\n    for (var i = 0; i < fromDigits.length; i++) {\n      var digit = new sjcl.bn(sjcl.codec.base58.lookup[fromDigits[i]]);\n      work.addM(digit.mul(fb.power(fromDigits.length - i - 1)));\n    }\n\n    work.fullReduce();\n    return work.toBits();\n  },\n\n  fromBits: function(bits) {\n    var num = sjcl.bn.fromBits(bits);\n    var bitlen = sjcl.bitArray.bitLength(bits);\n    var len = Math.ceil(bitlen * (Math.log(2) / Math.log(58)));\n    var base = new sjcl.bn(58);\n    var str = '';\n\n    for (var i = len - 1; i >= 0; i--) {\n      var iBig = new sjcl.bn(i);\n      var exp = base.power(iBig);\n\n      var pos = 0;\n      while (num.greaterEquals(exp)) {\n        num.subM(exp);\n        num.normalize();\n        pos++;\n      }\n      if (!(i === len - 1 && pos === 0)) {\n        str += sjcl.codec.base58.alpha[pos];\n      }\n    }\n    return str;\n  }\n};\n/* global sjcl */\n\nsjcl.codec.base58Check = {\n  defaultChecksumFn: function(bits) {\n    return sjcl.bitArray.bitSlice(\n      sjcl.hash.sha256.hash(sjcl.hash.sha256.hash(bits)),\n      0,\n      32\n    );\n  },\n\n  fromBits: function(version, bits, checksumFn) {\n    checksumFn = checksumFn || sjcl.codec.base58Check.defaultChecksumFn;\n\n    var bitsWithHeader = sjcl.bitArray.concat(\n      [sjcl.bitArray.partial(8, version)],\n      bits\n    );\n    var checksum = checksumFn(bitsWithHeader);\n    var headerPayloadAndChecksum = sjcl.bitArray.concat(\n      bitsWithHeader,\n      checksum\n    );\n    var base58str = sjcl.codec.base58.fromBits(headerPayloadAndChecksum);\n\n    var leadingZeroBits = 0;\n    while (\n      sjcl.bitArray.extract(headerPayloadAndChecksum, leadingZeroBits, 8) == 0\n    ) {\n      base58str = '1' + base58str;\n      leadingZeroBits += 8;\n    }\n\n    return base58str;\n  },\n  toBits: function(str, checksumFn) {\n    checksumFn = checksumFn || sjcl.codec.base58Check.defaultChecksumFn;\n\n    var bits = sjcl.codec.base58.toBits(str);\n    var bitlen = sjcl.bitArray.bitLength(bits);\n    //    var headerByte = sjcl.bitArray.extract(bits, 0, 8);\n    var payload = sjcl.bitArray.bitSlice(bits, 0, bitlen - 32);\n\n    var transmittedChecksum = sjcl.bitArray.bitSlice(bits, bitlen - 32);\n    var computedChecksum = checksumFn(payload);\n    if (!sjcl.bitArray.equal(computedChecksum, transmittedChecksum)) {\n      throw new Error('Checksums do not match');\n    }\n\n    return payload;\n  }\n};\n/* global sjcl */\nsjcl.codec.steemit = {\n  ROLES: ['owner', 'memo', 'active', 'posting'],\n  MAINNET: {\n    pubHeader: 0x0,\n    privHeader: 0x80,\n    pubPrefix: 'STM'\n  },\n  TESTNET: {\n    pubHeader: 0x0,\n    privHeader: 0x80,\n    pubPrefix: 'TST'\n  },\n  keyChecksum: function(bits) {\n    return sjcl.bitArray.bitSlice(sjcl.hash.ripemd160.hash(bits), 0, 32);\n  },\n\n  keysFromPassword: function(account, password) {\n    var keyPairs = {};\n    var CURVE = sjcl.ecc.curves.k256;\n    for (var i = 0; i < sjcl.codec.steemit.ROLES.length; i++) {\n      var role = sjcl.codec.steemit.ROLES[i];\n      var seed = account + role + password;\n      var secret = sjcl.bn.fromBits(\n        sjcl.hash.sha256.hash(sjcl.codec.utf8String.toBits(seed))\n      );\n      keyPairs[role] = sjcl.ecc.ecdsa.generateKeys(CURVE, 0, secret);\n    }\n    return keyPairs;\n  },\n\n  signRecoverably: function(sec, hash, paranoia, fixedKForTesting) {\n    /*\n     * an explanation of the format of the recovery parameter.\n     * given any ECDSA signature (r, s), there are 4 possible public keys that could have\n     * generated the signature over the hash. Two have odd Y-coordinates and two have\n     * even Y-coordinates. the recovery parameter deterministically identifies the public key\n     * that _did_ generate the signature.\n     *\n     * to get the public key given the recovery parameter, do the following:\n     * a. if the recovery parameter is between 27 and 31, subtract 27 and remember that the public\n     * key that produced the signature is canonically an \"uncompressed\" public key (i.e. known by\n     * its X and Y coordinates)\n     * b. If the recovery parameter is between 31 and 34, subtract 31 and remember that the public\n     * key that produced the signature is canonically a \"compressed\" public key (i.e. known by only\n     * its X coordinate).\n     *\n     * note that in the Steem blockchain, all public keys are canonically compressed and therefore the\n     * recovery parameter will always be between 31 and 34. therefore only case \"b\" applies here.\n     *\n     * after the subtraction, you will get a number between 0 and 4. this number, i, encodes the parity\n     * and \"overflow\" of the candidate public key among the four options.\n     *\n     * the lowest bit of i in binary notation indicates the parity of the candidate public key.\n     * if the lowest bit is set, the candidate public key's Y coordinate is odd. If it is cleared, the\n     * Y coordinate is even.\n     *\n     * The next-lowest bit of i, if set, indicates that the candidate public key's x was greater than\n     * the order of k. This is true of approximately 1 in 1^127 points on the secp256k1 curve.\n     * considering the rarity of this condition, it's much much simpler to just brute-force this\n     * condition when it occurs, following §4.1.6.\n     */\n\n    if (sjcl.bitArray.bitLength(hash) > this._curveBitLength) {\n      hash = sjcl.bitArray.clamp(hash, this._curveBitLength);\n    }\n\n    while (true) {\n\n      var CURVE = sjcl.ecc.curves.k256,\n        n = CURVE.r,\n        l = n.bitLength(),\n        k = fixedKForTesting || sjcl.bn.random(n.sub(1), paranoia).add(1),\n        R = CURVE.G.mult(k);\n\n      if (fixedKForTesting) {\n        fixedKForTesting = fixedKForTesting.add(1);\n      }\n      \n      if (R.isIdentity) {\n        continue;\n      }\n\n      var r = R.x.mod(n),\n        ss = sjcl.bn.fromBits(hash).add(r.mul(sec._exponent)),\n        s = ss.mul(k.inverseMod(n)).mod(n),\n        isOdd = R.y.limbs[0] & (0x1 == 1),\n        recoveryParam = 31;\n\n        if (isOdd) {\n          recoveryParam++;\n        }\n   \n        var rBitArray = r.toBits(l);\n        var sBitArray = s.toBits(l);\n\n        var r0 = sjcl.bitArray.extract(rBitArray, 0, 8);\n        var r1 = sjcl.bitArray.extract(rBitArray, 8, 8);\n        var s0 = sjcl.bitArray.extract(sBitArray, 0, 8);\n        var s1 = sjcl.bitArray.extract(sBitArray, 8, 8);\n            \n        if (!(r0 & 0x80)\n          && !(r0 == 0 && !(r1 & 0x80))\n          && !(s0 & 0x80)\n          && !(s0 == 0 && !(s1 & 0x80))) {\n          var rawSig = sjcl.bitArray.concat(r.toBits(l), s.toBits(l));\n      \n          return sjcl.bitArray.concat(\n            [sjcl.bitArray.partial(8, recoveryParam)],\n            rawSig\n          );\n        }\n     }\n  },\n\n  recoverPublicKey: function(hash, sig) {\n    var CURVE = sjcl.ecc.curves.k256;\n    var n = CURVE.r;\n    var G = CURVE.G;\n\n    var recoveryParameter = sjcl.bitArray.extract(sig, 0, 8) - 31;\n    var e = sjcl.bn.fromBits(hash);\n    var r = sjcl.bn.fromBits(sjcl.bitArray.bitSlice(sig, 8, 264));\n    var s = sjcl.bn.fromBits(sjcl.bitArray.bitSlice(sig, 264));\n\n    if (recoveryParameter < 0 || recoveryParameter > 4) {\n      throw new Error('Corrupt signature: recovery parameter is wrong');\n    }\n\n    var hasOddParity = (recoveryParameter & 0x1) === 1;\n\n    for (var j = 0; j <= 1; j++) {\n      var x = r.add(n.mul(j));\n\n      var y = sjcl.codec.steemit._yFromX(x, hasOddParity);\n      var p = new sjcl.ecc.point(CURVE, x, y);\n\n      var rInv = r.inverseMod(n);\n      var eNeg = new sjcl.bn(0).sub(e).mod(n);\n      var keyPoint = G.mult2(eNeg, s, p).mult(rInv);\n      var key = new sjcl.ecc.ecdsa.publicKey(CURVE, keyPoint);\n      try {\n        key.verify(hash, sjcl.bitArray.bitSlice(sig, 8));\n        return key;\n      } catch (_) {\n        // do nothing, wait for next j\n      }\n    }\n    throw new Error('public key was unrecoverable');\n  },\n\n  serializePublicKey: function(key, net) {\n    net = net || sjcl.codec.steemit.MAINNET;\n\n    var point = key.get();\n    var header = net.pubHeader;\n\n    // the public key header sets 0x3 if X is odd, 0x2 if even\n    if (sjcl.bn.fromBits(point.y).limbs[0] & 0x1) {\n      header |= 0x3;\n    } else {\n      header |= 0x2;\n    }\n    return (\n      net.pubPrefix +\n      sjcl.codec.base58Check.fromBits(\n        header,\n        point.x,\n        sjcl.codec.steemit.keyChecksum\n      )\n    );\n  },\n\n  deserializePublicKey: function(pubKey, net) {\n    net = net || sjcl.codec.steemit.MAINNET;\n    var CURVE = sjcl.ecc.curves.k256;\n\n    if (pubKey.indexOf(net.pubPrefix) !== 0) {\n      throw new Error(\n        'Public key is not in correct format, it should begin with \"' +\n          net.pubPrefix +\n          '\"'\n      );\n    }\n\n    var payload = sjcl.codec.base58Check.toBits(\n      pubKey.slice(3),\n      sjcl.codec.steemit.keyChecksum\n    );\n    var headerByte = sjcl.bitArray.extract(payload, 0, 8);\n    var isOdd = headerByte == 0x3;\n    if ((headerByte & net.pubHeader) !== net.pubHeader) {\n      throw new Error('public key has invalid header');\n    } else if ((headerByte & 0x3) === 0 && (headerByte & 0x2) === 0) {\n      throw new Error(\n        'public key has invalid header: should set 0x2 or 0x3, but got 0x' +\n          headerByte.toString(16)\n      );\n    }\n\n    var xBits = sjcl.bitArray.bitSlice(payload, 8);\n    var x = sjcl.bn.fromBits(xBits);\n    var y = sjcl.codec.steemit._yFromX(x, isOdd);\n\n    return new sjcl.ecc.ecdsa.publicKey(CURVE, new sjcl.ecc.point(CURVE, x, y));\n  },\n\n  serializePrivateKey: function(key, net) {\n    net = net || sjcl.codec.steemit.MAINNET;\n    return sjcl.codec.base58Check.fromBits(net.privHeader, key.get());\n  },\n\n  deserializePrivateKey: function(wif, header) {\n    header = header || sjcl.codec.steemit.MAINNET.privHeader;\n    var curve = sjcl.ecc.curves.k256;\n    var payload = sjcl.codec.base58Check.toBits(wif);\n    var headerByte = sjcl.bitArray.extract(payload, 0, 8);\n    if (headerByte !== header) {\n      throw new Error(\n        'private key has invalid header: wanted 0x' +\n          header.toString(16) +\n          ', got 0x' +\n          headerByte.toString(16)\n      );\n    }\n\n    var keyBits = sjcl.bitArray.bitSlice(payload, 8);\n    return new sjcl.ecc.ecdsa.secretKey(curve, sjcl.bn.fromBits(keyBits));\n  },\n\n  _yFromX: function(x, shouldBeOdd) {\n    var CURVE = sjcl.ecc.curves.k256;\n    var PIDENT = sjcl.codec.steemit._getPident();\n\n    var alpha = x\n      .powermod(3, CURVE.field.modulus)\n      .add(x.mulmod(CURVE.a, CURVE.field.modulus))\n      .add(CURVE.b)\n      .mod(CURVE.field.modulus);\n\n    var y = alpha.powermod(PIDENT, CURVE.field.modulus);\n    var yIsOdd = y.mod(2).equals(1);\n\n    if ((yIsOdd && shouldBeOdd) || (!yIsOdd && !shouldBeOdd)) {\n      return y;\n    } else {\n      return CURVE.field.modulus.sub(y).normalize();\n    }\n  },\n\n  _getPident: function() {\n    if (!sjcl.codec.steemit.PIDENT) {\n      sjcl.codec.steemit.PIDENT = sjcl.ecc.curves.k256.field.modulus\n        .add(1)\n        .normalize()\n        .halveM()\n        .halveM()\n        .normalize();\n    }\n    return sjcl.codec.steemit.PIDENT;\n  }\n};\n\n\n    return sjcl;\n  })();\n\n  exports.sjcl = sjcl;\n\n  function PrivateKey(priv, pub) {\n    // we deliberately avoid exposing private key material on the instance.\n    // this is paranoid and probably doesn't protect against a determined\n    // attack, but why make things easy?\n    this.getPublicKey = function() {\n      if (!pub) {\n        pub = sjcl.ecc.ecdsa.generateKeys(\n          sjcl.ecc.curves.k256,\n          undefined,\n          sjcl.bn.fromBits(priv.get())\n        ).pub;\n      }\n      return new PublicKey(pub);\n    };\n\n    this.sign = function(hash) {\n      return fromBits(sjcl.codec.steemit.signRecoverably(priv, toBits(hash)));\n    };\n  }\n\n  PrivateKey.from = function(wif, header) {\n    return new PrivateKey(\n      sjcl.codec.steemit.deserializePrivateKey(wif, header)\n    );\n  };\n\n  function PublicKey(pub) {\n    this._p = pub;\n  }\n\n  PublicKey.from = function(str) {\n    return new PublicKey(sjcl.codec.steemit.deserializePublicKey(str));\n  };\n\n  PublicKey.recover = function(hash, sig) {\n    return new PublicKey(\n      sjcl.codec.steemit.recoverPublicKey(toBits(hash), toBits(sig))\n    );\n  };\n\n  PublicKey.prototype = {\n    toString: function() {\n      return sjcl.codec.steemit.serializePublicKey(this._p);\n    },\n    verify: function(hash, signature) {\n      try {\n        var rawSig = sjcl.bitArray.bitSlice(toBits(signature), 8);\n        this._p.verify(toBits(hash), rawSig);\n        return true;\n      } catch (_) {\n        return false;\n      }\n    }\n  };\n\n  function generateKeys() {\n    var k = sjcl.ecc.ecdsa.generateKeys(sjcl.ecc.curves.k256);\n    return serializePair(k);\n  }\n\n  function keysFromPassword(accountName, accountPassword) {\n    var keys = sjcl.codec.steemit.keysFromPassword(\n      accountName,\n      accountPassword\n    );\n    return {\n      owner: serializePair(keys.owner),\n      memo: serializePair(keys.memo),\n      posting: serializePair(keys.posting),\n      active: serializePair(keys.active)\n    };\n  }\n\n  function sha256(data) {\n    return fromBits(sjcl.hash.sha256.hash(toBits(data)));\n  }\n\n  function ripemd160(data) {\n    return fromBits(sjcl.hash.ripemd160.hash(toBits(data)));\n  }\n\n  function hexify(data) {\n    var result = '';\n    var view = new Uint8Array(data);\n    for (var i = 0; i < view.byteLength; i++) {\n      if (view[i] < 16) {\n        result += '0';\n      }\n      result += view[i].toString(16);\n    }\n    return result;\n  }\n\n  function serializePair(k) {\n    return {\n      private: sjcl.codec.steemit.serializePrivateKey(k.sec),\n      public: sjcl.codec.steemit.serializePublicKey(k.pub)\n    };\n  }\n\n  function toBits(a) {\n    if (a instanceof ArrayBuffer) {\n      return sjcl.codec.arrayBuffer.toBits(a);\n    } else {\n      throw new Error('You must supply an ArrayBuffer');\n    }\n  }\n\n  function fromBits(a) {\n    return sjcl.codec.arrayBuffer.fromBits(a, 0, 0);\n  }\n});\n"],"mappings":"AAAA;AACA,CAAC,UAASA,IAAI,EAAEC,OAAO,EAAE;EACvB,IAAI,OAAOC,OAAO,KAAK,QAAQ,IAAI,OAAOA,OAAO,CAACC,QAAQ,KAAK,QAAQ,EAAE;IACvE;IACAF,OAAO,CAACC,OAAO,CAAC;EAClB,CAAC,MAAM;IACL;IACAF,IAAI,CAACI,OAAO,GAAGJ,IAAI,CAACI,OAAO,IAAI,CAAC,CAAC;IACjCH,OAAO,CAAED,IAAI,CAACI,OAAO,CAACC,MAAM,GAAG,CAAC,CAAE,CAAC;EACrC;AACF,CAAC,EAAE,OAAOC,IAAI,KAAK,WAAW,GAAGA,IAAI,GAAG,IAAI,EAAE,UAASJ,OAAO,EAAE;EAC9DA,OAAO,CAACK,UAAU,GAAGA,UAAU;EAC/BL,OAAO,CAACM,SAAS,GAAGA,SAAS;EAC7BN,OAAO,CAACO,YAAY,GAAGA,YAAY;EACnCP,OAAO,CAACQ,gBAAgB,GAAGA,gBAAgB;EAC3CR,OAAO,CAACS,MAAM,GAAGA,MAAM;EACvBT,OAAO,CAACU,SAAS,GAAGA,SAAS;EAC7BV,OAAO,CAACW,MAAM,GAAGA,MAAM;EAEvB,IAAIC,IAAI,GAAI,YAAW;IACrB;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEA,YAAY;;IACZ;IACA;;IAEA;AACA;AACA;AACA;IACA,IAAIA,IAAI,GAAG;MACT;AACF;AACA;AACA;MACEC,MAAM,EAAE,CAAC,CAAC;MAEV;AACF;AACA;AACA;MACEC,IAAI,EAAE,CAAC,CAAC;MAER;AACF;AACA;AACA;MACEC,WAAW,EAAE,CAAC,CAAC;MAEf;AACF;AACA;AACA;MACEC,IAAI,EAAE,CAAC,CAAC;MAER;AACF;AACA;AACA;MACEC,IAAI,EAAE,CAAC,CAAC;MAER;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACEC,KAAK,EAAE,CAAC,CAAC;MAET;AACF;AACA;AACA;MACEC,SAAS,EAAE;QACT;AACJ;AACA;AACA;QACIC,OAAO,EAAE,SAAAA,CAASC,OAAO,EAAE;UACzB,IAAI,CAACC,QAAQ,GAAG,YAAW;YAAE,OAAO,WAAW,GAAC,IAAI,CAACD,OAAO;UAAE,CAAC;UAC/D,IAAI,CAACA,OAAO,GAAGA,OAAO;QACxB,CAAC;QAED;AACJ;AACA;AACA;QACIE,OAAO,EAAE,SAAAA,CAASF,OAAO,EAAE;UACzB,IAAI,CAACC,QAAQ,GAAG,YAAW;YAAE,OAAO,WAAW,GAAC,IAAI,CAACD,OAAO;UAAE,CAAC;UAC/D,IAAI,CAACA,OAAO,GAAGA,OAAO;QACxB,CAAC;QAED;AACJ;AACA;AACA;QACIG,GAAG,EAAE,SAAAA,CAASH,OAAO,EAAE;UACrB,IAAI,CAACC,QAAQ,GAAG,YAAW;YAAE,OAAO,OAAO,GAAC,IAAI,CAACD,OAAO;UAAE,CAAC;UAC3D,IAAI,CAACA,OAAO,GAAGA,OAAO;QACxB,CAAC;QAED;AACJ;AACA;AACA;QACII,QAAQ,EAAE,SAAAA,CAASJ,OAAO,EAAE;UAC1B,IAAI,CAACC,QAAQ,GAAG,YAAW;YAAE,OAAO,aAAa,GAAC,IAAI,CAACD,OAAO;UAAE,CAAC;UACjE,IAAI,CAACA,OAAO,GAAGA,OAAO;QACxB;MACF;IACF,CAAC;IACD;AACA;AACA;AACA;AACA;AACA;;IAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACAT,IAAI,CAACc,QAAQ,GAAG;MACd;AACF;AACA;AACA;AACA;AACA;AACA;AACA;MACEC,QAAQ,EAAE,SAAAA,CAAUC,CAAC,EAAEC,MAAM,EAAEC,IAAI,EAAE;QACnCF,CAAC,GAAGhB,IAAI,CAACc,QAAQ,CAACK,WAAW,CAACH,CAAC,CAACI,KAAK,CAACH,MAAM,GAAC,EAAE,CAAC,EAAE,EAAE,IAAIA,MAAM,GAAG,EAAE,CAAC,CAAC,CAACG,KAAK,CAAC,CAAC,CAAC;QAC9E,OAAQF,IAAI,KAAKG,SAAS,GAAIL,CAAC,GAAGhB,IAAI,CAACc,QAAQ,CAACQ,KAAK,CAACN,CAAC,EAAEE,IAAI,GAACD,MAAM,CAAC;MACvE,CAAC;MAED;AACF;AACA;AACA;AACA;AACA;AACA;MACEM,OAAO,EAAE,SAAAA,CAASP,CAAC,EAAEC,MAAM,EAAEO,OAAO,EAAE;QACpC;QACA;QACA,IAAIC,CAAC;UAAEC,EAAE,GAAGC,IAAI,CAACC,KAAK,CAAE,CAACX,MAAM,GAACO,OAAO,GAAI,EAAE,CAAC;QAC9C,IAAI,CAACP,MAAM,GAAGO,OAAO,GAAG,CAAC,GAAGP,MAAM,IAAI,CAAC,EAAE,EAAE;UACzC;UACAQ,CAAC,GAAIT,CAAC,CAACC,MAAM,GAAC,EAAE,GAAC,CAAC,CAAC,IAAK,EAAE,GAAGS,EAAG,GAAKV,CAAC,CAACC,MAAM,GAAC,EAAE,GAAC,CAAC,GAAC,CAAC,CAAC,KAAKS,EAAG;QAC/D,CAAC,MAAM;UACL;UACAD,CAAC,GAAGT,CAAC,CAACC,MAAM,GAAC,EAAE,GAAC,CAAC,CAAC,KAAKS,EAAE;QAC3B;QACA,OAAOD,CAAC,GAAI,CAAC,CAAC,IAAED,OAAO,IAAI,CAAE;MAC/B,CAAC;MAED;AACF;AACA;AACA;AACA;AACA;MACEK,MAAM,EAAE,SAAAA,CAAUC,EAAE,EAAEC,EAAE,EAAE;QACxB,IAAID,EAAE,CAACE,MAAM,KAAK,CAAC,IAAID,EAAE,CAACC,MAAM,KAAK,CAAC,EAAE;UACtC,OAAOF,EAAE,CAACD,MAAM,CAACE,EAAE,CAAC;QACtB;QAEA,IAAIE,IAAI,GAAGH,EAAE,CAACA,EAAE,CAACE,MAAM,GAAC,CAAC,CAAC;UAAEE,KAAK,GAAGlC,IAAI,CAACc,QAAQ,CAACqB,UAAU,CAACF,IAAI,CAAC;QAClE,IAAIC,KAAK,KAAK,EAAE,EAAE;UAChB,OAAOJ,EAAE,CAACD,MAAM,CAACE,EAAE,CAAC;QACtB,CAAC,MAAM;UACL,OAAO/B,IAAI,CAACc,QAAQ,CAACK,WAAW,CAACY,EAAE,EAAEG,KAAK,EAAED,IAAI,GAAC,CAAC,EAAEH,EAAE,CAACV,KAAK,CAAC,CAAC,EAACU,EAAE,CAACE,MAAM,GAAC,CAAC,CAAC,CAAC;QAC9E;MACF,CAAC;MAED;AACF;AACA;AACA;AACA;MACEI,SAAS,EAAE,SAAAA,CAAUpB,CAAC,EAAE;QACtB,IAAIqB,CAAC,GAAGrB,CAAC,CAACgB,MAAM;UAAEP,CAAC;QACnB,IAAIY,CAAC,KAAK,CAAC,EAAE;UAAE,OAAO,CAAC;QAAE;QACzBZ,CAAC,GAAGT,CAAC,CAACqB,CAAC,GAAG,CAAC,CAAC;QACZ,OAAO,CAACA,CAAC,GAAC,CAAC,IAAI,EAAE,GAAGrC,IAAI,CAACc,QAAQ,CAACqB,UAAU,CAACV,CAAC,CAAC;MACjD,CAAC;MAED;AACF;AACA;AACA;AACA;AACA;MACEH,KAAK,EAAE,SAAAA,CAAUN,CAAC,EAAEsB,GAAG,EAAE;QACvB,IAAItB,CAAC,CAACgB,MAAM,GAAG,EAAE,GAAGM,GAAG,EAAE;UAAE,OAAOtB,CAAC;QAAE;QACrCA,CAAC,GAAGA,CAAC,CAACI,KAAK,CAAC,CAAC,EAAEO,IAAI,CAACY,IAAI,CAACD,GAAG,GAAG,EAAE,CAAC,CAAC;QACnC,IAAID,CAAC,GAAGrB,CAAC,CAACgB,MAAM;QAChBM,GAAG,GAAGA,GAAG,GAAG,EAAE;QACd,IAAID,CAAC,GAAG,CAAC,IAAIC,GAAG,EAAE;UAChBtB,CAAC,CAACqB,CAAC,GAAC,CAAC,CAAC,GAAGrC,IAAI,CAACc,QAAQ,CAAC0B,OAAO,CAACF,GAAG,EAAEtB,CAAC,CAACqB,CAAC,GAAC,CAAC,CAAC,GAAG,UAAU,IAAKC,GAAG,GAAC,CAAE,EAAE,CAAC,CAAC;QACxE;QACA,OAAOtB,CAAC;MACV,CAAC;MAED;AACF;AACA;AACA;AACA;AACA;AACA;MACEwB,OAAO,EAAE,SAAAA,CAAUF,GAAG,EAAEb,CAAC,EAAEgB,IAAI,EAAE;QAC/B,IAAIH,GAAG,KAAK,EAAE,EAAE;UAAE,OAAOb,CAAC;QAAE;QAC5B,OAAO,CAACgB,IAAI,GAAGhB,CAAC,GAAC,CAAC,GAAGA,CAAC,IAAK,EAAE,GAACa,GAAI,IAAIA,GAAG,GAAG,aAAa;MAC3D,CAAC;MAED;AACF;AACA;AACA;AACA;MACEH,UAAU,EAAE,SAAAA,CAAUV,CAAC,EAAE;QACvB,OAAOE,IAAI,CAACe,KAAK,CAACjB,CAAC,GAAC,aAAa,CAAC,IAAI,EAAE;MAC1C,CAAC;MAED;AACF;AACA;AACA;AACA;AACA;MACEkB,KAAK,EAAE,SAAAA,CAAU3B,CAAC,EAAE4B,CAAC,EAAE;QACrB,IAAI5C,IAAI,CAACc,QAAQ,CAACsB,SAAS,CAACpB,CAAC,CAAC,KAAKhB,IAAI,CAACc,QAAQ,CAACsB,SAAS,CAACQ,CAAC,CAAC,EAAE;UAC7D,OAAO,KAAK;QACd;QACA,IAAInB,CAAC,GAAG,CAAC;UAAEoB,CAAC;QACZ,KAAKA,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC7B,CAAC,CAACgB,MAAM,EAAEa,CAAC,EAAE,EAAE;UACzBpB,CAAC,IAAIT,CAAC,CAAC6B,CAAC,CAAC,GAACD,CAAC,CAACC,CAAC,CAAC;QAChB;QACA,OAAQpB,CAAC,KAAK,CAAC;MACjB,CAAC;MAED;AACF;AACA;AACA;AACA;AACA;AACA;MACEN,WAAW,EAAE,SAAAA,CAAUH,CAAC,EAAEkB,KAAK,EAAEY,KAAK,EAAEC,GAAG,EAAE;QAC3C,IAAIF,CAAC;UAAEG,KAAK,GAAC,CAAC;UAAEC,MAAM;QACtB,IAAIF,GAAG,KAAK1B,SAAS,EAAE;UAAE0B,GAAG,GAAG,EAAE;QAAE;QAEnC,OAAOb,KAAK,IAAI,EAAE,EAAEA,KAAK,IAAI,EAAE,EAAE;UAC/Ba,GAAG,CAACG,IAAI,CAACJ,KAAK,CAAC;UACfA,KAAK,GAAG,CAAC;QACX;QACA,IAAIZ,KAAK,KAAK,CAAC,EAAE;UACf,OAAOa,GAAG,CAAClB,MAAM,CAACb,CAAC,CAAC;QACtB;QAEA,KAAK6B,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC7B,CAAC,CAACgB,MAAM,EAAEa,CAAC,EAAE,EAAE;UACzBE,GAAG,CAACG,IAAI,CAACJ,KAAK,GAAG9B,CAAC,CAAC6B,CAAC,CAAC,KAAGX,KAAK,CAAC;UAC9BY,KAAK,GAAG9B,CAAC,CAAC6B,CAAC,CAAC,IAAK,EAAE,GAACX,KAAM;QAC5B;QACAc,KAAK,GAAGhC,CAAC,CAACgB,MAAM,GAAGhB,CAAC,CAACA,CAAC,CAACgB,MAAM,GAAC,CAAC,CAAC,GAAG,CAAC;QACpCiB,MAAM,GAAGjD,IAAI,CAACc,QAAQ,CAACqB,UAAU,CAACa,KAAK,CAAC;QACxCD,GAAG,CAACG,IAAI,CAAClD,IAAI,CAACc,QAAQ,CAAC0B,OAAO,CAACN,KAAK,GAACe,MAAM,GAAG,EAAE,EAAGf,KAAK,GAAGe,MAAM,GAAG,EAAE,GAAIH,KAAK,GAAGC,GAAG,CAACI,GAAG,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC;QAC/F,OAAOJ,GAAG;MACZ,CAAC;MAED;AACF;AACA;MACEK,KAAK,EAAE,SAAAA,CAAS3B,CAAC,EAAC4B,CAAC,EAAE;QACnB,OAAO,CAAC5B,CAAC,CAAC,CAAC,CAAC,GAAC4B,CAAC,CAAC,CAAC,CAAC,EAAC5B,CAAC,CAAC,CAAC,CAAC,GAAC4B,CAAC,CAAC,CAAC,CAAC,EAAC5B,CAAC,CAAC,CAAC,CAAC,GAAC4B,CAAC,CAAC,CAAC,CAAC,EAAC5B,CAAC,CAAC,CAAC,CAAC,GAAC4B,CAAC,CAAC,CAAC,CAAC,CAAC;MAClD,CAAC;MAED;AACF;AACA;AACA;AACA;MACEC,SAAS,EAAE,SAAAA,CAAStC,CAAC,EAAE;QACrB,IAAI6B,CAAC;UAAEU,CAAC;UAAEC,CAAC,GAAG,MAAM;QACpB,KAAKX,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG7B,CAAC,CAACgB,MAAM,EAAE,EAAEa,CAAC,EAAE;UAC7BU,CAAC,GAAGvC,CAAC,CAAC6B,CAAC,CAAC;UACR7B,CAAC,CAAC6B,CAAC,CAAC,GAAIU,CAAC,KAAK,EAAE,GAAMA,CAAC,KAAK,CAAC,GAAIC,CAAE,GAAI,CAACD,CAAC,GAAGC,CAAC,KAAK,CAAE,GAAID,CAAC,IAAI,EAAG;QAClE;QACA,OAAOvC,CAAC;MACV;IACF,CAAC;IACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEA;AACA;AACA;AACA;AACA;AACA;AACA;IACAhB,IAAI,CAACC,MAAM,CAACwD,GAAG,GAAG,UAAUC,GAAG,EAAE;MAC/B,IAAI,CAAC,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;QAC1B,IAAI,CAACC,WAAW,CAAC,CAAC;MACpB;MAEA,IAAIf,CAAC;QAAEgB,CAAC;QAAEC,GAAG;QACXC,MAAM;QAAEC,MAAM;QACdC,IAAI,GAAG,IAAI,CAACN,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAAEO,QAAQ,GAAG,IAAI,CAACP,OAAO,CAAC,CAAC,CAAC;QACrDQ,MAAM,GAAGT,GAAG,CAAC1B,MAAM;QAAEoC,IAAI,GAAG,CAAC;MAE/B,IAAID,MAAM,KAAK,CAAC,IAAIA,MAAM,KAAK,CAAC,IAAIA,MAAM,KAAK,CAAC,EAAE;QAChD,MAAM,IAAInE,IAAI,CAACO,SAAS,CAACI,OAAO,CAAC,sBAAsB,CAAC;MAC1D;MAEA,IAAI,CAAC0D,IAAI,GAAG,CAACN,MAAM,GAAGL,GAAG,CAACtC,KAAK,CAAC,CAAC,CAAC,EAAE4C,MAAM,GAAG,EAAE,CAAC;;MAEhD;MACA,KAAKnB,CAAC,GAAGsB,MAAM,EAAEtB,CAAC,GAAG,CAAC,GAAGsB,MAAM,GAAG,EAAE,EAAEtB,CAAC,EAAE,EAAE;QACzCiB,GAAG,GAAGC,MAAM,CAAClB,CAAC,GAAC,CAAC,CAAC;;QAEjB;QACA,IAAIA,CAAC,GAACsB,MAAM,KAAK,CAAC,IAAKA,MAAM,KAAK,CAAC,IAAItB,CAAC,GAACsB,MAAM,KAAK,CAAE,EAAE;UACtDL,GAAG,GAAGG,IAAI,CAACH,GAAG,KAAG,EAAE,CAAC,IAAE,EAAE,GAAGG,IAAI,CAACH,GAAG,IAAE,EAAE,GAAC,GAAG,CAAC,IAAE,EAAE,GAAGG,IAAI,CAACH,GAAG,IAAE,CAAC,GAAC,GAAG,CAAC,IAAE,CAAC,GAAGG,IAAI,CAACH,GAAG,GAAC,GAAG,CAAC;;UAEtF;UACA,IAAIjB,CAAC,GAACsB,MAAM,KAAK,CAAC,EAAE;YAClBL,GAAG,GAAGA,GAAG,IAAE,CAAC,GAAGA,GAAG,KAAG,EAAE,GAAGM,IAAI,IAAE,EAAE;YAClCA,IAAI,GAAGA,IAAI,IAAE,CAAC,GAAG,CAACA,IAAI,IAAE,CAAC,IAAE,GAAG;UAChC;QACF;QAEAL,MAAM,CAAClB,CAAC,CAAC,GAAGkB,MAAM,CAAClB,CAAC,GAACsB,MAAM,CAAC,GAAGL,GAAG;MACpC;;MAEA;MACA,KAAKD,CAAC,GAAG,CAAC,EAAEhB,CAAC,EAAEgB,CAAC,EAAE,EAAEhB,CAAC,EAAE,EAAE;QACvBiB,GAAG,GAAGC,MAAM,CAACF,CAAC,GAAC,CAAC,GAAGhB,CAAC,GAAGA,CAAC,GAAG,CAAC,CAAC;QAC7B,IAAIA,CAAC,IAAE,CAAC,IAAIgB,CAAC,GAAC,CAAC,EAAE;UACfG,MAAM,CAACH,CAAC,CAAC,GAAGC,GAAG;QACjB,CAAC,MAAM;UACLE,MAAM,CAACH,CAAC,CAAC,GAAGK,QAAQ,CAAC,CAAC,CAAC,CAACD,IAAI,CAACH,GAAG,KAAG,EAAE,CAAO,CAAC,GACjCI,QAAQ,CAAC,CAAC,CAAC,CAACD,IAAI,CAACH,GAAG,IAAE,EAAE,GAAI,GAAG,CAAC,CAAC,GACjCI,QAAQ,CAAC,CAAC,CAAC,CAACD,IAAI,CAACH,GAAG,IAAE,CAAC,GAAK,GAAG,CAAC,CAAC,GACjCI,QAAQ,CAAC,CAAC,CAAC,CAACD,IAAI,CAACH,GAAG,GAAQ,GAAG,CAAC,CAAC;QAC/C;MACF;IACF,CAAC;IAED9D,IAAI,CAACC,MAAM,CAACwD,GAAG,CAACa,SAAS,GAAG;MAC1B;MACA;AACF;AACA;AACA;AACA;;MAEE;AACF;AACA;AACA;AACA;MACEC,OAAO,EAAC,SAAAA,CAAUC,IAAI,EAAE;QAAE,OAAO,IAAI,CAACC,MAAM,CAACD,IAAI,EAAC,CAAC,CAAC;MAAE,CAAC;MAEvD;AACF;AACA;AACA;AACA;MACEE,OAAO,EAAC,SAAAA,CAAUF,IAAI,EAAE;QAAE,OAAO,IAAI,CAACC,MAAM,CAACD,IAAI,EAAC,CAAC,CAAC;MAAE,CAAC;MAEvD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACEb,OAAO,EAAE,CAAC,CAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,CAAC,EAAC,CAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,CAAC,CAAC;MAE5C;AACF;AACA;AACA;AACA;MACEC,WAAW,EAAE,SAAAA,CAAA,EAAY;QACxB,IAAIe,QAAQ,GAAG,IAAI,CAAChB,OAAO,CAAC,CAAC,CAAC;UAAEO,QAAQ,GAAG,IAAI,CAACP,OAAO,CAAC,CAAC,CAAC;UACtDM,IAAI,GAAGU,QAAQ,CAAC,CAAC,CAAC;UAAEC,OAAO,GAAGV,QAAQ,CAAC,CAAC,CAAC;UACzCrB,CAAC;UAAEpB,CAAC;UAAEoD,IAAI;UAAEC,CAAC,GAAC,EAAE;UAAEC,EAAE,GAAC,EAAE;UAAEC,EAAE;UAAEC,EAAE;UAAEC,EAAE;UAAEC,CAAC;UAAEC,IAAI;UAAEC,IAAI;;QAErD;QACD,KAAKxC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,GAAG,EAAEA,CAAC,EAAE,EAAE;UACxBkC,EAAE,CAAC,CAAED,CAAC,CAACjC,CAAC,CAAC,GAAGA,CAAC,IAAE,CAAC,GAAG,CAACA,CAAC,IAAE,CAAC,IAAE,GAAG,IAAGA,CAAC,CAAC,GAACA,CAAC;QACtC;QAEA,KAAKpB,CAAC,GAAGoD,IAAI,GAAG,CAAC,EAAE,CAACZ,IAAI,CAACxC,CAAC,CAAC,EAAEA,CAAC,IAAIuD,EAAE,IAAI,CAAC,EAAEH,IAAI,GAAGE,EAAE,CAACF,IAAI,CAAC,IAAI,CAAC,EAAE;UAC/D;UACAM,CAAC,GAAGN,IAAI,GAAGA,IAAI,IAAE,CAAC,GAAGA,IAAI,IAAE,CAAC,GAAGA,IAAI,IAAE,CAAC,GAAGA,IAAI,IAAE,CAAC;UAChDM,CAAC,GAAGA,CAAC,IAAE,CAAC,GAAGA,CAAC,GAAC,GAAG,GAAG,EAAE;UACrBlB,IAAI,CAACxC,CAAC,CAAC,GAAG0D,CAAC;UACXP,OAAO,CAACO,CAAC,CAAC,GAAG1D,CAAC;;UAEd;UACAyD,EAAE,GAAGJ,CAAC,CAACG,EAAE,GAAGH,CAAC,CAACE,EAAE,GAAGF,CAAC,CAACrD,CAAC,CAAC,CAAC,CAAC;UACzB4D,IAAI,GAAGH,EAAE,GAAC,SAAS,GAAGD,EAAE,GAAC,OAAO,GAAGD,EAAE,GAAC,KAAK,GAAGvD,CAAC,GAAC,SAAS;UACzD2D,IAAI,GAAGN,CAAC,CAACK,CAAC,CAAC,GAAC,KAAK,GAAGA,CAAC,GAAC,SAAS;UAE/B,KAAKtC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;YACtB8B,QAAQ,CAAC9B,CAAC,CAAC,CAACpB,CAAC,CAAC,GAAG2D,IAAI,GAAGA,IAAI,IAAE,EAAE,GAAGA,IAAI,KAAG,CAAC;YAC3ClB,QAAQ,CAACrB,CAAC,CAAC,CAACsC,CAAC,CAAC,GAAGE,IAAI,GAAGA,IAAI,IAAE,EAAE,GAAGA,IAAI,KAAG,CAAC;UAC7C;QACF;;QAEA;QACA,KAAKxC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;UACtB8B,QAAQ,CAAC9B,CAAC,CAAC,GAAG8B,QAAQ,CAAC9B,CAAC,CAAC,CAACzB,KAAK,CAAC,CAAC,CAAC;UAClC8C,QAAQ,CAACrB,CAAC,CAAC,GAAGqB,QAAQ,CAACrB,CAAC,CAAC,CAACzB,KAAK,CAAC,CAAC,CAAC;QACpC;MACD,CAAC;MAED;AACF;AACA;AACA;AACA;AACA;AACA;MACEqD,MAAM,EAAC,SAAAA,CAAUa,KAAK,EAAEC,GAAG,EAAE;QAC3B,IAAID,KAAK,CAACtD,MAAM,KAAK,CAAC,EAAE;UACtB,MAAM,IAAIhC,IAAI,CAACO,SAAS,CAACI,OAAO,CAAC,wBAAwB,CAAC;QAC5D;QAEA,IAAI+C,GAAG,GAAG,IAAI,CAACW,IAAI,CAACkB,GAAG,CAAC;UACpB;UACAvE,CAAC,GAAGsE,KAAK,CAAC,CAAC,CAAC,GAAa5B,GAAG,CAAC,CAAC,CAAC;UAC/Bd,CAAC,GAAG0C,KAAK,CAACC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG7B,GAAG,CAAC,CAAC,CAAC;UAC/B8B,CAAC,GAAGF,KAAK,CAAC,CAAC,CAAC,GAAa5B,GAAG,CAAC,CAAC,CAAC;UAC/BoB,CAAC,GAAGQ,KAAK,CAACC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG7B,GAAG,CAAC,CAAC,CAAC;UAC/B3B,EAAE;UAAE0D,EAAE;UAAEC,EAAE;UAEVC,YAAY,GAAGjC,GAAG,CAAC1B,MAAM,GAAC,CAAC,GAAG,CAAC;UAC/Ba,CAAC;UACD+C,MAAM,GAAG,CAAC;UACV7C,GAAG,GAAG,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;UACf8C,KAAK,GAAG,IAAI,CAAClC,OAAO,CAAC4B,GAAG,CAAC;UAEzB;UACAO,EAAE,GAAMD,KAAK,CAAC,CAAC,CAAC;UAChBE,EAAE,GAAMF,KAAK,CAAC,CAAC,CAAC;UAChBG,EAAE,GAAMH,KAAK,CAAC,CAAC,CAAC;UAChBI,EAAE,GAAMJ,KAAK,CAAC,CAAC,CAAC;UAChB5B,IAAI,GAAI4B,KAAK,CAAC,CAAC,CAAC;;QAEpB;QACA,KAAKhD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG8C,YAAY,EAAE9C,CAAC,EAAE,EAAE;UACjCd,EAAE,GAAG+D,EAAE,CAAC9E,CAAC,KAAG,EAAE,CAAC,GAAG+E,EAAE,CAACnD,CAAC,IAAE,EAAE,GAAG,GAAG,CAAC,GAAGoD,EAAE,CAACR,CAAC,IAAE,CAAC,GAAG,GAAG,CAAC,GAAGS,EAAE,CAACnB,CAAC,GAAG,GAAG,CAAC,GAAGpB,GAAG,CAACkC,MAAM,CAAC;UAC9EH,EAAE,GAAGK,EAAE,CAAClD,CAAC,KAAG,EAAE,CAAC,GAAGmD,EAAE,CAACP,CAAC,IAAE,EAAE,GAAG,GAAG,CAAC,GAAGQ,EAAE,CAAClB,CAAC,IAAE,CAAC,GAAG,GAAG,CAAC,GAAGmB,EAAE,CAACjF,CAAC,GAAG,GAAG,CAAC,GAAG0C,GAAG,CAACkC,MAAM,GAAG,CAAC,CAAC;UAClFF,EAAE,GAAGI,EAAE,CAACN,CAAC,KAAG,EAAE,CAAC,GAAGO,EAAE,CAACjB,CAAC,IAAE,EAAE,GAAG,GAAG,CAAC,GAAGkB,EAAE,CAAChF,CAAC,IAAE,CAAC,GAAG,GAAG,CAAC,GAAGiF,EAAE,CAACrD,CAAC,GAAG,GAAG,CAAC,GAAGc,GAAG,CAACkC,MAAM,GAAG,CAAC,CAAC;UAClFd,CAAC,GAAIgB,EAAE,CAAChB,CAAC,KAAG,EAAE,CAAC,GAAGiB,EAAE,CAAC/E,CAAC,IAAE,EAAE,GAAG,GAAG,CAAC,GAAGgF,EAAE,CAACpD,CAAC,IAAE,CAAC,GAAG,GAAG,CAAC,GAAGqD,EAAE,CAACT,CAAC,GAAG,GAAG,CAAC,GAAG9B,GAAG,CAACkC,MAAM,GAAG,CAAC,CAAC;UAClFA,MAAM,IAAI,CAAC;UACX5E,CAAC,GAACe,EAAE;UAAEa,CAAC,GAAC6C,EAAE;UAAED,CAAC,GAACE,EAAE;QAClB;;QAEA;QACA,KAAK7C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;UACtBE,GAAG,CAACwC,GAAG,GAAG,CAAC,GAAC,CAAC1C,CAAC,GAAGA,CAAC,CAAC,GACjBoB,IAAI,CAACjD,CAAC,KAAG,EAAE,CAAO,IAAE,EAAE,GACtBiD,IAAI,CAACrB,CAAC,IAAE,EAAE,GAAI,GAAG,CAAC,IAAE,EAAE,GACtBqB,IAAI,CAACuB,CAAC,IAAE,CAAC,GAAK,GAAG,CAAC,IAAE,CAAC,GACrBvB,IAAI,CAACa,CAAC,GAAQ,GAAG,CAAC,GAClBpB,GAAG,CAACkC,MAAM,EAAE,CAAC;UACf7D,EAAE,GAACf,CAAC;UAAEA,CAAC,GAAC4B,CAAC;UAAEA,CAAC,GAAC4C,CAAC;UAAEA,CAAC,GAACV,CAAC;UAAEA,CAAC,GAAC/C,EAAE;QAC3B;QAEA,OAAOgB,GAAG;MACZ;IACF,CAAC;;IAED;AACA;AACA;AACA;IACA/C,IAAI,CAACkG,EAAE,GAAG,UAASC,EAAE,EAAE;MACrB,IAAI,CAACC,QAAQ,CAACD,EAAE,CAAC;IACnB,CAAC;IAEDnG,IAAI,CAACkG,EAAE,CAAC5B,SAAS,GAAG;MAClB+B,KAAK,EAAE,EAAE;MACTC,MAAM,EAAE,CAAC;MACTC,MAAM,EAAEvG,IAAI,CAACkG,EAAE;MAEfM,IAAI,EAAE,SAAAA,CAAA,EAAW;QACf,OAAO,IAAI,IAAI,CAACD,MAAM,CAAC,IAAI,CAAC;MAC9B,CAAC;MAED;AACF;AACA;MACEH,QAAQ,EAAE,SAAAA,CAASD,EAAE,EAAE;QACrB,IAAItD,CAAC,GAAC,CAAC;UAAE4D,CAAC;QACV,QAAO,OAAON,EAAE;UAChB,KAAK,QAAQ;YACX,IAAI,CAACO,KAAK,GAAGP,EAAE,CAACO,KAAK,CAACtF,KAAK,CAAC,CAAC,CAAC;YAC9B;UAEF,KAAK,QAAQ;YACX,IAAI,CAACsF,KAAK,GAAG,CAACP,EAAE,CAAC;YACjB,IAAI,CAACQ,SAAS,CAAC,CAAC;YAChB;UAEF,KAAK,QAAQ;YACXR,EAAE,GAAGA,EAAE,CAACS,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;YAC1B,IAAI,CAACF,KAAK,GAAG,EAAE;YACf;YACAD,CAAC,GAAG,IAAI,CAACJ,KAAK,GAAG,CAAC;YAClB,KAAKxD,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAGsD,EAAE,CAACnE,MAAM,EAAEa,CAAC,IAAE4D,CAAC,EAAE;cAC7B,IAAI,CAACC,KAAK,CAACxD,IAAI,CAAC2D,QAAQ,CAACV,EAAE,CAACW,SAAS,CAACnF,IAAI,CAACoF,GAAG,CAACZ,EAAE,CAACnE,MAAM,GAAGa,CAAC,GAAG4D,CAAC,EAAE,CAAC,CAAC,EAAEN,EAAE,CAACnE,MAAM,GAAGa,CAAC,CAAC,EAAC,EAAE,CAAC,CAAC;YAC3F;YACA;UAEF;YACE,IAAI,CAAC6D,KAAK,GAAG,CAAC,CAAC,CAAC;QAClB;QACA,OAAO,IAAI;MACb,CAAC;MAED;AACF;AACA;AACA;MACEM,MAAM,EAAE,SAAAA,CAASC,IAAI,EAAE;QACrB,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;UAAEA,IAAI,GAAG,IAAI,IAAI,CAACV,MAAM,CAACU,IAAI,CAAC;QAAE;QAC9D,IAAIC,UAAU,GAAG,CAAC;UAAErE,CAAC;QACrB,IAAI,CAACsE,UAAU,CAAC,CAAC;QACjBF,IAAI,CAACE,UAAU,CAAC,CAAC;QACjB,KAAKtE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC6D,KAAK,CAAC1E,MAAM,IAAIa,CAAC,GAAGoE,IAAI,CAACP,KAAK,CAAC1E,MAAM,EAAEa,CAAC,EAAE,EAAE;UAC/DqE,UAAU,IAAI,IAAI,CAACE,OAAO,CAACvE,CAAC,CAAC,GAAGoE,IAAI,CAACG,OAAO,CAACvE,CAAC,CAAC;QACjD;QACA,OAAQqE,UAAU,KAAK,CAAC;MAC1B,CAAC;MAED;AACF;AACA;MACEE,OAAO,EAAE,SAAAA,CAASvE,CAAC,EAAE;QACnB,OAAQA,CAAC,IAAI,IAAI,CAAC6D,KAAK,CAAC1E,MAAM,GAAI,CAAC,GAAG,IAAI,CAAC0E,KAAK,CAAC7D,CAAC,CAAC;MACrD,CAAC;MAED;AACF;AACA;AACA;MACEwE,aAAa,EAAE,SAAAA,CAASJ,IAAI,EAAE;QAC5B,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;UAAEA,IAAI,GAAG,IAAI,IAAI,CAACV,MAAM,CAACU,IAAI,CAAC;QAAE;QAC9D,IAAIK,IAAI,GAAG,CAAC;UAAEC,OAAO,GAAG,CAAC;UAAE1E,CAAC;UAAE7B,CAAC;UAAE4B,CAAC;QAClCC,CAAC,GAAGlB,IAAI,CAACoF,GAAG,CAAC,IAAI,CAACL,KAAK,CAAC1E,MAAM,EAAEiF,IAAI,CAACP,KAAK,CAAC1E,MAAM,CAAC,GAAG,CAAC;QACtD,OAAOa,CAAC,IAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;UACjB7B,CAAC,GAAG,IAAI,CAACoG,OAAO,CAACvE,CAAC,CAAC;UACnBD,CAAC,GAAGqE,IAAI,CAACG,OAAO,CAACvE,CAAC,CAAC;UACnB0E,OAAO,IAAK3E,CAAC,GAAG5B,CAAC,GAAI,CAACsG,IAAI;UAC1BA,IAAI,IAAKtG,CAAC,GAAG4B,CAAC,GAAI,CAAC2E,OAAO;QAC5B;QACA,OAAO,CAACA,OAAO,GAAG,CAACD,IAAI,MAAM,EAAE;MACjC,CAAC;MAED;AACF;AACA;MACE5G,QAAQ,EAAE,SAAAA,CAAA,EAAW;QACnB,IAAI,CAACyG,UAAU,CAAC,CAAC;QACjB,IAAIpE,GAAG,GAAC,EAAE;UAAEF,CAAC;UAAEsC,CAAC;UAAE9C,CAAC,GAAG,IAAI,CAACqE,KAAK;QAChC,KAAK7D,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC6D,KAAK,CAAC1E,MAAM,EAAEa,CAAC,EAAE,EAAE;UACpCsC,CAAC,GAAG9C,CAAC,CAACQ,CAAC,CAAC,CAACnC,QAAQ,CAAC,EAAE,CAAC;UACrB,OAAOmC,CAAC,GAAG,IAAI,CAAC6D,KAAK,CAAC1E,MAAM,GAAG,CAAC,IAAImD,CAAC,CAACnD,MAAM,GAAG,CAAC,EAAE;YAChDmD,CAAC,GAAG,GAAG,GAAGA,CAAC;UACb;UACApC,GAAG,GAAGoC,CAAC,GAAGpC,GAAG;QACf;QACA,OAAO,IAAI,GAACA,GAAG;MACjB,CAAC;MAED;MACAyE,IAAI,EAAE,SAAAA,CAASP,IAAI,EAAE;QACnB,IAAI,OAAOA,IAAK,KAAK,QAAQ,EAAE;UAAEA,IAAI,GAAG,IAAI,IAAI,CAACV,MAAM,CAACU,IAAI,CAAC;QAAE;QAC/D,IAAIpE,CAAC;UAAER,CAAC,GAAC,IAAI,CAACqE,KAAK;UAAEe,EAAE,GAACR,IAAI,CAACP,KAAK;QAClC,KAAK7D,CAAC,GAACR,CAAC,CAACL,MAAM,EAAEa,CAAC,GAAC4E,EAAE,CAACzF,MAAM,EAAEa,CAAC,EAAE,EAAE;UACjCR,CAAC,CAACQ,CAAC,CAAC,GAAG,CAAC;QACV;QACA,KAAKA,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC4E,EAAE,CAACzF,MAAM,EAAEa,CAAC,EAAE,EAAE;UAC1BR,CAAC,CAACQ,CAAC,CAAC,IAAI4E,EAAE,CAAC5E,CAAC,CAAC;QACf;QACA,OAAO,IAAI;MACb,CAAC;MAED;MACA6E,OAAO,EAAE,SAAAA,CAAA,EAAW;QAClB,IAAI7E,CAAC;UAAEC,KAAK,GAAC,CAAC;UAAEgB,GAAG;UAAE6D,CAAC,GAAC,IAAI,CAACtB,KAAK;UAAE7C,CAAC,GAAC,IAAI,CAACoE,SAAS;UAAEvF,CAAC,GAAC,IAAI,CAACqE,KAAK;QACjE,KAAK7D,CAAC,GAAC,CAAC,EAAEA,CAAC,GAACR,CAAC,CAACL,MAAM,EAAEa,CAAC,EAAE,EAAE;UACzBiB,GAAG,GAAGzB,CAAC,CAACQ,CAAC,CAAC;UACViB,GAAG,GAAGA,GAAG,GAACA,GAAG,GAAChB,KAAK;UACnBT,CAAC,CAACQ,CAAC,CAAC,GAAGiB,GAAG,GAAGN,CAAC;UACdV,KAAK,GAAGgB,GAAG,IAAI6D,CAAC;QAClB;QACA,IAAI7E,KAAK,EAAE;UACTT,CAAC,CAACa,IAAI,CAACJ,KAAK,CAAC;QACf;QACA,OAAO,IAAI;MACb,CAAC;MAED;MACA+E,MAAM,EAAE,SAAAA,CAAA,EAAW;QACjB,IAAIhF,CAAC;UAAEC,KAAK,GAAC,CAAC;UAAEgB,GAAG;UAAE6D,CAAC,GAAC,IAAI,CAACtB,KAAK;UAAEhE,CAAC,GAAC,IAAI,CAACqE,KAAK;QAC/C,KAAK7D,CAAC,GAACR,CAAC,CAACL,MAAM,GAAC,CAAC,EAAEa,CAAC,IAAE,CAAC,EAAEA,CAAC,EAAE,EAAE;UAC5BiB,GAAG,GAAGzB,CAAC,CAACQ,CAAC,CAAC;UACVR,CAAC,CAACQ,CAAC,CAAC,GAAIiB,GAAG,GAAChB,KAAK,IAAG,CAAC;UACrBA,KAAK,GAAG,CAACgB,GAAG,GAAC,CAAC,KAAK6D,CAAC;QACtB;QACA,IAAI,CAACtF,CAAC,CAACA,CAAC,CAACL,MAAM,GAAC,CAAC,CAAC,EAAE;UAClBK,CAAC,CAACc,GAAG,CAAC,CAAC;QACT;QACA,OAAO,IAAI;MACb,CAAC;MAED;MACA2E,IAAI,EAAE,SAAAA,CAASb,IAAI,EAAE;QACnB,IAAI,OAAOA,IAAK,KAAK,QAAQ,EAAE;UAAEA,IAAI,GAAG,IAAI,IAAI,CAACV,MAAM,CAACU,IAAI,CAAC;QAAE;QAC/D,IAAIpE,CAAC;UAAER,CAAC,GAAC,IAAI,CAACqE,KAAK;UAAEe,EAAE,GAACR,IAAI,CAACP,KAAK;QAClC,KAAK7D,CAAC,GAACR,CAAC,CAACL,MAAM,EAAEa,CAAC,GAAC4E,EAAE,CAACzF,MAAM,EAAEa,CAAC,EAAE,EAAE;UACjCR,CAAC,CAACQ,CAAC,CAAC,GAAG,CAAC;QACV;QACA,KAAKA,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC4E,EAAE,CAACzF,MAAM,EAAEa,CAAC,EAAE,EAAE;UAC1BR,CAAC,CAACQ,CAAC,CAAC,IAAI4E,EAAE,CAAC5E,CAAC,CAAC;QACf;QACA,OAAO,IAAI;MACb,CAAC;MAEDkF,GAAG,EAAE,SAAAA,CAASd,IAAI,EAAE;QAClB,IAAIe,GAAG,GAAG,CAAC,IAAI,CAACX,aAAa,CAAC,IAAIrH,IAAI,CAACkG,EAAE,CAAC,CAAC,CAAC,CAAC;QAE7Ce,IAAI,GAAG,IAAIjH,IAAI,CAACkG,EAAE,CAACe,IAAI,CAAC,CAACN,SAAS,CAAC,CAAC,CAAC,CAAC;QACtC,IAAI5D,GAAG,GAAG,IAAI/C,IAAI,CAACkG,EAAE,CAAC,IAAI,CAAC,CAACS,SAAS,CAAC,CAAC;UAAEsB,EAAE,GAAC,CAAC;QAE7C,IAAID,GAAG,EAAEjF,GAAG,GAAI,IAAI/C,IAAI,CAACkG,EAAE,CAAC,CAAC,CAAC,CAAE4B,IAAI,CAAC/E,GAAG,CAAC,CAAC4D,SAAS,CAAC,CAAC;QAErD,OAAO5D,GAAG,CAACsE,aAAa,CAACJ,IAAI,CAAC,EAAEgB,EAAE,EAAE,EAAE;UACpChB,IAAI,CAACS,OAAO,CAAC,CAAC;QAChB;QAEA,IAAIM,GAAG,EAAEjF,GAAG,GAAGkE,IAAI,CAACiB,GAAG,CAACnF,GAAG,CAAC,CAAC4D,SAAS,CAAC,CAAC;QAExC,OAAOsB,EAAE,GAAG,CAAC,EAAEA,EAAE,EAAE,EAAE;UACnBhB,IAAI,CAACY,MAAM,CAAC,CAAC;UACb,IAAI9E,GAAG,CAACsE,aAAa,CAACJ,IAAI,CAAC,EAAE;YAC3BlE,GAAG,CAAC+E,IAAI,CAACb,IAAI,CAAC,CAACN,SAAS,CAAC,CAAC;UAC5B;QACF;QACA,OAAO5D,GAAG,CAACoF,IAAI,CAAC,CAAC;MACnB,CAAC;MAED;MACAC,UAAU,EAAE,SAAAA,CAASC,CAAC,EAAE;QACtB,IAAIrH,CAAC,GAAG,IAAIhB,IAAI,CAACkG,EAAE,CAAC,CAAC,CAAC;UAAEtD,CAAC,GAAG,IAAI5C,IAAI,CAACkG,EAAE,CAAC,CAAC,CAAC;UAAEzE,CAAC,GAAG,IAAIzB,IAAI,CAACkG,EAAE,CAAC,IAAI,CAAC;UAAE7C,CAAC,GAAG,IAAIrD,IAAI,CAACkG,EAAE,CAACmC,CAAC,CAAC;UAAEvE,GAAG;UAAEjB,CAAC;UAAEyF,EAAE,GAAC,CAAC;QAEnG,IAAI,EAAED,CAAC,CAAC3B,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE;UACrB,MAAO,IAAI1G,IAAI,CAACO,SAAS,CAACI,OAAO,CAAC,2BAA2B,CAAC;QAChE;;QAEA;QACA,GAAG;UACD,IAAIc,CAAC,CAACiF,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE;YAClB,IAAI,CAACjF,CAAC,CAAC4F,aAAa,CAAChE,CAAC,CAAC,EAAE;cACvB;cACAS,GAAG,GAAGrC,CAAC;cAAEA,CAAC,GAAG4B,CAAC;cAAEA,CAAC,GAAGS,GAAG;cACvBA,GAAG,GAAG9C,CAAC;cAAEA,CAAC,GAAG4B,CAAC;cAAEA,CAAC,GAAGkB,GAAG;YACzB;YACArC,CAAC,CAACqG,IAAI,CAACzE,CAAC,CAAC;YACT5B,CAAC,CAACkF,SAAS,CAAC,CAAC;YAEb,IAAI,CAAC3F,CAAC,CAACqG,aAAa,CAACzE,CAAC,CAAC,EAAE;cACvB5B,CAAC,CAACwG,IAAI,CAACa,CAAC,CAAC;YACX;YACArH,CAAC,CAAC8G,IAAI,CAAClF,CAAC,CAAC;UACX;;UAEA;UACAnB,CAAC,CAACoG,MAAM,CAAC,CAAC;UACV,IAAI7G,CAAC,CAAC0F,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE;YAClB1F,CAAC,CAACwG,IAAI,CAACa,CAAC,CAAC;UACX;UACArH,CAAC,CAAC2F,SAAS,CAAC,CAAC;UACb3F,CAAC,CAAC6G,MAAM,CAAC,CAAC;;UAEV;UACA,KAAKhF,CAAC,GAACyF,EAAE,GAAC,CAAC,EAAEzF,CAAC,GAACpB,CAAC,CAACiF,KAAK,CAAC1E,MAAM,EAAEa,CAAC,EAAE,EAAE;YAClCyF,EAAE,IAAI7G,CAAC,CAACiF,KAAK,CAAC7D,CAAC,CAAC;UAClB;QACF,CAAC,QAAOyF,EAAE;QAEV,IAAI,CAACjF,CAAC,CAAC2D,MAAM,CAAC,CAAC,CAAC,EAAE;UAChB,MAAO,IAAIhH,IAAI,CAACO,SAAS,CAACI,OAAO,CAAC,8CAA8C,CAAC;QACnF;QAEA,OAAOiC,CAAC;MACV,CAAC;MAED;MACA2F,GAAG,EAAE,SAAAA,CAAStB,IAAI,EAAE;QAClB,OAAO,IAAI,CAACT,IAAI,CAAC,CAAC,CAACgB,IAAI,CAACP,IAAI,CAAC;MAC/B,CAAC;MAED;MACAiB,GAAG,EAAE,SAAAA,CAASjB,IAAI,EAAE;QAClB,OAAO,IAAI,CAACT,IAAI,CAAC,CAAC,CAACsB,IAAI,CAACb,IAAI,CAAC;MAC/B,CAAC;MAED;MACAuB,GAAG,EAAE,SAAAA,CAASvB,IAAI,EAAE;QAClB,IAAI,OAAOA,IAAK,KAAK,QAAQ,EAAE;UAAEA,IAAI,GAAG,IAAI,IAAI,CAACV,MAAM,CAACU,IAAI,CAAC;QAAE;QAC/D,IAAIpE,CAAC;UAAEgB,CAAC;UAAE7C,CAAC,GAAG,IAAI,CAAC0F,KAAK;UAAE9D,CAAC,GAAGqE,IAAI,CAACP,KAAK;UAAE+B,EAAE,GAAGzH,CAAC,CAACgB,MAAM;UAAE0G,EAAE,GAAG9F,CAAC,CAACZ,MAAM;UAAEe,GAAG,GAAG,IAAI,IAAI,CAACwD,MAAM,CAAC,CAAC;UAAEf,CAAC,GAAGzC,GAAG,CAAC2D,KAAK;UAAEiC,EAAE;UAAEC,EAAE,GAAC,IAAI,CAACtC,MAAM;QAElI,KAAKzD,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC6D,KAAK,CAAC1E,MAAM,GAAGiF,IAAI,CAACP,KAAK,CAAC1E,MAAM,GAAG,CAAC,EAAEa,CAAC,EAAE,EAAE;UAC5D2C,CAAC,CAAC3C,CAAC,CAAC,GAAG,CAAC;QACV;QACA,KAAKA,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC4F,EAAE,EAAE5F,CAAC,EAAE,EAAE;UACnB8F,EAAE,GAAG3H,CAAC,CAAC6B,CAAC,CAAC;UACT,KAAKgB,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC6E,EAAE,EAAE7E,CAAC,EAAE,EAAE;YACnB2B,CAAC,CAAC3C,CAAC,GAACgB,CAAC,CAAC,IAAI8E,EAAE,GAAG/F,CAAC,CAACiB,CAAC,CAAC;UACrB;UAEA,IAAI,CAAC,GAAE+E,EAAE,EAAE;YACTA,EAAE,GAAG,IAAI,CAACtC,MAAM;YAChBvD,GAAG,CAAC8F,UAAU,CAAC,CAAC;UAClB;QACF;QACA,OAAO9F,GAAG,CAAC8F,UAAU,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC;MAClC,CAAC;MAED;MACAC,MAAM,EAAE,SAAAA,CAAA,EAAW;QACjB,OAAO,IAAI,CAACP,GAAG,CAAC,IAAI,CAAC;MACvB,CAAC;MAED;MACAQ,KAAK,EAAE,SAAAA,CAAS3G,CAAC,EAAE;QACjBA,CAAC,GAAG,IAAIrC,IAAI,CAACkG,EAAE,CAAC7D,CAAC,CAAC,CAACsE,SAAS,CAAC,CAAC,CAACwB,IAAI,CAAC,CAAC,CAACzB,KAAK;QAC3C,IAAI7D,CAAC;UAAEgB,CAAC;UAAEd,GAAG,GAAG,IAAI,IAAI,CAACwD,MAAM,CAAC,CAAC,CAAC;UAAE0C,GAAG,GAAG,IAAI;QAE9C,KAAKpG,CAAC,GAAC,CAAC,EAAEA,CAAC,GAACR,CAAC,CAACL,MAAM,EAAEa,CAAC,EAAE,EAAE;UACzB,KAAKgB,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC,IAAI,CAACwC,KAAK,EAAExC,CAAC,EAAE,EAAE;YAC3B,IAAIxB,CAAC,CAACQ,CAAC,CAAC,GAAI,CAAC,IAAEgB,CAAE,EAAE;cAAEd,GAAG,GAAGA,GAAG,CAACyF,GAAG,CAACS,GAAG,CAAC;YAAE;YACzC,IAAIpG,CAAC,IAAKR,CAAC,CAACL,MAAM,GAAG,CAAE,IAAIK,CAAC,CAACQ,CAAC,CAAC,IAAGgB,CAAC,GAAG,CAAE,IAAI,CAAC,EAAE;cAAE;YAAO;YAExDoF,GAAG,GAAGA,GAAG,CAACF,MAAM,CAAC,CAAC;UACpB;QACF;QAEA,OAAOhG,GAAG;MACZ,CAAC;MAED;MACAmG,MAAM,EAAE,SAAAA,CAASjC,IAAI,EAAEkC,CAAC,EAAE;QACxB,OAAO,IAAI,CAACpB,GAAG,CAACoB,CAAC,CAAC,CAACX,GAAG,CAACvB,IAAI,CAACc,GAAG,CAACoB,CAAC,CAAC,CAAC,CAACpB,GAAG,CAACoB,CAAC,CAAC;MAC5C,CAAC;MAED;MACAC,QAAQ,EAAE,SAAAA,CAAS3H,CAAC,EAAE0H,CAAC,EAAE;QACvB1H,CAAC,GAAG,IAAIzB,IAAI,CAACkG,EAAE,CAACzE,CAAC,CAAC;QAClB0H,CAAC,GAAG,IAAInJ,IAAI,CAACkG,EAAE,CAACiD,CAAC,CAAC;;QAElB;QACA,IAAI,CAACA,CAAC,CAACzC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;UACzB,IAAI2C,OAAO,GAAG,IAAI,CAACC,YAAY,CAAC7H,CAAC,EAAE0H,CAAC,CAAC;UAErC,IAAIE,OAAO,IAAI,KAAK,EAAE;YAAE,OAAOA,OAAO;UAAE,CAAC,CAAC;QAC5C;QAEA,IAAIxG,CAAC;UAAEgB,CAAC;UAAExB,CAAC,GAAGZ,CAAC,CAACkF,SAAS,CAAC,CAAC,CAACwB,IAAI,CAAC,CAAC,CAACzB,KAAK;UAAE3D,GAAG,GAAG,IAAI,IAAI,CAACwD,MAAM,CAAC,CAAC,CAAC;UAAE0C,GAAG,GAAG,IAAI;QAE9E,KAAKpG,CAAC,GAAC,CAAC,EAAEA,CAAC,GAACR,CAAC,CAACL,MAAM,EAAEa,CAAC,EAAE,EAAE;UACzB,KAAKgB,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC,IAAI,CAACwC,KAAK,EAAExC,CAAC,EAAE,EAAE;YAC3B,IAAIxB,CAAC,CAACQ,CAAC,CAAC,GAAI,CAAC,IAAEgB,CAAE,EAAE;cAAEd,GAAG,GAAGA,GAAG,CAACmG,MAAM,CAACD,GAAG,EAAEE,CAAC,CAAC;YAAE;YAC/C,IAAItG,CAAC,IAAKR,CAAC,CAACL,MAAM,GAAG,CAAE,IAAIK,CAAC,CAACQ,CAAC,CAAC,IAAGgB,CAAC,GAAG,CAAE,IAAI,CAAC,EAAE;cAAE;YAAO;YAExDoF,GAAG,GAAGA,GAAG,CAACC,MAAM,CAACD,GAAG,EAAEE,CAAC,CAAC;UAC1B;QACF;QAEA,OAAOpG,GAAG;MACZ,CAAC;MAED;MACAuG,YAAY,EAAE,SAAAA,CAAS7H,CAAC,EAAE0H,CAAC,EAAE;QAC3B1H,CAAC,GAAG,IAAIzB,IAAI,CAACkG,EAAE,CAACzE,CAAC,CAAC,CAACkF,SAAS,CAAC,CAAC,CAACwB,IAAI,CAAC,CAAC;QACrCgB,CAAC,GAAG,IAAInJ,IAAI,CAACkG,EAAE,CAACiD,CAAC,CAAC;QAElB,IAAItG,CAAC;UAAEgB,CAAC;UACNwC,KAAK,GAAG,IAAI,CAACA,KAAK;UAClBtD,GAAG,GAAG,IAAI,IAAI,CAACwD,MAAM,CAAC,CAAC,CAAC;UACxB0C,GAAG,GAAG,IAAI,CAACzC,IAAI,CAAC,CAAC;;QAEnB;QACA,IAAI+C,CAAC;UAAEpE,CAAC;UAAEqE,IAAI;UAAEC,OAAO,GAAGhI,CAAC,CAACW,SAAS,CAAC,CAAC;QAEvCmH,CAAC,GAAG,IAAIvJ,IAAI,CAACkG,EAAE,CAAC;UACdQ,KAAK,EAAEyC,CAAC,CAAC3C,IAAI,CAAC,CAAC,CAACG,SAAS,CAAC,CAAC,CAACwB,IAAI,CAAC,CAAC,CAACzB,KAAK,CAACgD,GAAG,CAAC,YAAW;YAAE,OAAO,CAAC;UAAE,CAAC;QACvE,CAAC,CAAC;QAEF,KAAKvE,CAAC,GAAG,IAAI,CAACkB,KAAK,EAAElB,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;UAC/B,IAAI,CAAEgE,CAAC,CAACzC,KAAK,CAACyC,CAAC,CAACzC,KAAK,CAAC1E,MAAM,GAAG,CAAC,CAAC,IAAImD,CAAC,GAAI,CAAC,KAAK,CAAC,EAAE;YACjDoE,CAAC,CAAC7C,KAAK,CAAC6C,CAAC,CAAC7C,KAAK,CAAC1E,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC,IAAImD,CAAC;YACpC;UACF;QACF;;QAEA;QACA,IAAIsE,OAAO,IAAI,CAAC,EAAE;UAChB,OAAO,IAAI;QACb,CAAC,MAAM,IAAIA,OAAO,GAAG,EAAE,EAAG;UACxBD,IAAI,GAAG,CAAC;QACV,CAAC,MAAM,IAAIC,OAAO,GAAG,EAAE,EAAG;UACxBD,IAAI,GAAG,CAAC;QACV,CAAC,MAAM,IAAIC,OAAO,GAAG,GAAG,EAAE;UACxBD,IAAI,GAAG,CAAC;QACV,CAAC,MAAM,IAAIC,OAAO,GAAG,GAAG,EAAE;UACxBD,IAAI,GAAG,CAAC;QACV,CAAC,MAAM;UACLA,IAAI,GAAG,CAAC;QACV;;QAEA;QACA,IAAIG,EAAE,GAAGJ,CAAC,CAAC/C,IAAI,CAAC,CAAC;UAAEoD,EAAE,GAAGT,CAAC,CAAC3C,IAAI,CAAC,CAAC;UAAEqD,EAAE,GAAG,IAAI7J,IAAI,CAACkG,EAAE,CAAC,CAAC,CAAC;UAAE4D,EAAE,GAAG,IAAI9J,IAAI,CAACkG,EAAE,CAAC,CAAC,CAAC;UAAE6D,EAAE,GAAGR,CAAC,CAAC/C,IAAI,CAAC,CAAC;QAEzF,OAAOuD,EAAE,CAAC1C,aAAa,CAAC,CAAC,CAAC,EAAE;UAC1B0C,EAAE,CAAClC,MAAM,CAAC,CAAC;UAEX,IAAI,CAACgC,EAAE,CAACnD,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;YAC1BmD,EAAE,CAAChC,MAAM,CAAC,CAAC;YACXiC,EAAE,CAACjC,MAAM,CAAC,CAAC;UACb,CAAC,MAAM;YACLgC,EAAE,CAACrC,IAAI,CAACoC,EAAE,CAAC;YACXC,EAAE,CAAChC,MAAM,CAAC,CAAC;YAEXiC,EAAE,CAACjC,MAAM,CAAC,CAAC;YACXiC,EAAE,CAACtC,IAAI,CAACmC,EAAE,CAAC;UACb;QACF;QAEAE,EAAE,GAAGA,EAAE,CAAClD,SAAS,CAAC,CAAC;QACnBmD,EAAE,GAAGA,EAAE,CAACnD,SAAS,CAAC,CAAC;QAEnBgD,EAAE,CAACjC,OAAO,CAAC,CAAC;QACZ,IAAIsC,EAAE,GAAGL,EAAE,CAACT,MAAM,CAACS,EAAE,EAAER,CAAC,CAAC;;QAEzB;QACA;QACA,IAAI,CAACQ,EAAE,CAACnB,GAAG,CAACqB,EAAE,CAAC,CAAC3B,GAAG,CAACiB,CAAC,CAACX,GAAG,CAACsB,EAAE,CAAC,CAAC,CAAC9C,MAAM,CAAC,CAAC,CAAC,EAAE;UACxC,OAAO,KAAK;QACd;QAEA,IAAIiD,MAAM,GAAG,SAAAA,CAASzE,CAAC,EAAE;YAAE,OAAO0E,OAAO,CAAC1E,CAAC,EAAEwE,EAAE,CAAC;UAAE,CAAC;UACnDE,OAAO,GAAG,SAAAA,CAASlJ,CAAC,EAAE4B,CAAC,EAAE;YACvB;YACA,IAAI6D,CAAC;cAAE3D,KAAK;cAAEqH,EAAE;cAAEC,KAAK;cAAEC,KAAK;cAAEC,IAAI,GAAG,CAAC,CAAC,IAAKnF,CAAC,GAAG,CAAE,IAAI,CAAC;YAEzDgF,EAAE,GAAGnJ,CAAC,CAACwH,GAAG,CAAC5F,CAAC,CAAC;YAEbwH,KAAK,GAAGD,EAAE,CAAC3B,GAAG,CAACsB,EAAE,CAAC;YAClBM,KAAK,CAAC1D,KAAK,GAAG0D,KAAK,CAAC1D,KAAK,CAACtF,KAAK,CAAC,CAAC,EAAEmI,CAAC,CAAC7C,KAAK,CAAC1E,MAAM,CAAC;YAElD,IAAIoI,KAAK,CAAC1D,KAAK,CAAC1E,MAAM,IAAIuH,CAAC,CAAC7C,KAAK,CAAC1E,MAAM,EAAE;cACxCoI,KAAK,CAAC1D,KAAK,CAAC6C,CAAC,CAAC7C,KAAK,CAAC1E,MAAM,GAAG,CAAC,CAAC,IAAIsI,IAAI;YACzC;YAEAF,KAAK,GAAGA,KAAK,CAAC5B,GAAG,CAACW,CAAC,CAAC;YAEpBkB,KAAK,GAAGF,EAAE,CAAC5B,GAAG,CAAC6B,KAAK,CAAC,CAACzD,SAAS,CAAC,CAAC,CAACwB,IAAI,CAAC,CAAC;YACxCkC,KAAK,CAAC3D,KAAK,GAAG2D,KAAK,CAAC3D,KAAK,CAACtF,KAAK,CAACmI,CAAC,CAAC7C,KAAK,CAAC1E,MAAM,GAAG,CAAC,CAAC;;YAEnD;YACA,KAAKyE,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAG4D,KAAK,CAAC3D,KAAK,CAAC1E,MAAM,EAAEyE,CAAC,EAAE,EAAE;cACrC,IAAIA,CAAC,GAAG,CAAC,EAAE;gBACT4D,KAAK,CAAC3D,KAAK,CAACD,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC4D,KAAK,CAAC3D,KAAK,CAACD,CAAC,CAAC,GAAG6D,IAAI,KAAMjE,KAAK,GAAGlB,CAAC,GAAG,CAAE;cAClE;cAEAkF,KAAK,CAAC3D,KAAK,CAACD,CAAC,CAAC,GAAG4D,KAAK,CAAC3D,KAAK,CAACD,CAAC,CAAC,IAAKtB,CAAC,GAAG,CAAE;YAC5C;YAEA,IAAIkF,KAAK,CAAChD,aAAa,CAAC8B,CAAC,CAAC,EAAE;cAC1BkB,KAAK,CAACvC,IAAI,CAACqB,CAAC,CAAC;YACf;YAEA,OAAOkB,KAAK;UACd,CAAC;UACDhB,OAAO,GAAG,SAAAA,CAAS7D,CAAC,EAAE;YAAE,OAAO0E,OAAO,CAAC1E,CAAC,EAAE,CAAC,CAAC;UAAE,CAAC;QAE/CyD,GAAG,GAAGgB,MAAM,CAAChB,GAAG,CAAC;QACjBlG,GAAG,GAAGkH,MAAM,CAAClH,GAAG,CAAC;;QAEjB;QACA,IAAIwH,CAAC;UAAEC,OAAO,GAAG,CAAC,CAAC;UAAEC,GAAG,GAAG,CAAC,CAAC,IAAKjB,IAAI,GAAG,CAAE,IAAI,CAAC;QAEhDgB,OAAO,CAAC,CAAC,CAAC,GAAGvB,GAAG,CAACzC,IAAI,CAAC,CAAC;QACvBgE,OAAO,CAAC,CAAC,CAAC,GAAGN,OAAO,CAACjB,GAAG,EAAEA,GAAG,CAAC;QAE9B,KAAKsB,CAAC,GAAC,CAAC,EAAEA,CAAC,IAAEE,GAAG,EAAEF,CAAC,EAAE,EAAE;UACrBC,OAAO,CAAE,CAAC,GAAGD,CAAC,GAAI,CAAC,CAAC,GAAGL,OAAO,CAACM,OAAO,CAAE,CAAC,GAAGD,CAAC,GAAI,CAAC,CAAC,EAAEC,OAAO,CAAC,CAAC,CAAC,CAAC;QAClE;QAEA,IAAIE,MAAM,GAAG,SAAAA,CAASC,GAAG,EAAE9H,CAAC,EAAE;UAAE;UAC9B,IAAI+H,GAAG,GAAG/H,CAAC,GAAG8H,GAAG,CAACtE,KAAK;UAEvB,OAAO,CAACsE,GAAG,CAACjE,KAAK,CAAC/E,IAAI,CAACC,KAAK,CAACiB,CAAC,GAAG8H,GAAG,CAACtE,KAAK,CAAC,CAAC,GAAI,CAAC,IAAIuE,GAAI,KAAKA,GAAG;QACnE,CAAC;QAED,KAAK/H,CAAC,GAAGpB,CAAC,CAACW,SAAS,CAAC,CAAC,GAAG,CAAC,EAAES,CAAC,IAAI,CAAC,GAAI;UACpC,IAAI6H,MAAM,CAACjJ,CAAC,EAAEoB,CAAC,CAAC,IAAI,CAAC,EAAE;YACrB;YACA;YACAE,GAAG,GAAGmH,OAAO,CAACnH,GAAG,EAAEA,GAAG,CAAC;YACvBF,CAAC,GAAGA,CAAC,GAAG,CAAC;UACX,CAAC,MAAM;YACL;YACA;YACA;YACA;YACA,IAAIR,CAAC,GAAGQ,CAAC,GAAG2G,IAAI,GAAG,CAAC;YAEpB,OAAOkB,MAAM,CAACjJ,CAAC,EAAEY,CAAC,CAAC,IAAI,CAAC,EAAE;cACxBA,CAAC,EAAE;YACL;YAEA,IAAIwI,IAAI,GAAG,CAAC;YACZ,KAAKhH,CAAC,GAAGxB,CAAC,EAAEwB,CAAC,IAAIhB,CAAC,EAAEgB,CAAC,EAAE,EAAE;cACvBgH,IAAI,IAAIH,MAAM,CAACjJ,CAAC,EAAEoC,CAAC,CAAC,IAAKA,CAAC,GAAGxB,CAAE;cAC/BU,GAAG,GAAGmH,OAAO,CAACnH,GAAG,EAAEA,GAAG,CAAC;YACzB;YAEAA,GAAG,GAAGmH,OAAO,CAACnH,GAAG,EAAEyH,OAAO,CAACK,IAAI,CAAC,CAAC;YAEjChI,CAAC,GAAGR,CAAC,GAAG,CAAC;UACX;QACF;QAEA,OAAOgH,OAAO,CAACtG,GAAG,CAAC;MACrB,CAAC;MAEDoF,IAAI,EAAE,SAAAA,CAAA,EAAW;QACf,IAAI9F,CAAC,GAAG,IAAI,CAACqE,KAAK;UAAE2B,CAAC;QACrB,GAAG;UACDA,CAAC,GAAGhG,CAAC,CAACc,GAAG,CAAC,CAAC;QACb,CAAC,QAAQd,CAAC,CAACL,MAAM,IAAIqG,CAAC,KAAK,CAAC;QAC5BhG,CAAC,CAACa,IAAI,CAACmF,CAAC,CAAC;QACT,OAAO,IAAI;MACb,CAAC;MAED;MACAS,MAAM,EAAE,SAAAA,CAAA,EAAW;QACjB,OAAO,IAAI;MACb,CAAC;MAED;MACA3B,UAAU,EAAE,SAAAA,CAAA,EAAW;QACrB,OAAO,IAAI,CAACR,SAAS,CAAC,CAAC;MACzB,CAAC;MAED;MACAA,SAAS,EAAE,SAAAA,CAAA,EAAW;QACpB,IAAI7D,KAAK,GAAC,CAAC;UAAED,CAAC;UAAEiI,EAAE,GAAG,IAAI,CAACC,QAAQ;UAAEC,GAAG,GAAG,IAAI,CAACA,GAAG;UAAE3I,CAAC;UAAEmB,CAAC;UAAEkD,KAAK,GAAG,IAAI,CAACA,KAAK;UAAEe,EAAE,GAAGf,KAAK,CAAC1E,MAAM;UAAEsI,IAAI,GAAG,IAAI,CAAC1C,SAAS;QACtH,KAAK/E,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAG4E,EAAE,IAAK3E,KAAK,KAAK,CAAC,IAAIA,KAAK,KAAK,CAAC,CAAE,EAAED,CAAC,EAAE,EAAE;UACtDR,CAAC,GAAG,CAACqE,KAAK,CAAC7D,CAAC,CAAC,IAAE,CAAC,IAAIC,KAAK;UACzBU,CAAC,GAAGkD,KAAK,CAAC7D,CAAC,CAAC,GAAGR,CAAC,GAAGiI,IAAI;UACvBxH,KAAK,GAAG,CAACT,CAAC,GAACmB,CAAC,IAAEwH,GAAG;QACnB;QACA,IAAIlI,KAAK,KAAK,CAAC,CAAC,EAAE;UAChB4D,KAAK,CAAC7D,CAAC,GAAC,CAAC,CAAC,IAAIiI,EAAE;QAClB;QACA,IAAI,CAAC3C,IAAI,CAAC,CAAC;QACX,OAAO,IAAI;MACb,CAAC;MAED;MACAU,UAAU,EAAE,SAAAA,CAAA,EAAW;QACrB,IAAI/F,KAAK,GAAC,CAAC;UAAED,CAAC;UAAEmI,GAAG,GAAG,IAAI,CAACA,GAAG;UAAE3I,CAAC;UAAEmB,CAAC;UAAEkD,KAAK,GAAG,IAAI,CAACA,KAAK;UAAEe,EAAE,GAAGf,KAAK,CAAC1E,MAAM;UAAEsI,IAAI,GAAG,IAAI,CAAC1C,SAAS;QAClG,KAAK/E,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAG4E,EAAE,GAAC,CAAC,EAAE5E,CAAC,EAAE,EAAE;UACvBR,CAAC,GAAGqE,KAAK,CAAC7D,CAAC,CAAC,GAAGC,KAAK;UACpBU,CAAC,GAAGkD,KAAK,CAAC7D,CAAC,CAAC,GAAGR,CAAC,GAAGiI,IAAI;UACvBxH,KAAK,GAAG,CAACT,CAAC,GAACmB,CAAC,IAAEwH,GAAG;QACnB;QACAtE,KAAK,CAAC7D,CAAC,CAAC,IAAIC,KAAK;QACjB,OAAO,IAAI;MACb,CAAC;MAED;MACAmI,MAAM,EAAE,SAAAA,CAAS3I,GAAG,EAAE;QACpB,IAAI,CAAC6E,UAAU,CAAC,CAAC;QACjB7E,GAAG,GAAGA,GAAG,IAAI,IAAI,CAAC4I,QAAQ,IAAI,IAAI,CAAC9I,SAAS,CAAC,CAAC;QAC9C,IAAIS,CAAC,GAAGlB,IAAI,CAACC,KAAK,CAAC,CAACU,GAAG,GAAC,CAAC,IAAE,EAAE,CAAC;UAAE6I,CAAC,GAACnL,IAAI,CAACc,QAAQ;UAAEsK,CAAC,GAAG,CAAC9I,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC+D,KAAK,IAAI,IAAI,CAACA,KAAK;UAC1FtD,GAAG,GAAG,CAACoI,CAAC,CAAC3I,OAAO,CAAC4I,CAAC,EAAE,IAAI,CAAChE,OAAO,CAACvE,CAAC,CAAC,CAAC,CAAC;QACzC,KAAKA,CAAC,EAAE,EAAEA,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;UACrBE,GAAG,GAAGoI,CAAC,CAACtJ,MAAM,CAACkB,GAAG,EAAE,CAACoI,CAAC,CAAC3I,OAAO,CAACb,IAAI,CAAC0J,GAAG,CAAC,IAAI,CAAChF,KAAK,EAAC/D,GAAG,CAAC,EAAE,IAAI,CAAC8E,OAAO,CAACvE,CAAC,CAAC,CAAC,CAAC,CAAC;UAC3EP,GAAG,IAAI,IAAI,CAAC+D,KAAK;QACnB;QACA,OAAOtD,GAAG;MACZ,CAAC;MAED;MACAX,SAAS,EAAE,SAAAA,CAAA,EAAW;QACpB,IAAI,CAAC+E,UAAU,CAAC,CAAC;QACjB,IAAIpE,GAAG,GAAG,IAAI,CAACsD,KAAK,IAAI,IAAI,CAACK,KAAK,CAAC1E,MAAM,GAAG,CAAC,CAAC;UAC1CY,CAAC,GAAG,IAAI,CAAC8D,KAAK,CAAC,IAAI,CAACA,KAAK,CAAC1E,MAAM,GAAG,CAAC,CAAC;QACzC,OAAOY,CAAC,EAAEA,CAAC,MAAM,CAAC,EAAE;UAClBG,GAAG,EAAG;QACR;QACA,OAAOA,GAAG,GAAC,CAAC,GAAG,CAAC,CAAC;MACnB;IACF,CAAC;;IAED;AACA;AACA;IACA/C,IAAI,CAACkG,EAAE,CAACoF,QAAQ,GAAG,UAASC,IAAI,EAAE;MAChC,IAAIC,KAAK,GAAG,IAAI;QAAEzI,GAAG,GAAG,IAAIyI,KAAK,CAAC,CAAC;QAAEC,KAAK,GAAC,EAAE;QAAEN,CAAC,GAACnL,IAAI,CAACc,QAAQ;QAAE4K,CAAC,GAAG,IAAI,CAACpH,SAAS;QAC9EjC,CAAC,GAAGV,IAAI,CAAC0J,GAAG,CAAC,IAAI,CAACjJ,SAAS,IAAI,WAAW,EAAE+I,CAAC,CAAC/I,SAAS,CAACmJ,IAAI,CAAC,CAAC;QAAEH,CAAC,GAAG/I,CAAC,GAAGqJ,CAAC,CAACrF,KAAK,IAAIqF,CAAC,CAACrF,KAAK;MAE9FoF,KAAK,CAAC,CAAC,CAAC,GAAGN,CAAC,CAAC5J,OAAO,CAACgK,IAAI,EAAE,CAAC,EAAEH,CAAC,CAAC;MAChC,OAAOA,CAAC,GAAG/I,CAAC,EAAE+I,CAAC,IAAIM,CAAC,CAACrF,KAAK,EAAE;QAC1BoF,KAAK,CAACE,OAAO,CAACR,CAAC,CAAC5J,OAAO,CAACgK,IAAI,EAAEH,CAAC,EAAEM,CAAC,CAACrF,KAAK,CAAC,CAAC;MAC5C;MAEAtD,GAAG,CAAC2D,KAAK,GAAG+E,KAAK;MACjB,OAAO1I,GAAG;IACZ,CAAC;IAID/C,IAAI,CAACkG,EAAE,CAAC5B,SAAS,CAAC0G,GAAG,GAAG,CAAC,IAAIhL,IAAI,CAACkG,EAAE,CAAC5B,SAAS,CAACyG,QAAQ,GAAGpJ,IAAI,CAACsH,GAAG,CAAC,CAAC,EAACjJ,IAAI,CAACkG,EAAE,CAAC5B,SAAS,CAAC+B,KAAK,CAAC,CAAC;IAC9FrG,IAAI,CAACkG,EAAE,CAAC5B,SAAS,CAACsD,SAAS,GAAG,CAAC,CAAC,IAAI5H,IAAI,CAACkG,EAAE,CAAC5B,SAAS,CAAC+B,KAAK,IAAI,CAAC;;IAEhE;AACA;AACA;AACA;IACArG,IAAI,CAACkG,EAAE,CAAC0F,mBAAmB,GAAG,UAASV,QAAQ,EAAEW,KAAK,EAAE;MACtD;AACF;AACA;MACE,SAASxD,CAACA,CAAClC,EAAE,EAAE;QACb,IAAI,CAACC,QAAQ,CAACD,EAAE,CAAC;QACjB;AACJ;AACA;MACE;MAEA,IAAI2F,GAAG,GAAGzD,CAAC,CAAC/D,SAAS,GAAG,IAAItE,IAAI,CAACkG,EAAE,CAAC,CAAC;QAAErD,CAAC;QAAEiB,GAAG;QAAEiI,EAAE;MACjDA,EAAE,GAAGD,GAAG,CAACE,SAAS,GAAGrK,IAAI,CAACY,IAAI,CAACuB,GAAG,GAAGoH,QAAQ,GAAGY,GAAG,CAACzF,KAAK,CAAC;MAC1DyF,GAAG,CAACZ,QAAQ,GAAGA,QAAQ;MACvBY,GAAG,CAACG,MAAM,GAAG,EAAE;MACfH,GAAG,CAACI,MAAM,GAAG,EAAE;MACfJ,GAAG,CAACK,SAAS,GAAGJ,EAAE;MAClBD,GAAG,CAACM,QAAQ,GAAG,CAAC;MAChBN,GAAG,CAACO,UAAU,GAAG,EAAE;MACnBP,GAAG,CAACQ,UAAU,GAAG,EAAE;MACnBR,GAAG,CAACS,OAAO,GAAGlE,CAAC,CAACkE,OAAO,GAAG,IAAIvM,IAAI,CAACkG,EAAE,CAACvE,IAAI,CAACsH,GAAG,CAAC,CAAC,EAACiC,QAAQ,CAAC,CAAC;MAE3DY,GAAG,CAACM,QAAQ,GAAG,CAAC,GAAC,CAACzK,IAAI,CAACsH,GAAG,CAAC,CAAC,EAAEiC,QAAQ,GAAGY,GAAG,CAACzF,KAAK,CAAC;MAEnD,KAAKxD,CAAC,GAAC,CAAC,EAAEA,CAAC,GAACgJ,KAAK,CAAC7J,MAAM,EAAEa,CAAC,EAAE,EAAE;QAC7BiJ,GAAG,CAACG,MAAM,CAACpJ,CAAC,CAAC,GAAGlB,IAAI,CAACC,KAAK,CAACiK,KAAK,CAAChJ,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGiJ,GAAG,CAACzF,KAAK,GAAGvC,GAAG,CAAC;QACzDgI,GAAG,CAACO,UAAU,CAACxJ,CAAC,CAAC,GAAGlB,IAAI,CAACY,IAAI,CAACsJ,KAAK,CAAChJ,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGiJ,GAAG,CAACzF,KAAK,GAAGvC,GAAG,CAAC;QAC5DgI,GAAG,CAACI,MAAM,CAACrJ,CAAC,CAAC,GAAGgJ,KAAK,CAAChJ,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGlB,IAAI,CAACsH,GAAG,CAAC,CAAC,GAAC,CAAC,EAAEiC,QAAQ,GAAGW,KAAK,CAAChJ,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGiJ,GAAG,CAACG,MAAM,CAACpJ,CAAC,CAAC,GAAGiJ,GAAG,CAACzF,KAAK,CAAC;QAC/FyF,GAAG,CAACQ,UAAU,CAACzJ,CAAC,CAAC,GAAGgJ,KAAK,CAAChJ,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGlB,IAAI,CAACsH,GAAG,CAAC,CAAC,GAAC,CAAC,EAAEiC,QAAQ,GAAGW,KAAK,CAAChJ,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGiJ,GAAG,CAACO,UAAU,CAACxJ,CAAC,CAAC,GAAGiJ,GAAG,CAACzF,KAAK,CAAC;QACvGyF,GAAG,CAACS,OAAO,CAAC/E,IAAI,CAAC,IAAIxH,IAAI,CAACkG,EAAE,CAACvE,IAAI,CAACsH,GAAG,CAAC,CAAC,EAAC4C,KAAK,CAAChJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAACgJ,KAAK,CAAChJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAClEiJ,GAAG,CAACK,SAAS,GAAGxK,IAAI,CAAC0J,GAAG,CAACS,GAAG,CAACK,SAAS,EAAE,CAACL,GAAG,CAACG,MAAM,CAACpJ,CAAC,CAAC,CAAC,CAAC,CAAC;MAC3D;MACAiJ,GAAG,CAACvF,MAAM,GAAG8B,CAAC;MACdyD,GAAG,CAACS,OAAO,CAAC1D,UAAU,CAAC,CAAC;;MAExB;AACF;AACA;AACA;MACEiD,GAAG,CAAChD,MAAM,GAAG,YAAW;QACtB,IAAIjG,CAAC;UAAE4D,CAAC;UAAEpE,CAAC;UAAE0J,EAAE,GAAG,IAAI,CAACC,SAAS;UAAEtF,KAAK,GAAG,IAAI,CAACA,KAAK;UAAEkE,GAAG,GAAG,IAAI,CAACqB,MAAM;UAAEO,EAAE,GAAG,IAAI,CAACP,MAAM,CAACjK,MAAM;UAAEyK,GAAG,GAAG,IAAI,CAACP,MAAM;UAAEzE,EAAE;QAEvH5E,CAAC,GAAG,IAAI,CAACsJ,SAAS;QAClB,OAAOzF,KAAK,CAAC1E,MAAM,GAAG+J,EAAE,EAAE;UACxB1J,CAAC,GAAGqE,KAAK,CAACvD,GAAG,CAAC,CAAC;UACfsE,EAAE,GAAGf,KAAK,CAAC1E,MAAM;UACjB,KAAKyE,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC+F,EAAE,EAAE/F,CAAC,EAAE,EAAE;YACnBC,KAAK,CAACe,EAAE,GAACmD,GAAG,CAACnE,CAAC,CAAC,CAAC,IAAIgG,GAAG,CAAChG,CAAC,CAAC,GAAGpE,CAAC;UAChC;UAEAQ,CAAC,EAAE;UACH,IAAI,CAACA,CAAC,EAAE;YACN6D,KAAK,CAACxD,IAAI,CAAC,CAAC,CAAC;YACb,IAAI,CAAC2F,UAAU,CAAC,CAAC;YACjBhG,CAAC,GAAG,IAAI,CAACsJ,SAAS;UACpB;QACF;QACA,IAAI,CAACtD,UAAU,CAAC,CAAC;QAEjB,OAAO,IAAI;MACb,CAAC;;MAED;AACF;AACA;MACEiD,GAAG,CAACY,aAAa,GAAIZ,GAAG,CAACM,QAAQ,KAAK,CAAC,CAAC,GAAIN,GAAG,CAAChD,MAAM,GAAG,YAAW;QAClE,IAAIpC,KAAK,GAAG,IAAI,CAACA,KAAK;UAAE7D,CAAC,GAAG6D,KAAK,CAAC1E,MAAM,GAAG,CAAC;UAAEyE,CAAC;UAAEpE,CAAC;QAClD,IAAI,CAACyG,MAAM,CAAC,CAAC;QACb,IAAIjG,CAAC,KAAK,IAAI,CAACmJ,SAAS,GAAG,CAAC,EAAE;UAC5B3J,CAAC,GAAGqE,KAAK,CAAC7D,CAAC,CAAC,GAAG,IAAI,CAACuJ,QAAQ;UAC5B1F,KAAK,CAAC7D,CAAC,CAAC,IAAIR,CAAC;UACb,KAAKoE,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC,IAAI,CAAC4F,UAAU,CAACrK,MAAM,EAAEyE,CAAC,EAAE,EAAE;YACvCC,KAAK,CAAC7D,CAAC,GAAC,IAAI,CAACwJ,UAAU,CAAC5F,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC6F,UAAU,CAAC7F,CAAC,CAAC,GAAGpE,CAAC;UACvD;UACA,IAAI,CAACsE,SAAS,CAAC,CAAC;QAClB;MACF,CAAC;;MAED;AACF;AACA;AACA;MACEmF,GAAG,CAAC3E,UAAU,GAAG,YAAW;QAC1B,IAAII,OAAO,EAAE1E,CAAC;QACd;;QAEA,IAAI,CAAC6J,aAAa,CAAC,CAAC;QACpB;;QAEA,IAAI,CAAClF,IAAI,CAAC,IAAI,CAAC+E,OAAO,CAAC;QACvB,IAAI,CAAC/E,IAAI,CAAC,IAAI,CAAC+E,OAAO,CAAC;QACvB,IAAI,CAAC5F,SAAS,CAAC,CAAC;QAChB;;QAEA,IAAI,CAAC+F,aAAa,CAAC,CAAC;QACpB;QACA;;QAEA;QACA,KAAK7J,CAAC,GAAC,IAAI,CAAC6D,KAAK,CAAC1E,MAAM,EAAEa,CAAC,GAAC,IAAI,CAACmJ,SAAS,EAAEnJ,CAAC,EAAE,EAAE;UAC/C,IAAI,CAAC6D,KAAK,CAAC7D,CAAC,CAAC,GAAG,CAAC;QACnB;;QAEA;QACA0E,OAAO,GAAG,IAAI,CAACF,aAAa,CAAC,IAAI,CAACkF,OAAO,CAAC;QAC1C,KAAK1J,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC,IAAI,CAAC6D,KAAK,CAAC1E,MAAM,EAAEa,CAAC,EAAE,EAAE;UAClC,IAAI,CAAC6D,KAAK,CAAC7D,CAAC,CAAC,IAAI,IAAI,CAAC0J,OAAO,CAAC7F,KAAK,CAAC7D,CAAC,CAAC,GAAG0E,OAAO;QAClD;QACA,IAAI,CAACsB,UAAU,CAAC,CAAC;QAEjB,OAAO,IAAI;MACb,CAAC;;MAGD;AACF;AACA;MACEiD,GAAG,CAACa,OAAO,GAAG,YAAW;QACvB,OAAQ,IAAI,CAAC3D,KAAK,CAAC,IAAI,CAACuD,OAAO,CAACrE,GAAG,CAAC,CAAC,CAAC,CAAC;MACzC,CAAC;MAEDG,CAAC,CAACiD,QAAQ,GAAGtL,IAAI,CAACkG,EAAE,CAACoF,QAAQ;MAE7B,OAAOjD,CAAC;IACV,CAAC;;IAED;IACA,IAAIuE,GAAG,GAAG5M,IAAI,CAACkG,EAAE,CAAC0F,mBAAmB;IACrC5L,IAAI,CAACkG,EAAE,CAAC2G,KAAK,GAAG;MACdC,IAAI,EAAEF,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAExB;MACAG,MAAM,EAAEH,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC,EAAE,CAAC,CAAC,CAAC;MAE3B;MACAI,KAAK,EAAEJ,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,EAAE,EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACrEK,KAAK,EAAEL,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,EAAE,EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,EAAE,EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAC7EM,KAAK,EAAEN,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAEpE;MACAO,IAAI,EAAEP,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,EAAE,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAChCQ,IAAI,EAAER,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,EAAE,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAC/BS,IAAI,EAAET,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,EAAE,EAAC,CAAC,CAAC,EAAC,CAAC,GAAG,EAAC,CAAC,CAAC,EAAC,CAAC,GAAG,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAChDU,IAAI,EAAEV,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,EAAE,EAAC,CAAC,CAAC,EAAC,CAAC,EAAE,EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,GAAG,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAChDW,IAAI,EAAEX,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,CAAC;IACzB,CAAC;IAED5M,IAAI,CAACkG,EAAE,CAACsH,MAAM,GAAG,UAASjB,OAAO,EAAEkB,QAAQ,EAAE;MAC3C,IAAI,OAAOlB,OAAO,KAAK,QAAQ,EAAE;QAAEA,OAAO,GAAG,IAAIvM,IAAI,CAACkG,EAAE,CAACqG,OAAO,CAAC;MAAE;MACnE,IAAId,KAAK;QAAE5I,CAAC;QAAER,CAAC,GAAGkK,OAAO,CAAC7F,KAAK,CAAC1E,MAAM;QAAEwB,CAAC,GAAG+I,OAAO,CAAC7F,KAAK,CAACrE,CAAC,GAAC,CAAC,CAAC,GAAC,CAAC;QAAEU,GAAG,GAAG,IAAI/C,IAAI,CAACkG,EAAE,CAAC,CAAC;MACrF,OAAO,IAAI,EAAE;QACX;QACA,GAAG;UACDuF,KAAK,GAAGzL,IAAI,CAACwN,MAAM,CAACE,WAAW,CAACrL,CAAC,EAAEoL,QAAQ,CAAC;UAC5C,IAAIhC,KAAK,CAACpJ,CAAC,GAAC,CAAC,CAAC,GAAG,CAAC,EAAE;YAAEoJ,KAAK,CAACpJ,CAAC,GAAC,CAAC,CAAC,IAAI,WAAW;UAAE;QACnD,CAAC,QAAQV,IAAI,CAACC,KAAK,CAAC6J,KAAK,CAACpJ,CAAC,GAAC,CAAC,CAAC,GAAGmB,CAAC,CAAC,KAAK7B,IAAI,CAACC,KAAK,CAAC,WAAW,GAAG4B,CAAC,CAAC;QACnEiI,KAAK,CAACpJ,CAAC,GAAC,CAAC,CAAC,IAAImB,CAAC;;QAEf;QACA,KAAKX,CAAC,GAAC,CAAC,EAAEA,CAAC,GAACR,CAAC,GAAC,CAAC,EAAEQ,CAAC,EAAE,EAAE;UACpB4I,KAAK,CAAC5I,CAAC,CAAC,IAAI0J,OAAO,CAAC3E,SAAS;QAC/B;;QAEA;QACA7E,GAAG,CAAC2D,KAAK,GAAG+E,KAAK;QACjB,IAAI,CAAC1I,GAAG,CAACsE,aAAa,CAACkF,OAAO,CAAC,EAAE;UAC/B,OAAOxJ,GAAG;QACZ;MACF;IACF,CAAC;IACD;AACA;AACA;AACA;;IAEA;IACA,IAAI,OAAO4K,WAAY,KAAK,WAAW,EAAE;MACtC,WAASC,OAAO,EAAC;QACd,YAAY;;QACZA,OAAO,CAACD,WAAW,GAAG,YAAU,CAAC,CAAC;QAClCC,OAAO,CAACC,QAAQ,GAAG,YAAU,CAAC,CAAC;MACnC,CAAC,EAAC,IAAI,CAAC;IACT;;IAEA;AACA;AACA;AACA;IACA7N,IAAI,CAACM,KAAK,CAACwN,WAAW,GAAG;MACvB;AACF;MACExC,QAAQ,EAAE,SAAAA,CAAUyC,GAAG,EAAEC,OAAO,EAAEC,aAAa,EAAE;QAC/C,IAAIlL,GAAG,EAAEF,CAAC,EAAE2J,EAAE,EAAE1I,GAAG,EAAEoK,QAAQ;QAC7BF,OAAO,GAAGA,OAAO,IAAE3M,SAAS,GAAI,IAAI,GAAG2M,OAAO;QAC9CC,aAAa,GAAGA,aAAa,IAAI,CAAC;QAElC,IAAIF,GAAG,CAAC/L,MAAM,KAAK,CAAC,EAAE;UACpB,OAAO,IAAI2L,WAAW,CAAC,CAAC,CAAC;QAC3B;QAEAnB,EAAE,GAAGxM,IAAI,CAACc,QAAQ,CAACsB,SAAS,CAAC2L,GAAG,CAAC,GAAC,CAAC;;QAEnC;QACA;QACA,IAAK/N,IAAI,CAACc,QAAQ,CAACsB,SAAS,CAAC2L,GAAG,CAAC,GAAC,CAAC,KAAK,CAAC,EAAG;UAC1C,MAAM,IAAI/N,IAAI,CAACO,SAAS,CAACI,OAAO,CAAC,4EAA4E,CAAC;QAChH;QAEA,IAAIqN,OAAO,IAAIxB,EAAE,GAACyB,aAAa,KAAK,CAAC,EAAC;UACpCzB,EAAE,IAAIyB,aAAa,GAAIzB,EAAE,GAACyB,aAAc;QAC1C;;QAGA;QACAnK,GAAG,GAAG,IAAI+J,QAAQ,CAAC,IAAIF,WAAW,CAACI,GAAG,CAAC/L,MAAM,GAAC,CAAC,CAAC,CAAC;QACjD,KAAKa,CAAC,GAAC,CAAC,EAAEA,CAAC,GAACkL,GAAG,CAAC/L,MAAM,EAAEa,CAAC,EAAE,EAAE;UAC3BiB,GAAG,CAACqK,SAAS,CAACtL,CAAC,GAAC,CAAC,EAAGkL,GAAG,CAAClL,CAAC,CAAC,IAAE,EAAG,CAAC,CAAC,CAAC;QACpC;;QAEA;QACAE,GAAG,GAAG,IAAI8K,QAAQ,CAAC,IAAIF,WAAW,CAACnB,EAAE,CAAC,CAAC;;QAEvC;QACA,IAAIzJ,GAAG,CAACqL,UAAU,KAAKtK,GAAG,CAACsK,UAAU,EAAC;UACpC,OAAOtK,GAAG,CAACuK,MAAM;QACnB;QAEAH,QAAQ,GAAGpK,GAAG,CAACsK,UAAU,GAAGrL,GAAG,CAACqL,UAAU,GAAGtK,GAAG,CAACsK,UAAU,GAAGrL,GAAG,CAACqL,UAAU;QAC5E,KAAIvL,CAAC,GAAC,CAAC,EAAEA,CAAC,GAACqL,QAAQ,EAAErL,CAAC,EAAE,EAAC;UACvBE,GAAG,CAACuL,QAAQ,CAACzL,CAAC,EAACiB,GAAG,CAACyK,QAAQ,CAAC1L,CAAC,CAAC,CAAC;QACjC;QAGA,OAAOE,GAAG,CAACsL,MAAM;MACnB,CAAC;MAEDpD,MAAM,EAAE,SAAAA,CAAUoD,MAAM,EAAE;QACxB,IAAIxL,CAAC;UAAEE,GAAG,GAAC,EAAE;UAAET,GAAG;UAAEkM,MAAM;UAAE1K,GAAG;QAE/B,IAAIuK,MAAM,CAACD,UAAU,KAAK,CAAC,EAAE;UAC3B,OAAO,EAAE;QACX;QAEAI,MAAM,GAAG,IAAIX,QAAQ,CAACQ,MAAM,CAAC;QAC7B/L,GAAG,GAAGkM,MAAM,CAACJ,UAAU,GAAGI,MAAM,CAACJ,UAAU,GAAC,CAAC;QAE7C,KAAK,IAAIvL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,GAAG,EAAEO,CAAC,IAAE,CAAC,EAAE;UAC7BE,GAAG,CAACG,IAAI,CAACsL,MAAM,CAACC,SAAS,CAAC5L,CAAC,CAAC,CAAC;QAC/B;QAEA,IAAI2L,MAAM,CAACJ,UAAU,GAAC,CAAC,IAAI,CAAC,EAAE;UAC5BtK,GAAG,GAAG,IAAI+J,QAAQ,CAAC,IAAIF,WAAW,CAAC,CAAC,CAAC,CAAC;UACtC,KAAK,IAAI9K,CAAC,GAAG,CAAC,EAAER,CAAC,GAAGmM,MAAM,CAACJ,UAAU,GAAC,CAAC,EAAEvL,CAAC,GAAGR,CAAC,EAAEQ,CAAC,EAAE,EAAE;YACnD;YACAiB,GAAG,CAACwK,QAAQ,CAACzL,CAAC,GAAC,CAAC,GAACR,CAAC,EAAEmM,MAAM,CAACD,QAAQ,CAACjM,GAAG,GAACO,CAAC,CAAC,CAAC,CAAC,CAAC;UAC/C;UACAE,GAAG,CAACG,IAAI,CACNlD,IAAI,CAACc,QAAQ,CAAC0B,OAAO,CAAGgM,MAAM,CAACJ,UAAU,GAAC,CAAC,GAAE,CAAC,EAAEtK,GAAG,CAAC2K,SAAS,CAAC,CAAC,CAAE,CACnE,CAAC;QACH;QACA,OAAO1L,GAAG;MACZ,CAAC;MAID;MACA2L,aAAa,EAAE,SAAAA,CAASL,MAAM,EAAC;QAC3B,IAAIM,gBAAgB,GAAG,IAAId,QAAQ,CAACQ,MAAM,CAAC;QAC3C,IAAIO,MAAM,GAAG,EAAE;QACf,IAAIC,GAAG,GAAG,SAAAA,CAAUC,CAAC,EAAEC,KAAK,EAAE;UAC1BD,CAAC,GAAGA,CAAC,GAAG,EAAE;UACV,OAAOA,CAAC,CAAC9M,MAAM,IAAI+M,KAAK,GAAGD,CAAC,GAAG,IAAIE,KAAK,CAACD,KAAK,GAAGD,CAAC,CAAC9M,MAAM,GAAG,CAAC,CAAC,CAACiN,IAAI,CAAC,GAAG,CAAC,GAAGH,CAAC;QAChF,CAAC;QAED,KAAK,IAAIjM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG8L,gBAAgB,CAACP,UAAU,EAAEvL,CAAC,IAAE,CAAC,EAAE;UACnD,IAAIA,CAAC,GAAC,EAAE,IAAI,CAAC,EAAE+L,MAAM,IAAK,IAAI,GAAE/L,CAAC,CAAEnC,QAAQ,CAAC,EAAE,CAAC,GAAC,IAAK;UACrDkO,MAAM,IAAMC,GAAG,CAACF,gBAAgB,CAACO,SAAS,CAACrM,CAAC,CAAC,CAACnC,QAAQ,CAAC,EAAE,CAAC,EAAC,CAAC,CAAC,GAAG,GAAI;QACxE;QAEA,IAAK,OAAOyO,OAAO,KAAK9N,SAAS,EAAE;UACjC8N,OAAO,GAAGA,OAAO,IAAI;YAACC,GAAG,EAAC,SAAAA,CAAA,EAAU,CAAC;UAAC,CAAC,CAAC,CAAC;QAC3C;QACAD,OAAO,CAACC,GAAG,CAACR,MAAM,CAACS,WAAW,CAAC,CAAC,CAAC;MACrC;IACF,CAAC;;IAED;AACA;AACA;AACA;AACA;AACA;;IAEA;AACA;AACA;AACA;IACArP,IAAI,CAACM,KAAK,CAACgP,UAAU,GAAG;MACtB;MACAhE,QAAQ,EAAE,SAAAA,CAAUyC,GAAG,EAAE;QACvB,IAAIhL,GAAG,GAAG,EAAE;UAAE2F,EAAE,GAAG1I,IAAI,CAACc,QAAQ,CAACsB,SAAS,CAAC2L,GAAG,CAAC;UAAElL,CAAC;UAAEiB,GAAG;QACvD,KAAKjB,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC6F,EAAE,GAAC,CAAC,EAAE7F,CAAC,EAAE,EAAE;UACrB,IAAI,CAACA,CAAC,GAAC,CAAC,MAAM,CAAC,EAAE;YACfiB,GAAG,GAAGiK,GAAG,CAAClL,CAAC,GAAC,CAAC,CAAC;UAChB;UACAE,GAAG,IAAIwM,MAAM,CAACC,YAAY,CAAC1L,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;UACjDA,GAAG,KAAK,CAAC;QACX;QACA,OAAO2L,kBAAkB,CAACC,MAAM,CAAC3M,GAAG,CAAC,CAAC;MACxC,CAAC;MAED;MACAkI,MAAM,EAAE,SAAAA,CAAU0E,GAAG,EAAE;QACrBA,GAAG,GAAGC,QAAQ,CAACC,kBAAkB,CAACF,GAAG,CAAC,CAAC;QACvC,IAAI5M,GAAG,GAAG,EAAE;UAAEF,CAAC;UAAEiB,GAAG,GAAC,CAAC;QACtB,KAAKjB,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC8M,GAAG,CAAC3N,MAAM,EAAEa,CAAC,EAAE,EAAE;UAC3BiB,GAAG,GAAGA,GAAG,IAAI,CAAC,GAAG6L,GAAG,CAACG,UAAU,CAACjN,CAAC,CAAC;UAClC,IAAI,CAACA,CAAC,GAAC,CAAC,MAAM,CAAC,EAAE;YACfE,GAAG,CAACG,IAAI,CAACY,GAAG,CAAC;YACbA,GAAG,GAAG,CAAC;UACT;QACF;QACA,IAAIjB,CAAC,GAAC,CAAC,EAAE;UACPE,GAAG,CAACG,IAAI,CAAClD,IAAI,CAACc,QAAQ,CAAC0B,OAAO,CAAC,CAAC,IAAEK,CAAC,GAAC,CAAC,CAAC,EAAEiB,GAAG,CAAC,CAAC;QAC/C;QACA,OAAOf,GAAG;MACZ;IACF,CAAC;IACD;AACA;AACA;AACA;IACA/C,IAAI,CAAC+P,GAAG,GAAG,CAAC,CAAC;;IAEb;AACA;AACA;AACA;AACA;AACA;AACA;IACA/P,IAAI,CAAC+P,GAAG,CAACC,KAAK,GAAG,UAASC,KAAK,EAACxO,CAAC,EAAC4B,CAAC,EAAE;MACnC,IAAI5B,CAAC,KAAKJ,SAAS,EAAE;QACnB,IAAI,CAAC6O,UAAU,GAAG,IAAI;MACxB,CAAC,MAAM;QACL,IAAIzO,CAAC,YAAYzB,IAAI,CAACkG,EAAE,EAAE;UACxBzE,CAAC,GAAG,IAAIwO,KAAK,CAACE,KAAK,CAAC1O,CAAC,CAAC;QACxB;QACA,IAAI4B,CAAC,YAAYrD,IAAI,CAACkG,EAAE,EAAE;UACxB7C,CAAC,GAAG,IAAI4M,KAAK,CAACE,KAAK,CAAC9M,CAAC,CAAC;QACxB;QAEA,IAAI,CAAC5B,CAAC,GAAGA,CAAC;QACV,IAAI,CAAC4B,CAAC,GAAGA,CAAC;QAEV,IAAI,CAAC6M,UAAU,GAAG,KAAK;MACzB;MACA,IAAI,CAACD,KAAK,GAAGA,KAAK;IACpB,CAAC;IAIDjQ,IAAI,CAAC+P,GAAG,CAACC,KAAK,CAAC1L,SAAS,GAAG;MACzB8L,KAAK,EAAE,SAAAA,CAAA,EAAW;QAChB,OAAO,IAAIpQ,IAAI,CAAC+P,GAAG,CAACM,QAAQ,CAAC,IAAI,CAACJ,KAAK,EAAE,IAAI,CAACxO,CAAC,EAAE,IAAI,CAAC4B,CAAC,EAAE,IAAI,IAAI,CAAC4M,KAAK,CAACE,KAAK,CAAC,CAAC,CAAC,CAAC;MACnF,CAAC;MAEDG,IAAI,EAAE,SAAAA,CAAS7J,CAAC,EAAE;QAChB,OAAO,IAAI,CAAC2J,KAAK,CAAC,CAAC,CAACE,IAAI,CAAC7J,CAAC,EAAE,IAAI,CAAC,CAAC8J,QAAQ,CAAC,CAAC;MAC9C,CAAC;MAED;AACF;AACA;AACA;AACA;AACA;AACA;MACEC,KAAK,EAAE,SAAAA,CAAS/J,CAAC,EAAEgK,EAAE,EAAEC,OAAO,EAAE;QAC9B,OAAO,IAAI,CAACN,KAAK,CAAC,CAAC,CAACI,KAAK,CAAC/J,CAAC,EAAE,IAAI,EAAEgK,EAAE,EAAEC,OAAO,CAAC,CAACH,QAAQ,CAAC,CAAC;MAC5D,CAAC;MAEDI,SAAS,EAAE,SAAAA,CAAA,EAAW;QACpB,IAAInN,CAAC,EAAEX,CAAC,EAAEgB,CAAC;QACX,IAAI,IAAI,CAAC+M,UAAU,KAAKvP,SAAS,EAAE;UACjCwC,CAAC,GAAG,IAAI,CAACuM,KAAK,CAAC,CAAC,CAACS,KAAK,CAAC,CAAC;UACxBrN,CAAC,GAAG,IAAI,CAACoN,UAAU,GAAG,CAAC,IAAI5Q,IAAI,CAAC+P,GAAG,CAACC,KAAK,CAAC,IAAI,CAACC,KAAK,CAAC,EAAE,IAAI,EAAEpM,CAAC,CAAC0M,QAAQ,CAAC,CAAC,CAAC;UAC1E,KAAK1N,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC,EAAE,EAAEA,CAAC,EAAE,EAAE;YACnBgB,CAAC,GAAGA,CAAC,CAAC0E,GAAG,CAAC,IAAI,CAAC;YACf/E,CAAC,CAACN,IAAI,CAACW,CAAC,CAAC0M,QAAQ,CAAC,CAAC,CAAC;UACtB;QACF;QACA,OAAO,IAAI,CAACK,UAAU;MACxB,CAAC;MAEDE,MAAM,EAAE,SAAAA,CAAA,EAAW;QACjB,IAAIC,IAAI,GAAG,IAAI,IAAI,CAACd,KAAK,CAACE,KAAK,CAAC,CAAC,CAAC,CAACjI,GAAG,CAAC,IAAI,CAAC7E,CAAC,CAAC,CAACsD,SAAS,CAAC,CAAC,CAACmC,MAAM,CAAC,CAAC;QACnE,OAAO,IAAI9I,IAAI,CAAC+P,GAAG,CAACC,KAAK,CAAC,IAAI,CAACC,KAAK,EAAE,IAAI,CAACxO,CAAC,EAAEsP,IAAI,CAAC;MACrD,CAAC;MAEDC,OAAO,EAAE,SAAAA,CAAA,EAAW;QAClB,OAAO,IAAI,CAAC3N,CAAC,CAAC0F,MAAM,CAAC,CAAC,CAAC/B,MAAM,CAAC,IAAI,CAACiJ,KAAK,CAACrN,CAAC,CAAC2F,GAAG,CAAC,IAAI,CAAC9G,CAAC,CAAC+G,GAAG,CAAC,IAAI,CAACyH,KAAK,CAACjP,CAAC,CAACuH,GAAG,CAAC,IAAI,CAAC9G,CAAC,CAACsH,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAChG,CAAC;MAEDkC,MAAM,EAAE,SAAAA,CAAA,EAAW;QACjB,OAAOjL,IAAI,CAACc,QAAQ,CAACe,MAAM,CAAC,IAAI,CAACJ,CAAC,CAACwJ,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC5H,CAAC,CAAC4H,MAAM,CAAC,CAAC,CAAC;MAC/D;IACF,CAAC;;IAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACAjL,IAAI,CAAC+P,GAAG,CAACM,QAAQ,GAAG,UAASJ,KAAK,EAAExO,CAAC,EAAE4B,CAAC,EAAE4N,CAAC,EAAE;MAC3C,IAAIxP,CAAC,KAAKJ,SAAS,EAAE;QACnB,IAAI,CAAC6O,UAAU,GAAG,IAAI;MACxB,CAAC,MAAM;QACL,IAAI,CAACzO,CAAC,GAAGA,CAAC;QACV,IAAI,CAAC4B,CAAC,GAAGA,CAAC;QACV,IAAI,CAAC4N,CAAC,GAAGA,CAAC;QACV,IAAI,CAACf,UAAU,GAAG,KAAK;MACzB;MACA,IAAI,CAACD,KAAK,GAAGA,KAAK;IACpB,CAAC;IAEDjQ,IAAI,CAAC+P,GAAG,CAACM,QAAQ,CAAC/L,SAAS,GAAG;MAC5B;AACF;AACA;AACA;AACA;AACA;MACEiE,GAAG,EAAE,SAAAA,CAAS2I,CAAC,EAAE;QACf,IAAIC,CAAC,GAAG,IAAI;UAAEC,GAAG;UAAE5L,CAAC;UAAEV,CAAC;UAAEY,EAAE;UAAE2L,EAAE;UAAErM,EAAE;UAAEvD,CAAC;UAAE6P,EAAE;UAAEC,EAAE;UAAElO,CAAC;UAAE4N,CAAC;QACpD,IAAIE,CAAC,CAAClB,KAAK,KAAKiB,CAAC,CAACjB,KAAK,EAAE;UACvB,MAAM,IAAIjQ,IAAI,CAACO,SAAS,CAACI,OAAO,CAAC,+DAA+D,CAAC;QACnG;QAEA,IAAIwQ,CAAC,CAACjB,UAAU,EAAE;UAChB,OAAOgB,CAAC,CAACd,KAAK,CAAC,CAAC;QAClB,CAAC,MAAM,IAAIc,CAAC,CAAChB,UAAU,EAAE;UACvB,OAAOiB,CAAC;QACV;QAEAC,GAAG,GAAGD,CAAC,CAACF,CAAC,CAAClI,MAAM,CAAC,CAAC;QAClBvD,CAAC,GAAG0L,CAAC,CAACzP,CAAC,CAAC+G,GAAG,CAAC4I,GAAG,CAAC,CAACtJ,IAAI,CAACqJ,CAAC,CAAC1P,CAAC,CAAC;QAE1B,IAAI+D,CAAC,CAACwB,MAAM,CAAC,CAAC,CAAC,EAAE;UACf,IAAImK,CAAC,CAAC9N,CAAC,CAAC2D,MAAM,CAACkK,CAAC,CAAC7N,CAAC,CAACmF,GAAG,CAAC4I,GAAG,CAAC5I,GAAG,CAAC2I,CAAC,CAACF,CAAC,CAAC,CAAC,CAAC,EAAE;YACrC;YACA,OAAOE,CAAC,CAACN,KAAK,CAAC,CAAC;UAClB,CAAC,MAAM;YACL;YACA,OAAO,IAAI7Q,IAAI,CAAC+P,GAAG,CAACM,QAAQ,CAACc,CAAC,CAAClB,KAAK,CAAC;UACvC;QACF;QAEAnL,CAAC,GAAGoM,CAAC,CAAC7N,CAAC,CAACmF,GAAG,CAAC4I,GAAG,CAAC5I,GAAG,CAAC2I,CAAC,CAACF,CAAC,CAAC,CAAC,CAACnJ,IAAI,CAACqJ,CAAC,CAAC9N,CAAC,CAAC;QACnCqC,EAAE,GAAGF,CAAC,CAACuD,MAAM,CAAC,CAAC;QAEfsI,EAAE,GAAGvM,CAAC,CAACiE,MAAM,CAAC,CAAC;QACf/D,EAAE,GAAGQ,CAAC,CAACuD,MAAM,CAAC,CAAC,CAACP,GAAG,CAAChD,CAAC,CAAC,CAACgC,IAAI,CAAE2J,CAAC,CAAC1P,CAAC,CAAC8G,GAAG,CAAC4I,CAAC,CAAC1P,CAAC,CAAC,CAAC+G,GAAG,CAAC9C,EAAE,CAAE,CAAC;QACnDjE,CAAC,GAAI4P,EAAE,CAACvJ,IAAI,CAAC9C,EAAE,CAAC;QAEhBsM,EAAE,GAAGH,CAAC,CAAC1P,CAAC,CAAC+G,GAAG,CAAC9C,EAAE,CAAC,CAACoC,IAAI,CAACrG,CAAC,CAAC,CAAC+G,GAAG,CAAC1D,CAAC,CAAC;QAC/ByM,EAAE,GAAGJ,CAAC,CAAC9N,CAAC,CAACmF,GAAG,CAAChD,CAAC,CAACuD,MAAM,CAAC,CAAC,CAACP,GAAG,CAAChD,CAAC,CAAC,CAAC;QAC/BnC,CAAC,GAAIiO,EAAE,CAACxJ,IAAI,CAACyJ,EAAE,CAAC;QAEhBN,CAAC,GAAIE,CAAC,CAACF,CAAC,CAACzI,GAAG,CAAChD,CAAC,CAAC;QAEf,OAAO,IAAIxF,IAAI,CAAC+P,GAAG,CAACM,QAAQ,CAAC,IAAI,CAACJ,KAAK,EAACxO,CAAC,EAAC4B,CAAC,EAAC4N,CAAC,CAAC;MAChD,CAAC;MAED;AACF;AACA;AACA;MACEJ,KAAK,EAAE,SAAAA,CAAA,EAAW;QAChB,IAAI,IAAI,CAACX,UAAU,EAAE;UAAE,OAAO,IAAI;QAAE;QAEpC,IACEqB,EAAE,GAAG,IAAI,CAAClO,CAAC,CAAC0F,MAAM,CAAC,CAAC;UACpB/H,CAAC,GAAIuQ,EAAE,CAAC/I,GAAG,CAAC,IAAI,CAAC/G,CAAC,CAAC+G,GAAG,CAAC,CAAC,CAAC,CAAC;UAC1B5F,CAAC,GAAI2O,EAAE,CAACxI,MAAM,CAAC,CAAC,CAACP,GAAG,CAAC,CAAC,CAAC;UACvBgJ,EAAE,GAAG,IAAI,CAACP,CAAC,CAAClI,MAAM,CAAC,CAAC;UACpBvD,CAAC,GAAI,IAAI,CAACyK,KAAK,CAACjP,CAAC,CAACN,QAAQ,CAAC,CAAC,IAAK,IAAIV,IAAI,CAACkG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAExF,QAAQ,CAAC,CAAC,GAClD,IAAI,CAACe,CAAC,CAACyG,GAAG,CAACsJ,EAAE,CAAC,CAAChJ,GAAG,CAAC,CAAC,CAAC,CAACA,GAAG,CAAC,IAAI,CAAC/G,CAAC,CAAC8G,GAAG,CAACiJ,EAAE,CAAC,CAAC,GACzC,IAAI,CAAC/P,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACP,GAAG,CAAC,CAAC,CAAC,CAACD,GAAG,CAACiJ,EAAE,CAACzI,MAAM,CAAC,CAAC,CAACP,GAAG,CAAC,IAAI,CAACyH,KAAK,CAACjP,CAAC,CAAC,CAAC;UACnES,CAAC,GAAI+D,CAAC,CAACuD,MAAM,CAAC,CAAC,CAACjB,IAAI,CAAC9G,CAAC,CAAC,CAAC8G,IAAI,CAAC9G,CAAC,CAAC;UAC/BqC,CAAC,GAAIrC,CAAC,CAACkH,GAAG,CAACzG,CAAC,CAAC,CAAC+G,GAAG,CAAChD,CAAC,CAAC,CAACsC,IAAI,CAAClF,CAAC,CAAC;UAC5BqO,CAAC,GAAI,IAAI,CAAC5N,CAAC,CAACkF,GAAG,CAAC,IAAI,CAAClF,CAAC,CAAC,CAACmF,GAAG,CAAC,IAAI,CAACyI,CAAC,CAAC;QACrC,OAAO,IAAIjR,IAAI,CAAC+P,GAAG,CAACM,QAAQ,CAAC,IAAI,CAACJ,KAAK,EAAExO,CAAC,EAAE4B,CAAC,EAAE4N,CAAC,CAAC;MACnD,CAAC;MAED;AACF;AACA;AACA;MACEV,QAAQ,EAAE,SAAAA,CAAA,EAAW;QACnB,IAAI,IAAI,CAACL,UAAU,IAAI,IAAI,CAACe,CAAC,CAACjK,MAAM,CAAC,CAAC,CAAC,EAAE;UACvC,OAAO,IAAIhH,IAAI,CAAC+P,GAAG,CAACC,KAAK,CAAC,IAAI,CAACC,KAAK,CAAC;QACvC;QACA,IAAIwB,EAAE,GAAG,IAAI,CAACR,CAAC,CAACtE,OAAO,CAAC,CAAC;UAAE+E,GAAG,GAAGD,EAAE,CAAC1I,MAAM,CAAC,CAAC;QAC5C,OAAO,IAAI/I,IAAI,CAAC+P,GAAG,CAACC,KAAK,CAAC,IAAI,CAACC,KAAK,EAAE,IAAI,CAACxO,CAAC,CAAC+G,GAAG,CAACkJ,GAAG,CAAC,CAACvK,UAAU,CAAC,CAAC,EAAE,IAAI,CAAC9D,CAAC,CAACmF,GAAG,CAACkJ,GAAG,CAAClJ,GAAG,CAACiJ,EAAE,CAAC,CAAC,CAACtK,UAAU,CAAC,CAAC,CAAC;MAC3G,CAAC;MAED;AACF;AACA;AACA;AACA;AACA;MACEmJ,IAAI,EAAE,SAAAA,CAAS7J,CAAC,EAAEkL,MAAM,EAAE;QACxB,IAAI,OAAOlL,CAAE,KAAK,QAAQ,EAAE;UAC1BA,CAAC,GAAG,CAACA,CAAC,CAAC;QACT,CAAC,MAAM,IAAIA,CAAC,CAACC,KAAK,KAAKrF,SAAS,EAAE;UAChCoF,CAAC,GAAGA,CAAC,CAACE,SAAS,CAAC,CAAC,CAACD,KAAK;QACzB;QAEA,IAAI7D,CAAC;UAAEgB,CAAC;UAAEd,GAAG,GAAG,IAAI/C,IAAI,CAAC+P,GAAG,CAACC,KAAK,CAAC,IAAI,CAACC,KAAK,CAAC,CAACG,KAAK,CAAC,CAAC;UAAEO,SAAS,GAAGgB,MAAM,CAAChB,SAAS,CAAC,CAAC;QAEtF,KAAK9N,CAAC,GAAC4D,CAAC,CAACzE,MAAM,GAAC,CAAC,EAAEa,CAAC,IAAE,CAAC,EAAEA,CAAC,EAAE,EAAE;UAC5B,KAAKgB,CAAC,GAAC7D,IAAI,CAACkG,EAAE,CAAC5B,SAAS,CAAC+B,KAAK,GAAC,CAAC,EAAExC,CAAC,IAAE,CAAC,EAAEA,CAAC,IAAE,CAAC,EAAE;YAC5Cd,GAAG,GAAGA,GAAG,CAAC8N,KAAK,CAAC,CAAC,CAACA,KAAK,CAAC,CAAC,CAACA,KAAK,CAAC,CAAC,CAACA,KAAK,CAAC,CAAC,CAACtI,GAAG,CAACoI,SAAS,CAAClK,CAAC,CAAC5D,CAAC,CAAC,IAAEgB,CAAC,GAAG,GAAG,CAAC,CAAC;UACzE;QACF;QAEA,OAAOd,GAAG;MACZ,CAAC;MAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;MACEyN,KAAK,EAAE,SAAAA,CAASoB,EAAE,EAAED,MAAM,EAAElB,EAAE,EAAEC,OAAO,EAAE;QACvC,IAAI,OAAOkB,EAAG,KAAK,QAAQ,EAAE;UAC3BA,EAAE,GAAG,CAACA,EAAE,CAAC;QACX,CAAC,MAAM,IAAIA,EAAE,CAAClL,KAAK,KAAKrF,SAAS,EAAE;UACjCuQ,EAAE,GAAGA,EAAE,CAACjL,SAAS,CAAC,CAAC,CAACD,KAAK;QAC3B;QAEA,IAAI,OAAO+J,EAAG,KAAK,QAAQ,EAAE;UAC3BA,EAAE,GAAG,CAACA,EAAE,CAAC;QACX,CAAC,MAAM,IAAIA,EAAE,CAAC/J,KAAK,KAAKrF,SAAS,EAAE;UACjCoP,EAAE,GAAGA,EAAE,CAAC9J,SAAS,CAAC,CAAC,CAACD,KAAK;QAC3B;QAEA,IAAI7D,CAAC;UAAEgB,CAAC;UAAEd,GAAG,GAAG,IAAI/C,IAAI,CAAC+P,GAAG,CAACC,KAAK,CAAC,IAAI,CAACC,KAAK,CAAC,CAACG,KAAK,CAAC,CAAC;UAAEyB,EAAE,GAAGF,MAAM,CAAChB,SAAS,CAAC,CAAC;UAC3EmB,EAAE,GAAGpB,OAAO,CAACC,SAAS,CAAC,CAAC;UAAEoB,EAAE;UAAEC,EAAE;QAEpC,KAAKnP,CAAC,GAAClB,IAAI,CAACoF,GAAG,CAAC6K,EAAE,CAAC5P,MAAM,EAACyO,EAAE,CAACzO,MAAM,CAAC,GAAC,CAAC,EAAEa,CAAC,IAAE,CAAC,EAAEA,CAAC,EAAE,EAAE;UACjDkP,EAAE,GAAGH,EAAE,CAAC/O,CAAC,CAAC,GAAG,CAAC;UACdmP,EAAE,GAAGvB,EAAE,CAAC5N,CAAC,CAAC,GAAG,CAAC;UACd,KAAKgB,CAAC,GAAC7D,IAAI,CAACkG,EAAE,CAAC5B,SAAS,CAAC+B,KAAK,GAAC,CAAC,EAAExC,CAAC,IAAE,CAAC,EAAEA,CAAC,IAAE,CAAC,EAAE;YAC5Cd,GAAG,GAAGA,GAAG,CAAC8N,KAAK,CAAC,CAAC,CAACA,KAAK,CAAC,CAAC,CAACA,KAAK,CAAC,CAAC,CAACA,KAAK,CAAC,CAAC,CAACtI,GAAG,CAACsJ,EAAE,CAACE,EAAE,IAAElO,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC0E,GAAG,CAACuJ,EAAE,CAACE,EAAE,IAAEnO,CAAC,GAAG,GAAG,CAAC,CAAC;UACrF;QACF;QAEA,OAAOd,GAAG;MACZ,CAAC;MAED+N,MAAM,EAAE,SAAAA,CAAA,EAAW;QACjB,OAAO,IAAI,CAACP,QAAQ,CAAC,CAAC,CAACO,MAAM,CAAC,CAAC,CAACV,KAAK,CAAC,CAAC;MACzC,CAAC;MAEDY,OAAO,EAAE,SAAAA,CAAA,EAAW;QAClB,IAAIQ,EAAE,GAAG,IAAI,CAACP,CAAC,CAAClI,MAAM,CAAC,CAAC;UAAEkJ,EAAE,GAAGT,EAAE,CAACzI,MAAM,CAAC,CAAC;UAAEmJ,EAAE,GAAGD,EAAE,CAACzJ,GAAG,CAACgJ,EAAE,CAAC;QAC3D,OAAO,IAAI,CAACnO,CAAC,CAAC0F,MAAM,CAAC,CAAC,CAAC/B,MAAM,CACpB,IAAI,CAACiJ,KAAK,CAACrN,CAAC,CAAC4F,GAAG,CAAC0J,EAAE,CAAC,CAAC3J,GAAG,CAAC,IAAI,CAAC9G,CAAC,CAAC+G,GAAG,CACjC,IAAI,CAACyH,KAAK,CAACjP,CAAC,CAACwH,GAAG,CAACyJ,EAAE,CAAC,CAAC1J,GAAG,CAAC,IAAI,CAAC9G,CAAC,CAACsH,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACzD;IACF,CAAC;;IAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACA/I,IAAI,CAAC+P,GAAG,CAACE,KAAK,GAAG,UAASkC,KAAK,EAAExK,CAAC,EAAE3G,CAAC,EAAE4B,CAAC,EAAEnB,CAAC,EAAE4B,CAAC,EAAE;MAC9C,IAAI,CAAC8M,KAAK,GAAGgC,KAAK;MAClB,IAAI,CAACxK,CAAC,GAAG,IAAI3H,IAAI,CAACkG,EAAE,CAACyB,CAAC,CAAC;MACvB,IAAI,CAAC3G,CAAC,GAAG,IAAImR,KAAK,CAACnR,CAAC,CAAC;MACrB,IAAI,CAAC4B,CAAC,GAAG,IAAIuP,KAAK,CAACvP,CAAC,CAAC;MACrB,IAAI,CAACwP,CAAC,GAAG,IAAIpS,IAAI,CAAC+P,GAAG,CAACC,KAAK,CAAC,IAAI,EAAE,IAAImC,KAAK,CAAC1Q,CAAC,CAAC,EAAE,IAAI0Q,KAAK,CAAC9O,CAAC,CAAC,CAAC;IAC/D,CAAC;IAEDrD,IAAI,CAAC+P,GAAG,CAACE,KAAK,CAAC3L,SAAS,CAACgH,QAAQ,GAAG,UAAUC,IAAI,EAAE;MAClD,IAAIJ,CAAC,GAAGnL,IAAI,CAACc,QAAQ;QAAEuB,CAAC,GAAG,IAAI,CAAC8N,KAAK,CAAC7L,SAAS,CAAC4G,QAAQ,GAAG,CAAC,GAAG,CAAC,CAAC;QAC7D7C,CAAC,GAAG,IAAIrI,IAAI,CAAC+P,GAAG,CAACC,KAAK,CAAC,IAAI,EAAE,IAAI,CAACG,KAAK,CAAC7E,QAAQ,CAACH,CAAC,CAACpK,QAAQ,CAACwK,IAAI,EAAE,CAAC,EAAElJ,CAAC,CAAC,CAAC,EACjD,IAAI,CAAC8N,KAAK,CAAC7E,QAAQ,CAACH,CAAC,CAACpK,QAAQ,CAACwK,IAAI,EAAElJ,CAAC,EAAE,CAAC,GAACA,CAAC,CAAC,CAAC,CAAC;MACzE,IAAI,CAACgG,CAAC,CAAC2I,OAAO,CAAC,CAAC,EAAE;QAChB,MAAM,IAAIhR,IAAI,CAACO,SAAS,CAACC,OAAO,CAAC,mBAAmB,CAAC;MACvD;MACA,OAAO6H,CAAC;IACV,CAAC;IAEDrI,IAAI,CAAC+P,GAAG,CAACsC,MAAM,GAAG;MAChBC,IAAI,EAAE,IAAItS,IAAI,CAAC+P,GAAG,CAACE,KAAK,CACtBjQ,IAAI,CAACkG,EAAE,CAAC2G,KAAK,CAACM,IAAI,EAClB,oDAAoD,EACpD,CAAC,CAAC,EACF,oDAAoD,EACpD,oDAAoD,EACpD,oDAAoD,CAAC;MAEvDoF,IAAI,EAAE,IAAIvS,IAAI,CAAC+P,GAAG,CAACE,KAAK,CACtBjQ,IAAI,CAACkG,EAAE,CAAC2G,KAAK,CAACO,IAAI,EAClB,4DAA4D,EAC5D,CAAC,CAAC,EACF,4DAA4D,EAC5D,4DAA4D,EAC5D,4DAA4D,CAAC;MAE/DoF,IAAI,EAAE,IAAIxS,IAAI,CAAC+P,GAAG,CAACE,KAAK,CACtBjQ,IAAI,CAACkG,EAAE,CAAC2G,KAAK,CAACQ,IAAI,EAClB,oEAAoE,EACpE,CAAC,CAAC,EACF,oEAAoE,EACpE,oEAAoE,EACpE,oEAAoE,CAAC;MAEvEoF,IAAI,EAAE,IAAIzS,IAAI,CAAC+P,GAAG,CAACE,KAAK,CACtBjQ,IAAI,CAACkG,EAAE,CAAC2G,KAAK,CAACS,IAAI,EAClB,oGAAoG,EACpG,CAAC,CAAC,EACF,oGAAoG,EACpG,oGAAoG,EACpG,oGAAoG,CAAC;MAEvGoF,IAAI,EAAE,IAAI1S,IAAI,CAAC+P,GAAG,CAACE,KAAK,CACtBjQ,IAAI,CAACkG,EAAE,CAAC2G,KAAK,CAACU,IAAI,EAClB,uIAAuI,EACvI,CAAC,CAAC,EACF,uIAAuI,EACvI,sIAAsI,EACtI,uIAAuI,CAAC;MAE1IoF,IAAI,EAAE,IAAI3S,IAAI,CAAC+P,GAAG,CAACE,KAAK,CACtBjQ,IAAI,CAACkG,EAAE,CAAC2G,KAAK,CAACG,KAAK,EACnB,oDAAoD,EACpD,CAAC,EACD,CAAC,EACD,oDAAoD,EACpD,oDAAoD,CAAC;MAEvD4F,IAAI,EAAE,IAAI5S,IAAI,CAAC+P,GAAG,CAACE,KAAK,CACtBjQ,IAAI,CAACkG,EAAE,CAAC2G,KAAK,CAACI,KAAK,EACnB,8DAA8D,EAC9D,CAAC,EACD,CAAC,EACD,4DAA4D,EAC5D,4DAA4D,CAAC;MAE/D4F,IAAI,EAAE,IAAI7S,IAAI,CAAC+P,GAAG,CAACE,KAAK,CACtBjQ,IAAI,CAACkG,EAAE,CAAC2G,KAAK,CAACK,KAAK,EACnB,oEAAoE,EACpE,CAAC,EACD,CAAC,EACD,oEAAoE,EACpE,oEAAoE;IAExE,CAAC;IAEDlN,IAAI,CAAC+P,GAAG,CAAC+C,SAAS,GAAG,UAAU7C,KAAK,EAAE;MACpC,IAAI8C,QAAQ;MACZ,KAAKA,QAAQ,IAAI/S,IAAI,CAAC+P,GAAG,CAACsC,MAAM,EAAE;QAChC,IAAIrS,IAAI,CAAC+P,GAAG,CAACsC,MAAM,CAACW,cAAc,CAACD,QAAQ,CAAC,EAAE;UAC5C,IAAI/S,IAAI,CAAC+P,GAAG,CAACsC,MAAM,CAACU,QAAQ,CAAC,KAAK9C,KAAK,EAAE;YACvC,OAAO8C,QAAQ;UACjB;QACF;MACF;MAEA,MAAM,IAAI/S,IAAI,CAACO,SAAS,CAACI,OAAO,CAAC,eAAe,CAAC;IACnD,CAAC;IAEDX,IAAI,CAAC+P,GAAG,CAACkD,WAAW,GAAG,UAAUvP,GAAG,EAAE;MACpC,IAAIwP,KAAK,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC;MAEhC,IAAI,CAACxP,GAAG,IAAI,CAACA,GAAG,CAACuM,KAAK,IAAI,CAACjQ,IAAI,CAAC+P,GAAG,CAACsC,MAAM,CAAC3O,GAAG,CAACuM,KAAK,CAAC,EAAE;QAAE,MAAM,IAAIjQ,IAAI,CAACO,SAAS,CAACI,OAAO,CAAC,uBAAuB,CAAC;MAAE;MACpH,IAAIuS,KAAK,CAACC,OAAO,CAACzP,GAAG,CAAC0P,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;QAAE,MAAM,IAAIpT,IAAI,CAACO,SAAS,CAACI,OAAO,CAAC,cAAc,CAAC;MAAE;MAExF,IAAIsP,KAAK,GAAGjQ,IAAI,CAAC+P,GAAG,CAACsC,MAAM,CAAC3O,GAAG,CAACuM,KAAK,CAAC;MAEtC,IAAIvM,GAAG,CAAC2P,SAAS,EAAE;QACjB,IAAI,CAAC3P,GAAG,CAACwH,QAAQ,EAAE;UAAE,MAAM,IAAIlL,IAAI,CAACO,SAAS,CAACI,OAAO,CAAC,kBAAkB,CAAC;QAAE;QAC3E,IAAIuK,QAAQ,GAAG,IAAIlL,IAAI,CAACkG,EAAE,CAACxC,GAAG,CAACwH,QAAQ,CAAC;QACxC,OAAO,IAAIlL,IAAI,CAAC+P,GAAG,CAACrM,GAAG,CAAC0P,IAAI,CAAC,CAACC,SAAS,CAACpD,KAAK,EAAE/E,QAAQ,CAAC;MAC1D,CAAC,MAAM;QACL,IAAI,CAACxH,GAAG,CAACsM,KAAK,EAAE;UAAE,MAAM,IAAIhQ,IAAI,CAACO,SAAS,CAACI,OAAO,CAAC,eAAe,CAAC;QAAE;QAErE,IAAIqP,KAAK,GAAGC,KAAK,CAAC3E,QAAQ,CAACtL,IAAI,CAACM,KAAK,CAACgT,GAAG,CAACrI,MAAM,CAACvH,GAAG,CAACsM,KAAK,CAAC,CAAC;QAC5D,OAAO,IAAIhQ,IAAI,CAAC+P,GAAG,CAACrM,GAAG,CAAC0P,IAAI,CAAC,CAACG,SAAS,CAACtD,KAAK,EAAED,KAAK,CAAC;MACvD;IACF,CAAC;;IAED;AACA;IACAhQ,IAAI,CAAC+P,GAAG,CAACyD,QAAQ,GAAG;MAClB;AACF;AACA;AACA;AACA;MACED,SAAS,EAAE,SAAAA,CAAStD,KAAK,EAAED,KAAK,EAAE;QAChC,IAAI,CAACyD,MAAM,GAAGxD,KAAK;QACnB,IAAI,CAACyD,eAAe,GAAGzD,KAAK,CAACtI,CAAC,CAACvF,SAAS,CAAC,CAAC;QAC1C,IAAI4N,KAAK,YAAYhB,KAAK,EAAE;UAC1B,IAAI,CAAC2E,MAAM,GAAG1D,KAAK,CAAC3E,QAAQ,CAAC0E,KAAK,CAAC;QACrC,CAAC,MAAM;UACL,IAAI,CAAC2D,MAAM,GAAG3D,KAAK;QACrB;QAEA,IAAI,CAAC4D,SAAS,GAAG,YAAY;UAC3B,IAAId,SAAS,GAAG9S,IAAI,CAAC+P,GAAG,CAAC+C,SAAS,CAAC7C,KAAK,CAAC;UACzC,OAAO;YACLmD,IAAI,EAAE,IAAI,CAACS,OAAO,CAAC,CAAC;YACpBR,SAAS,EAAE,KAAK;YAChBrD,KAAK,EAAEhQ,IAAI,CAACM,KAAK,CAACgT,GAAG,CAAChI,QAAQ,CAAC,IAAI,CAACqI,MAAM,CAAC1I,MAAM,CAAC,CAAC,CAAC;YACpDgF,KAAK,EAAE6C;UACT,CAAC;QACH,CAAC;;QAED;AACJ;AACA;QACI,IAAI,CAACgB,GAAG,GAAG,YAAW;UACpB,IAAIC,SAAS,GAAG,IAAI,CAACJ,MAAM,CAAC1I,MAAM,CAAC,CAAC;UACpC,IAAI3I,GAAG,GAAGtC,IAAI,CAACc,QAAQ,CAACsB,SAAS,CAAC2R,SAAS,CAAC;UAC5C,IAAItS,CAAC,GAAGzB,IAAI,CAACc,QAAQ,CAACC,QAAQ,CAACgT,SAAS,EAAE,CAAC,EAAEzR,GAAG,GAAC,CAAC,CAAC;UACnD,IAAIe,CAAC,GAAGrD,IAAI,CAACc,QAAQ,CAACC,QAAQ,CAACgT,SAAS,EAAEzR,GAAG,GAAC,CAAC,CAAC;UAChD,OAAO;YAAEb,CAAC,EAAEA,CAAC;YAAE4B,CAAC,EAAEA;UAAE,CAAC;QACvB,CAAC;MACH,CAAC;MAED;AACF;AACA;AACA;AACA;MACEgQ,SAAS,EAAE,SAAAA,CAASpD,KAAK,EAAE/E,QAAQ,EAAE;QACnC,IAAI,CAACuI,MAAM,GAAGxD,KAAK;QACnB,IAAI,CAACyD,eAAe,GAAGzD,KAAK,CAACtI,CAAC,CAACvF,SAAS,CAAC,CAAC;QAC1C,IAAI,CAAC4R,SAAS,GAAG9I,QAAQ;QAEzB,IAAI,CAAC0I,SAAS,GAAG,YAAY;UAC3B,IAAI1I,QAAQ,GAAG,IAAI,CAAC4I,GAAG,CAAC,CAAC;UACzB,IAAIhB,SAAS,GAAG9S,IAAI,CAAC+P,GAAG,CAAC+C,SAAS,CAAC7C,KAAK,CAAC;UACzC,OAAO;YACLmD,IAAI,EAAE,IAAI,CAACS,OAAO,CAAC,CAAC;YACpBR,SAAS,EAAE,IAAI;YACfnI,QAAQ,EAAElL,IAAI,CAACM,KAAK,CAACgT,GAAG,CAAChI,QAAQ,CAACJ,QAAQ,CAAC;YAC3C+E,KAAK,EAAE6C;UACT,CAAC;QACH,CAAC;;QAED;AACJ;AACA;QACI,IAAI,CAACgB,GAAG,GAAG,YAAY;UACrB,OAAO,IAAI,CAACE,SAAS,CAAC/I,MAAM,CAAC,CAAC;QAChC,CAAC;MACH;IACF,CAAC;;IAED;IACAjL,IAAI,CAAC+P,GAAG,CAACyD,QAAQ,CAAC7T,YAAY,GAAG,UAASsU,EAAE,EAAE;MAC5C,OAAO,SAAStU,YAAYA,CAACsQ,KAAK,EAAExC,QAAQ,EAAEyG,GAAG,EAAE;QACjDjE,KAAK,GAAGA,KAAK,IAAI,GAAG;QAEpB,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;UAC7BA,KAAK,GAAGjQ,IAAI,CAAC+P,GAAG,CAACsC,MAAM,CAAC,GAAG,GAACpC,KAAK,CAAC;UAClC,IAAIA,KAAK,KAAK5O,SAAS,EAAE;YACvB,MAAM,IAAIrB,IAAI,CAACO,SAAS,CAACI,OAAO,CAAC,eAAe,CAAC;UACnD;QACF;QACAuT,GAAG,GAAGA,GAAG,IAAIlU,IAAI,CAACkG,EAAE,CAACsH,MAAM,CAACyC,KAAK,CAACtI,CAAC,EAAE8F,QAAQ,CAAC;QAE9C,IAAI0G,GAAG,GAAGlE,KAAK,CAACmC,CAAC,CAAC9B,IAAI,CAAC4D,GAAG,CAAC;QAC3B,OAAO;UAAEC,GAAG,EAAE,IAAInU,IAAI,CAAC+P,GAAG,CAACkE,EAAE,CAAC,CAACV,SAAS,CAACtD,KAAK,EAAEkE,GAAG,CAAC;UAC3CD,GAAG,EAAE,IAAIlU,IAAI,CAAC+P,GAAG,CAACkE,EAAE,CAAC,CAACZ,SAAS,CAACpD,KAAK,EAAEiE,GAAG;QAAE,CAAC;MACxD,CAAC;IACH,CAAC;;IAED;IACAlU,IAAI,CAAC+P,GAAG,CAACqE,OAAO,GAAG;MACjB;AACF;AACA;AACA;AACA;AACA;MACEzU,YAAY,EAAEK,IAAI,CAAC+P,GAAG,CAACyD,QAAQ,CAAC7T,YAAY,CAAC,SAAS,CAAC;MACvD;AACF;AACA;AACA;MACE4T,SAAS,EAAE,SAAAA,CAAUtD,KAAK,EAAED,KAAK,EAAE;QACjChQ,IAAI,CAAC+P,GAAG,CAACyD,QAAQ,CAACD,SAAS,CAACc,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;MACpD,CAAC;MACD;AACF;AACA;AACA;MACEjB,SAAS,EAAE,SAAAA,CAAUpD,KAAK,EAAE/E,QAAQ,EAAE;QACpClL,IAAI,CAAC+P,GAAG,CAACyD,QAAQ,CAACH,SAAS,CAACgB,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;MACpD;IACF,CAAC;IAEDtU,IAAI,CAAC+P,GAAG,CAACqE,OAAO,CAACb,SAAS,CAACjP,SAAS,GAAG;MACrC;AACF;AACA;AACA;MACEiQ,GAAG,EAAE,SAAAA,CAAS9G,QAAQ,EAAE;QACtB,IAAIyG,GAAG,GAAGlU,IAAI,CAACkG,EAAE,CAACsH,MAAM,CAAC,IAAI,CAACiG,MAAM,CAAC9L,CAAC,EAAE8F,QAAQ,CAAC;UAC7C+G,GAAG,GAAG,IAAI,CAACf,MAAM,CAACrB,CAAC,CAAC9B,IAAI,CAAC4D,GAAG,CAAC,CAACjJ,MAAM,CAAC,CAAC;UACtCvH,GAAG,GAAG1D,IAAI,CAACE,IAAI,CAACL,MAAM,CAACK,IAAI,CAAC,IAAI,CAACyT,MAAM,CAACrD,IAAI,CAAC4D,GAAG,CAAC,CAACjJ,MAAM,CAAC,CAAC,CAAC;QAC/D,OAAO;UAAEvH,GAAG,EAAEA,GAAG;UAAE8Q,GAAG,EAAEA;QAAI,CAAC;MAC/B,CAAC;MAEDX,OAAO,EAAE,SAAAA,CAAA,EAAW;QAClB,OAAO,SAAS;MAClB;IACF,CAAC;IAED7T,IAAI,CAAC+P,GAAG,CAACqE,OAAO,CAACf,SAAS,CAAC/O,SAAS,GAAG;MACrC;AACF;AACA;AACA;MACEmQ,KAAK,EAAE,SAAAA,CAASD,GAAG,EAAE;QACnB,OAAOxU,IAAI,CAACE,IAAI,CAACL,MAAM,CAACK,IAAI,CAAC,IAAI,CAACuT,MAAM,CAACnI,QAAQ,CAACkJ,GAAG,CAAC,CAAClE,IAAI,CAAC,IAAI,CAAC0D,SAAS,CAAC,CAAC/I,MAAM,CAAC,CAAC,CAAC;MACvF,CAAC;MAED;AACF;AACA;AACA;MACEyJ,EAAE,EAAE,SAAAA,CAASC,EAAE,EAAE;QACf,OAAO3U,IAAI,CAACE,IAAI,CAACL,MAAM,CAACK,IAAI,CAACyU,EAAE,CAAChB,MAAM,CAACrD,IAAI,CAAC,IAAI,CAAC0D,SAAS,CAAC,CAAC/I,MAAM,CAAC,CAAC,CAAC;MACvE,CAAC;MAED;AACF;AACA;AACA;AACA;MACE2J,QAAQ,EAAE,SAAAA,CAASD,EAAE,EAAE;QACrB,OAAOA,EAAE,CAAChB,MAAM,CAACrD,IAAI,CAAC,IAAI,CAAC0D,SAAS,CAAC,CAACvS,CAAC,CAACwJ,MAAM,CAAC,CAAC;MAClD,CAAC;MAED4I,OAAO,EAAE,SAAAA,CAAA,EAAW;QAClB,OAAO,SAAS;MAClB;IACF,CAAC;;IAED;IACA7T,IAAI,CAAC+P,GAAG,CAAC8E,KAAK,GAAG;MACf;AACF;AACA;AACA;AACA;AACA;MACElV,YAAY,EAAEK,IAAI,CAAC+P,GAAG,CAACyD,QAAQ,CAAC7T,YAAY,CAAC,OAAO;IACtD,CAAC;;IAED;AACA;AACA;AACA;IACAK,IAAI,CAAC+P,GAAG,CAAC8E,KAAK,CAACtB,SAAS,GAAG,UAAUtD,KAAK,EAAED,KAAK,EAAE;MACjDhQ,IAAI,CAAC+P,GAAG,CAACyD,QAAQ,CAACD,SAAS,CAACc,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;IACpD,CAAC;;IAED;IACAtU,IAAI,CAAC+P,GAAG,CAAC8E,KAAK,CAACtB,SAAS,CAACjP,SAAS,GAAG;MACnC;AACF;AACA;AACA;AACA;MACEwQ,MAAM,EAAE,SAAAA,CAAS5U,IAAI,EAAE6U,EAAE,EAAEC,iBAAiB,EAAE;QAC5C,IAAIhV,IAAI,CAACc,QAAQ,CAACsB,SAAS,CAAClC,IAAI,CAAC,GAAG,IAAI,CAACwT,eAAe,EAAE;UACxDxT,IAAI,GAAGF,IAAI,CAACc,QAAQ,CAACQ,KAAK,CAACpB,IAAI,EAAE,IAAI,CAACwT,eAAe,CAAC;QACxD;QACA,IAAIvI,CAAC,GAAGnL,IAAI,CAACc,QAAQ;UACjByI,CAAC,GAAG,IAAI,CAACkK,MAAM,CAAC9L,CAAC;UACjBtF,CAAC,GAAG,IAAI,CAACqR,eAAe;UACxB/L,CAAC,GAAG3H,IAAI,CAACkG,EAAE,CAACoF,QAAQ,CAACH,CAAC,CAACpK,QAAQ,CAACgU,EAAE,EAAC,CAAC,EAAC1S,CAAC,CAAC,CAAC;UACxC4S,EAAE,GAAGjV,IAAI,CAACkG,EAAE,CAACoF,QAAQ,CAACH,CAAC,CAACpK,QAAQ,CAACgU,EAAE,EAAC1S,CAAC,EAAC,CAAC,GAACA,CAAC,CAAC,CAAC;UAC3C8C,CAAC,GAAG6P,iBAAiB,GAAGC,EAAE,GAAGA,EAAE,CAAC7M,UAAU,CAACmB,CAAC,CAAC;UAC7C2L,EAAE,GAAGlV,IAAI,CAACkG,EAAE,CAACoF,QAAQ,CAACpL,IAAI,CAAC,CAACsI,GAAG,CAACrD,CAAC,CAAC,CAAC4C,GAAG,CAACwB,CAAC,CAAC;UACzC4L,EAAE,GAAGxN,CAAC,CAACa,GAAG,CAACrD,CAAC,CAAC,CAAC4C,GAAG,CAACwB,CAAC,CAAC;UACpB6L,EAAE,GAAG,IAAI,CAAC3B,MAAM,CAACrB,CAAC,CAAC5B,KAAK,CAAC0E,EAAE,EAAEC,EAAE,EAAE,IAAI,CAACxB,MAAM,CAAC,CAAClS,CAAC;QACnD,IAAIkG,CAAC,CAACX,MAAM,CAAC,CAAC,CAAC,IAAIiO,EAAE,CAACjO,MAAM,CAAC,CAAC,CAAC,IAAIW,CAAC,CAACN,aAAa,CAACkC,CAAC,CAAC,IAAI0L,EAAE,CAAC5N,aAAa,CAACkC,CAAC,CAAC,IAAI,CAAC6L,EAAE,CAACpO,MAAM,CAACW,CAAC,CAAC,EAAE;UAC7F,IAAIqN,iBAAiB,KAAK3T,SAAS,EAAE;YACnC,OAAO,IAAI,CAACyT,MAAM,CAAC5U,IAAI,EAAE6U,EAAE,EAAE,IAAI,CAAC;UACpC,CAAC,MAAM;YACL,MAAO,IAAI/U,IAAI,CAACO,SAAS,CAACC,OAAO,CAAC,4BAA4B,CAAC;UACjE;QACF;QACA,OAAO,IAAI;MACb,CAAC;MAEDqT,OAAO,EAAE,SAAAA,CAAA,EAAW;QAClB,OAAO,OAAO;MAChB;IACF,CAAC;;IAED;AACA;AACA;AACA;IACA7T,IAAI,CAAC+P,GAAG,CAAC8E,KAAK,CAACxB,SAAS,GAAG,UAAUpD,KAAK,EAAE/E,QAAQ,EAAE;MACpDlL,IAAI,CAAC+P,GAAG,CAACyD,QAAQ,CAACH,SAAS,CAACgB,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;IACpD,CAAC;;IAED;IACAtU,IAAI,CAAC+P,GAAG,CAAC8E,KAAK,CAACxB,SAAS,CAAC/O,SAAS,GAAG;MACnC;AACF;AACA;AACA;AACA;MACE+Q,IAAI,EAAE,SAAAA,CAASnV,IAAI,EAAEuN,QAAQ,EAAEuH,iBAAiB,EAAEM,gBAAgB,EAAE;QAClE,IAAItV,IAAI,CAACc,QAAQ,CAACsB,SAAS,CAAClC,IAAI,CAAC,GAAG,IAAI,CAACwT,eAAe,EAAE;UACxDxT,IAAI,GAAGF,IAAI,CAACc,QAAQ,CAACQ,KAAK,CAACpB,IAAI,EAAE,IAAI,CAACwT,eAAe,CAAC;QACxD;QACA,IAAInK,CAAC,GAAI,IAAI,CAACkK,MAAM,CAAC9L,CAAC;UAClBtF,CAAC,GAAIkH,CAAC,CAACnH,SAAS,CAAC,CAAC;UAClBqE,CAAC,GAAI6O,gBAAgB,IAAItV,IAAI,CAACkG,EAAE,CAACsH,MAAM,CAACjE,CAAC,CAACrB,GAAG,CAAC,CAAC,CAAC,EAAEuF,QAAQ,CAAC,CAAClF,GAAG,CAAC,CAAC,CAAC;UAClEZ,CAAC,GAAI,IAAI,CAAC8L,MAAM,CAACrB,CAAC,CAAC9B,IAAI,CAAC7J,CAAC,CAAC,CAAChF,CAAC,CAACsG,GAAG,CAACwB,CAAC,CAAC;UACnC0L,EAAE,GAAGjV,IAAI,CAACkG,EAAE,CAACoF,QAAQ,CAACpL,IAAI,CAAC,CAACqI,GAAG,CAACZ,CAAC,CAACa,GAAG,CAAC,IAAI,CAACwL,SAAS,CAAC,CAAC;UACtD7O,CAAC,GAAI6P,iBAAiB,GAAGC,EAAE,CAAC7M,UAAU,CAACmB,CAAC,CAAC,CAACf,GAAG,CAAC/B,CAAC,CAAC,CAACsB,GAAG,CAACwB,CAAC,CAAC,GAChD0L,EAAE,CAACzM,GAAG,CAAC/B,CAAC,CAAC2B,UAAU,CAACmB,CAAC,CAAC,CAAC,CAACxB,GAAG,CAACwB,CAAC,CAAC;QACzC,OAAOvJ,IAAI,CAACc,QAAQ,CAACe,MAAM,CAAC8F,CAAC,CAACsD,MAAM,CAAC5I,CAAC,CAAC,EAAE8C,CAAC,CAAC8F,MAAM,CAAC5I,CAAC,CAAC,CAAC;MACvD,CAAC;MAEDwR,OAAO,EAAE,SAAAA,CAAA,EAAW;QAClB,OAAO,OAAO;MAChB;IACF,CAAC;IACD;AACA;AACA;AACA;IACA,CAAC,YAAW;MAEZ;AACA;AACA;AACA;MACA7T,IAAI,CAACE,IAAI,CAACJ,SAAS,GAAG,UAAUI,IAAI,EAAE;QAClC,IAAIA,IAAI,EAAE;UACN,IAAI,CAACqV,EAAE,GAAGrV,IAAI,CAACqV,EAAE,CAACnU,KAAK,CAAC,CAAC,CAAC;UAC1B,IAAI,CAACoU,OAAO,GAAGtV,IAAI,CAACsV,OAAO,CAACpU,KAAK,CAAC,CAAC,CAAC;UACpC,IAAI,CAACqU,OAAO,GAAGvV,IAAI,CAACuV,OAAO;QAC/B,CAAC,MAAM;UACH,IAAI,CAACC,KAAK,CAAC,CAAC;QAChB;MACJ,CAAC;;MAED;AACA;AACA;AACA;AACA;AACA;MACA1V,IAAI,CAACE,IAAI,CAACJ,SAAS,CAACI,IAAI,GAAG,UAAUsE,IAAI,EAAE;QACzC,OAAQ,IAAIxE,IAAI,CAACE,IAAI,CAACJ,SAAS,CAAC,CAAC,CAAE6V,MAAM,CAACnR,IAAI,CAAC,CAACoR,QAAQ,CAAC,CAAC;MAC5D,CAAC;MAED5V,IAAI,CAACE,IAAI,CAACJ,SAAS,CAACwE,SAAS,GAAG;QAC5B;AACJ;AACA;AACA;QACIoR,KAAK,EAAE,SAAAA,CAAA,EAAY;UACf,IAAI,CAACH,EAAE,GAAGM,GAAG,CAACzU,KAAK,CAAC,CAAC,CAAC;UACtB,IAAI,CAACoU,OAAO,GAAG,EAAE;UACjB,IAAI,CAACC,OAAO,GAAG,CAAC;UAChB,OAAO,IAAI;QACf,CAAC;QAED;AACJ;AACA;AACA;AACA;QACIE,MAAM,EAAE,SAAAA,CAAUnR,IAAI,EAAE;UACpB,IAAK,OAAOA,IAAI,KAAK,QAAQ,EACzBA,IAAI,GAAGxE,IAAI,CAACM,KAAK,CAACgP,UAAU,CAACrE,MAAM,CAACzG,IAAI,CAAC;UAE7C,IAAI3B,CAAC;YAAED,CAAC,GAAG,IAAI,CAAC4S,OAAO,GAAGxV,IAAI,CAACc,QAAQ,CAACe,MAAM,CAAC,IAAI,CAAC2T,OAAO,EAAEhR,IAAI,CAAC;YAC9DgI,EAAE,GAAG,IAAI,CAACiJ,OAAO;YACjBK,EAAE,GAAG,IAAI,CAACL,OAAO,GAAGjJ,EAAE,GAAGxM,IAAI,CAACc,QAAQ,CAACsB,SAAS,CAACoC,IAAI,CAAC;UAC1D,IAAIsR,EAAE,GAAG,gBAAgB,EAAC;YACtB,MAAM,IAAI9V,IAAI,CAACO,SAAS,CAACI,OAAO,CAAC,qCAAqC,CAAC;UAC3E;UACA,KAAKkC,CAAC,GAAG,GAAG,GAAC2J,EAAE,IAAK,GAAG,GAACA,EAAE,GAAI,GAAG,CAAC,EAAE3J,CAAC,IAAIiT,EAAE,EAAEjT,CAAC,IAAG,GAAG,EAAE;YAClD,IAAI4I,KAAK,GAAG7I,CAAC,CAACmT,MAAM,CAAC,CAAC,EAAC,EAAE,CAAC;YAC1B,KAAM,IAAI5K,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAE,EAAEA,CAAC,EACxBM,KAAK,CAACN,CAAC,CAAC,GAAG6K,IAAI,CAACvK,KAAK,CAACN,CAAC,CAAC,CAAC;YAE7B8K,MAAM,CAACC,IAAI,CAAE,IAAI,EAAEzK,KAAM,CAAC;UAC9B;UAEA,OAAO,IAAI;QACf,CAAC;QAED;AACJ;AACA;AACA;QACImK,QAAQ,EAAE,SAAAA,CAAA,EAAY;UAClB,IAAIhT,CAAC,GAAG5C,IAAI,CAACc,QAAQ,CAACe,MAAM,CAAE,IAAI,CAAC2T,OAAO,EAAE,CAAExV,IAAI,CAACc,QAAQ,CAAC0B,OAAO,CAAC,CAAC,EAAC,CAAC,CAAC,CAAG,CAAC;YACxEH,CAAC,GAAG,CAAE,IAAI,CAACoT,OAAO,GAAG,CAAC,IAAK,GAAG;YAC9BxE,CAAC,GAAG,CAAE5O,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAKA,CAAC,GAAG,GAAG;YACrC8T,EAAE,GAAGlF,CAAC,GAAG,EAAE;UAEf,IAAKkF,EAAE,GAAG,CAAC,EACPvT,CAAC,GAAG5C,IAAI,CAACc,QAAQ,CAACe,MAAM,CAAEe,CAAC,EAAE,CAAE5C,IAAI,CAACc,QAAQ,CAAC0B,OAAO,CAAC2T,EAAE,EAAC,CAAC,CAAC,CAAG,CAAC;UAClE,OAAQlF,CAAC,IAAI,EAAE,EAAEA,CAAC,IAAI,EAAE,EACpBrO,CAAC,CAACM,IAAI,CAAC,CAAC,CAAC;UAEbN,CAAC,CAACM,IAAI,CAAE8S,IAAI,CAAE,IAAI,CAACP,OAAO,GAAG,CAAE,CAAE,CAAC;UAClC7S,CAAC,CAACM,IAAI,CAAE8S,IAAI,CAAErU,IAAI,CAACC,KAAK,CAAC,IAAI,CAAC6T,OAAO,GAAG,WAAW,CAAE,CAAE,CAAC;UAExD,OAAQ7S,CAAC,CAACZ,MAAM,EAAG;YACf,IAAIyJ,KAAK,GAAG7I,CAAC,CAACmT,MAAM,CAAC,CAAC,EAAC,EAAE,CAAC;YAC1B,KAAM,IAAI5K,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAE,EAAEA,CAAC,EACxBM,KAAK,CAACN,CAAC,CAAC,GAAG6K,IAAI,CAACvK,KAAK,CAACN,CAAC,CAAC,CAAC;YAE7B8K,MAAM,CAACC,IAAI,CAAE,IAAI,EAAEzK,KAAM,CAAC;UAC9B;UAEA,IAAIlB,CAAC,GAAG,IAAI,CAACgL,EAAE;UACf,IAAI,CAACG,KAAK,CAAC,CAAC;UAEZ,KAAM,IAAIvK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAE,EAAEA,CAAC,EACvBZ,CAAC,CAACY,CAAC,CAAC,GAAG6K,IAAI,CAACzL,CAAC,CAACY,CAAC,CAAC,CAAC;UAErB,OAAOZ,CAAC;QACZ;MACJ,CAAC;MAED,IAAIsL,GAAG,GAAG,CAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,CAAE;MAExE,IAAIO,GAAG,GAAG,CAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,CAAE;MACxE,IAAIC,GAAG,GAAG,CAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,CAAE;MACxE,KAAM,IAAIxT,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAE,EAAEA,CAAC,EAAG;QAC3B,KAAM,IAAIgB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAE,EAAEA,CAAC,EAAG;UAC3BuS,GAAG,CAACL,MAAM,CAAClT,CAAC,EAAC,CAAC,EAACuT,GAAG,CAACvT,CAAC,CAAC,CAAC;UACtBwT,GAAG,CAACN,MAAM,CAAClT,CAAC,EAAC,CAAC,EAACwT,GAAG,CAACxT,CAAC,CAAC,CAAC;QAC1B;MACJ;MAEA,IAAIyT,GAAG,GAAG,CAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC7D,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAG,CAAC,EAC7D,CAAC,EAAE,EAAE,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAG,CAAC,EAAE,EAAE,EAC7D,CAAC,EAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAC7D,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,EAAE,EAAE,EAAE,CAAE;MAC5E,IAAIC,GAAG,GAAG,CAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,EAAE,EAC7D,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAC9D,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAC7D,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAC9D,EAAE,EAAE,EAAE,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,CAAE;MAE5E,IAAIC,GAAG,GAAG,CAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAC7D,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAC9D,EAAE,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAC9D,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAC7D,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,CAAE;MAC5E,IAAIC,GAAG,GAAG,CAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAG,CAAC,EAC7D,CAAC,EAAE,EAAE,EAAE,EAAE,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC7D,CAAC,EAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAC9D,EAAE,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAC7D,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAG,CAAC,EAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAE;MAE5E,SAASC,GAAGA,CAACjV,CAAC,EAAC4B,CAAC,EAAC4N,CAAC,EAAE;QAChB,OAAOxP,CAAC,GAAG4B,CAAC,GAAG4N,CAAC;MACpB;MAEA,SAAS0F,GAAGA,CAAClV,CAAC,EAAC4B,CAAC,EAAC4N,CAAC,EAAE;QAChB,OAAQxP,CAAC,GAAG4B,CAAC,GAAK,CAAC5B,CAAC,GAAGwP,CAAE;MAC7B;MAEA,SAAS2F,GAAGA,CAACnV,CAAC,EAAC4B,CAAC,EAAC4N,CAAC,EAAE;QAChB,OAAO,CAACxP,CAAC,GAAG,CAAC4B,CAAC,IAAI4N,CAAC;MACvB;MAEA,SAAS4F,GAAGA,CAACpV,CAAC,EAAC4B,CAAC,EAAC4N,CAAC,EAAE;QAChB,OAAQxP,CAAC,GAAGwP,CAAC,GAAK5N,CAAC,GAAG,CAAC4N,CAAE;MAC7B;MAEA,SAAS6F,GAAGA,CAACrV,CAAC,EAAC4B,CAAC,EAAC4N,CAAC,EAAE;QAChB,OAAOxP,CAAC,IAAI4B,CAAC,GAAG,CAAC4N,CAAC,CAAC;MACvB;MAEA,SAAS8F,IAAIA,CAACjI,CAAC,EAACzM,CAAC,EAAE;QACf,OAAQyM,CAAC,IAAIzM,CAAC,GAAKyM,CAAC,KAAM,EAAE,GAACzM,CAAG;MACpC;MAEA,SAAS2T,IAAIA,CAAClH,CAAC,EAAE;QACb,OAAS,CAACA,CAAC,GAAG,IAAI,IAAK,CAAC,KAAM,EAAE,GACvB,CAACA,CAAC,GAAG,IAAI,IAAK,CAAC,KAAO,CAAG,GACzB,CAACA,CAAC,GAAG,IAAI,IAAI,EAAE,MAAO,CAAG,GACzB,CAACA,CAAC,GAAG,IAAI,IAAI,EAAE,MAAM,EAAI;MACtC;MAEA,SAASmH,MAAMA,CAACe,CAAC,EAAE;QACf,IAAIC,EAAE,GAAG,IAAI,CAAC1B,EAAE,CAAC,CAAC,CAAC;UAAE2B,EAAE,GAAG,IAAI,CAAC3B,EAAE,CAAC,CAAC,CAAC;UAAE4B,EAAE,GAAG,IAAI,CAAC5B,EAAE,CAAC,CAAC,CAAC;UAAE6B,EAAE,GAAG,IAAI,CAAC7B,EAAE,CAAC,CAAC,CAAC;UAAE8B,EAAE,GAAG,IAAI,CAAC9B,EAAE,CAAC,CAAC,CAAC;UACnF+B,EAAE,GAAG,IAAI,CAAC/B,EAAE,CAAC,CAAC,CAAC;UAAEgC,EAAE,GAAG,IAAI,CAAChC,EAAE,CAAC,CAAC,CAAC;UAAEiC,EAAE,GAAG,IAAI,CAACjC,EAAE,CAAC,CAAC,CAAC;UAAEkC,EAAE,GAAG,IAAI,CAAClC,EAAE,CAAC,CAAC,CAAC;UAAEmC,EAAE,GAAG,IAAI,CAACnC,EAAE,CAAC,CAAC,CAAC;QAEvF,IAAI1R,CAAC,GAAG,CAAC;UAAEqN,CAAC;QAEZ,OAAQrN,CAAC,GAAG,EAAE,EAAE,EAAEA,CAAC,EAAG;UAClBqN,CAAC,GAAG6F,IAAI,CAAEE,EAAE,GAAGP,GAAG,CAACQ,EAAE,EAACC,EAAE,EAACC,EAAE,CAAC,GAAGJ,CAAC,CAACV,GAAG,CAACzS,CAAC,CAAC,CAAC,GAAGuS,GAAG,CAACvS,CAAC,CAAC,EAAE2S,GAAG,CAAC3S,CAAC,CAAE,CAAC,GAAGwT,EAAE;UAChEJ,EAAE,GAAGI,EAAE;UAAEA,EAAE,GAAGD,EAAE;UAAEA,EAAE,GAAGL,IAAI,CAACI,EAAE,EAAC,EAAE,CAAC;UAAEA,EAAE,GAAGD,EAAE;UAAEA,EAAE,GAAGhG,CAAC;UACnDA,CAAC,GAAG6F,IAAI,CAAEO,EAAE,GAAGR,GAAG,CAACS,EAAE,EAACC,EAAE,EAACC,EAAE,CAAC,GAAGT,CAAC,CAACT,GAAG,CAAC1S,CAAC,CAAC,CAAC,GAAGwS,GAAG,CAACxS,CAAC,CAAC,EAAE4S,GAAG,CAAC5S,CAAC,CAAE,CAAC,GAAG6T,EAAE;UAChEJ,EAAE,GAAGI,EAAE;UAAEA,EAAE,GAAGD,EAAE;UAAEA,EAAE,GAAGV,IAAI,CAACS,EAAE,EAAC,EAAE,CAAC;UAAEA,EAAE,GAAGD,EAAE;UAAEA,EAAE,GAAGrG,CAAC;QAAE;QACzD,OAAQrN,CAAC,GAAG,EAAE,EAAE,EAAEA,CAAC,EAAG;UAClBqN,CAAC,GAAG6F,IAAI,CAAEE,EAAE,GAAGN,GAAG,CAACO,EAAE,EAACC,EAAE,EAACC,EAAE,CAAC,GAAGJ,CAAC,CAACV,GAAG,CAACzS,CAAC,CAAC,CAAC,GAAGuS,GAAG,CAACvS,CAAC,CAAC,EAAE2S,GAAG,CAAC3S,CAAC,CAAE,CAAC,GAAGwT,EAAE;UAChEJ,EAAE,GAAGI,EAAE;UAAEA,EAAE,GAAGD,EAAE;UAAEA,EAAE,GAAGL,IAAI,CAACI,EAAE,EAAC,EAAE,CAAC;UAAEA,EAAE,GAAGD,EAAE;UAAEA,EAAE,GAAGhG,CAAC;UACnDA,CAAC,GAAG6F,IAAI,CAAEO,EAAE,GAAGT,GAAG,CAACU,EAAE,EAACC,EAAE,EAACC,EAAE,CAAC,GAAGT,CAAC,CAACT,GAAG,CAAC1S,CAAC,CAAC,CAAC,GAAGwS,GAAG,CAACxS,CAAC,CAAC,EAAE4S,GAAG,CAAC5S,CAAC,CAAE,CAAC,GAAG6T,EAAE;UAChEJ,EAAE,GAAGI,EAAE;UAAEA,EAAE,GAAGD,EAAE;UAAEA,EAAE,GAAGV,IAAI,CAACS,EAAE,EAAC,EAAE,CAAC;UAAEA,EAAE,GAAGD,EAAE;UAAEA,EAAE,GAAGrG,CAAC;QAAE;QACzD,OAAQrN,CAAC,GAAG,EAAE,EAAE,EAAEA,CAAC,EAAG;UAClBqN,CAAC,GAAG6F,IAAI,CAAEE,EAAE,GAAGL,GAAG,CAACM,EAAE,EAACC,EAAE,EAACC,EAAE,CAAC,GAAGJ,CAAC,CAACV,GAAG,CAACzS,CAAC,CAAC,CAAC,GAAGuS,GAAG,CAACvS,CAAC,CAAC,EAAE2S,GAAG,CAAC3S,CAAC,CAAE,CAAC,GAAGwT,EAAE;UAChEJ,EAAE,GAAGI,EAAE;UAAEA,EAAE,GAAGD,EAAE;UAAEA,EAAE,GAAGL,IAAI,CAACI,EAAE,EAAC,EAAE,CAAC;UAAEA,EAAE,GAAGD,EAAE;UAAEA,EAAE,GAAGhG,CAAC;UACnDA,CAAC,GAAG6F,IAAI,CAAEO,EAAE,GAAGV,GAAG,CAACW,EAAE,EAACC,EAAE,EAACC,EAAE,CAAC,GAAGT,CAAC,CAACT,GAAG,CAAC1S,CAAC,CAAC,CAAC,GAAGwS,GAAG,CAACxS,CAAC,CAAC,EAAE4S,GAAG,CAAC5S,CAAC,CAAE,CAAC,GAAG6T,EAAE;UAChEJ,EAAE,GAAGI,EAAE;UAAEA,EAAE,GAAGD,EAAE;UAAEA,EAAE,GAAGV,IAAI,CAACS,EAAE,EAAC,EAAE,CAAC;UAAEA,EAAE,GAAGD,EAAE;UAAEA,EAAE,GAAGrG,CAAC;QAAE;QACzD,OAAQrN,CAAC,GAAG,EAAE,EAAE,EAAEA,CAAC,EAAG;UAClBqN,CAAC,GAAG6F,IAAI,CAAEE,EAAE,GAAGJ,GAAG,CAACK,EAAE,EAACC,EAAE,EAACC,EAAE,CAAC,GAAGJ,CAAC,CAACV,GAAG,CAACzS,CAAC,CAAC,CAAC,GAAGuS,GAAG,CAACvS,CAAC,CAAC,EAAE2S,GAAG,CAAC3S,CAAC,CAAE,CAAC,GAAGwT,EAAE;UAChEJ,EAAE,GAAGI,EAAE;UAAEA,EAAE,GAAGD,EAAE;UAAEA,EAAE,GAAGL,IAAI,CAACI,EAAE,EAAC,EAAE,CAAC;UAAEA,EAAE,GAAGD,EAAE;UAAEA,EAAE,GAAGhG,CAAC;UACnDA,CAAC,GAAG6F,IAAI,CAAEO,EAAE,GAAGX,GAAG,CAACY,EAAE,EAACC,EAAE,EAACC,EAAE,CAAC,GAAGT,CAAC,CAACT,GAAG,CAAC1S,CAAC,CAAC,CAAC,GAAGwS,GAAG,CAACxS,CAAC,CAAC,EAAE4S,GAAG,CAAC5S,CAAC,CAAE,CAAC,GAAG6T,EAAE;UAChEJ,EAAE,GAAGI,EAAE;UAAEA,EAAE,GAAGD,EAAE;UAAEA,EAAE,GAAGV,IAAI,CAACS,EAAE,EAAC,EAAE,CAAC;UAAEA,EAAE,GAAGD,EAAE;UAAEA,EAAE,GAAGrG,CAAC;QAAE;QACzD,OAAQrN,CAAC,GAAG,EAAE,EAAE,EAAEA,CAAC,EAAG;UAClBqN,CAAC,GAAG6F,IAAI,CAAEE,EAAE,GAAGH,GAAG,CAACI,EAAE,EAACC,EAAE,EAACC,EAAE,CAAC,GAAGJ,CAAC,CAACV,GAAG,CAACzS,CAAC,CAAC,CAAC,GAAGuS,GAAG,CAACvS,CAAC,CAAC,EAAE2S,GAAG,CAAC3S,CAAC,CAAE,CAAC,GAAGwT,EAAE;UAChEJ,EAAE,GAAGI,EAAE;UAAEA,EAAE,GAAGD,EAAE;UAAEA,EAAE,GAAGL,IAAI,CAACI,EAAE,EAAC,EAAE,CAAC;UAAEA,EAAE,GAAGD,EAAE;UAAEA,EAAE,GAAGhG,CAAC;UACnDA,CAAC,GAAG6F,IAAI,CAAEO,EAAE,GAAGZ,GAAG,CAACa,EAAE,EAACC,EAAE,EAACC,EAAE,CAAC,GAAGT,CAAC,CAACT,GAAG,CAAC1S,CAAC,CAAC,CAAC,GAAGwS,GAAG,CAACxS,CAAC,CAAC,EAAE4S,GAAG,CAAC5S,CAAC,CAAE,CAAC,GAAG6T,EAAE;UAChEJ,EAAE,GAAGI,EAAE;UAAEA,EAAE,GAAGD,EAAE;UAAEA,EAAE,GAAGV,IAAI,CAACS,EAAE,EAAC,EAAE,CAAC;UAAEA,EAAE,GAAGD,EAAE;UAAEA,EAAE,GAAGrG,CAAC;QAAE;QAEzDA,CAAC,GAAG,IAAI,CAACqE,EAAE,CAAC,CAAC,CAAC,GAAG4B,EAAE,GAAGM,EAAE;QACxB,IAAI,CAAClC,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,CAACA,EAAE,CAAC,CAAC,CAAC,GAAG6B,EAAE,GAAGM,EAAE;QACjC,IAAI,CAACnC,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,CAACA,EAAE,CAAC,CAAC,CAAC,GAAG8B,EAAE,GAAGC,EAAE;QACjC,IAAI,CAAC/B,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,CAACA,EAAE,CAAC,CAAC,CAAC,GAAG0B,EAAE,GAAGM,EAAE;QACjC,IAAI,CAAChC,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,CAACA,EAAE,CAAC,CAAC,CAAC,GAAG2B,EAAE,GAAGM,EAAE;QACjC,IAAI,CAACjC,EAAE,CAAC,CAAC,CAAC,GAAGrE,CAAC;MAClB;IAEA,CAAC,EAAE,CAAC;IACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEA;AACA;AACA;AACA;IACAlR,IAAI,CAACE,IAAI,CAACL,MAAM,GAAG,UAAUK,IAAI,EAAE;MACjC,IAAI,CAAC,IAAI,CAACmE,IAAI,CAAC,CAAC,CAAC,EAAE;QAAE,IAAI,CAACT,WAAW,CAAC,CAAC;MAAE;MACzC,IAAI1D,IAAI,EAAE;QACR,IAAI,CAACqV,EAAE,GAAGrV,IAAI,CAACqV,EAAE,CAACnU,KAAK,CAAC,CAAC,CAAC;QAC1B,IAAI,CAACoU,OAAO,GAAGtV,IAAI,CAACsV,OAAO,CAACpU,KAAK,CAAC,CAAC,CAAC;QACpC,IAAI,CAACqU,OAAO,GAAGvV,IAAI,CAACuV,OAAO;MAC7B,CAAC,MAAM;QACL,IAAI,CAACC,KAAK,CAAC,CAAC;MACd;IACF,CAAC;;IAED;AACA;AACA;AACA;AACA;AACA;IACA1V,IAAI,CAACE,IAAI,CAACL,MAAM,CAACK,IAAI,GAAG,UAAUsE,IAAI,EAAE;MACtC,OAAQ,IAAIxE,IAAI,CAACE,IAAI,CAACL,MAAM,CAAC,CAAC,CAAE8V,MAAM,CAACnR,IAAI,CAAC,CAACoR,QAAQ,CAAC,CAAC;IACzD,CAAC;IAED5V,IAAI,CAACE,IAAI,CAACL,MAAM,CAACyE,SAAS,GAAG;MAC3B;AACF;AACA;AACA;MACEqT,SAAS,EAAE,GAAG;MAEd;AACF;AACA;AACA;MACEjC,KAAK,EAAC,SAAAA,CAAA,EAAY;QAChB,IAAI,CAACH,EAAE,GAAG,IAAI,CAACqC,KAAK,CAACxW,KAAK,CAAC,CAAC,CAAC;QAC7B,IAAI,CAACoU,OAAO,GAAG,EAAE;QACjB,IAAI,CAACC,OAAO,GAAG,CAAC;QAChB,OAAO,IAAI;MACb,CAAC;MAED;AACF;AACA;AACA;AACA;MACEE,MAAM,EAAE,SAAAA,CAAUnR,IAAI,EAAE;QACtB,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;UAC5BA,IAAI,GAAGxE,IAAI,CAACM,KAAK,CAACgP,UAAU,CAACrE,MAAM,CAACzG,IAAI,CAAC;QAC3C;QACA,IAAI3B,CAAC;UAAED,CAAC,GAAG,IAAI,CAAC4S,OAAO,GAAGxV,IAAI,CAACc,QAAQ,CAACe,MAAM,CAAC,IAAI,CAAC2T,OAAO,EAAEhR,IAAI,CAAC;UAC9DgI,EAAE,GAAG,IAAI,CAACiJ,OAAO;UACjBK,EAAE,GAAG,IAAI,CAACL,OAAO,GAAGjJ,EAAE,GAAGxM,IAAI,CAACc,QAAQ,CAACsB,SAAS,CAACoC,IAAI,CAAC;QAC1D,IAAIsR,EAAE,GAAG,gBAAgB,EAAC;UACxB,MAAM,IAAI9V,IAAI,CAACO,SAAS,CAACI,OAAO,CAAC,qCAAqC,CAAC;QACzE;QAEA,IAAI,OAAOkX,WAAW,KAAK,WAAW,EAAE;UAC3C,IAAIrS,CAAC,GAAG,IAAIqS,WAAW,CAACjV,CAAC,CAAC;UACtB,IAAIiB,CAAC,GAAG,CAAC;UACT,KAAKhB,CAAC,GAAG,GAAG,GAAC2J,EAAE,IAAK,GAAG,GAACA,EAAE,GAAI,GAAG,CAAC,EAAE3J,CAAC,IAAIiT,EAAE,EAAEjT,CAAC,IAAG,GAAG,EAAE;YAChD,IAAI,CAACoT,MAAM,CAACzQ,CAAC,CAACsS,QAAQ,CAAC,EAAE,GAAGjU,CAAC,EAAE,EAAE,IAAIA,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC;YAC3CA,CAAC,IAAI,CAAC;UACZ;UACAjB,CAAC,CAACmT,MAAM,CAAC,CAAC,EAAE,EAAE,GAAGlS,CAAC,CAAC;QACpB,CAAC,MAAM;UACV,KAAKhB,CAAC,GAAG,GAAG,GAAC2J,EAAE,IAAK,GAAG,GAACA,EAAE,GAAI,GAAG,CAAC,EAAE3J,CAAC,IAAIiT,EAAE,EAAEjT,CAAC,IAAG,GAAG,EAAE;YAC5C,IAAI,CAACoT,MAAM,CAACrT,CAAC,CAACmT,MAAM,CAAC,CAAC,EAAC,EAAE,CAAC,CAAC;UAC/B;QACH;QACA,OAAO,IAAI;MACb,CAAC;MAED;AACF;AACA;AACA;MACEH,QAAQ,EAAC,SAAAA,CAAA,EAAY;QACnB,IAAI/S,CAAC;UAAED,CAAC,GAAG,IAAI,CAAC4S,OAAO;UAAEjL,CAAC,GAAG,IAAI,CAACgL,EAAE;;QAEpC;QACA3S,CAAC,GAAG5C,IAAI,CAACc,QAAQ,CAACe,MAAM,CAACe,CAAC,EAAE,CAAC5C,IAAI,CAACc,QAAQ,CAAC0B,OAAO,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,CAAC;;QAEzD;QACA,KAAKK,CAAC,GAAGD,CAAC,CAACZ,MAAM,GAAG,CAAC,EAAEa,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;UAClCD,CAAC,CAACM,IAAI,CAAC,CAAC,CAAC;QACX;;QAEA;QACAN,CAAC,CAACM,IAAI,CAACvB,IAAI,CAACC,KAAK,CAAC,IAAI,CAAC6T,OAAO,GAAG,WAAW,CAAC,CAAC;QAC9C7S,CAAC,CAACM,IAAI,CAAC,IAAI,CAACuS,OAAO,GAAG,CAAC,CAAC;QAExB,OAAO7S,CAAC,CAACZ,MAAM,EAAE;UACf,IAAI,CAACiU,MAAM,CAACrT,CAAC,CAACmT,MAAM,CAAC,CAAC,EAAC,EAAE,CAAC,CAAC;QAC7B;QAEA,IAAI,CAACL,KAAK,CAAC,CAAC;QACZ,OAAOnL,CAAC;MACV,CAAC;MAED;AACF;AACA;AACA;MACEqN,KAAK,EAAC,EAAE;MACR;AACF;AACA;;MAEE;AACF;AACA;AACA;MACEvT,IAAI,EAAC,EAAE;MACP;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAGE;AACF;AACA;AACA;MACET,WAAW,EAAE,SAAAA,CAAA,EAAY;QACvB,IAAIf,CAAC,GAAG,CAAC;UAAEgK,KAAK,GAAG,CAAC;UAAEX,MAAM;UAAE6L,OAAO;QAErC,SAASC,IAAIA,CAACvW,CAAC,EAAE;UAAE,OAAO,CAACA,CAAC,GAACE,IAAI,CAACC,KAAK,CAACH,CAAC,CAAC,IAAI,WAAW,GAAG,CAAC;QAAE;QAE/D,OAAOoB,CAAC,GAAC,EAAE,EAAEgK,KAAK,EAAE,EAAE;UACpBkL,OAAO,GAAG,IAAI;UACd,KAAK7L,MAAM,GAAC,CAAC,EAAEA,MAAM,GAACA,MAAM,IAAIW,KAAK,EAAEX,MAAM,EAAE,EAAE;YAC/C,IAAIW,KAAK,GAAGX,MAAM,KAAK,CAAC,EAAE;cACxB6L,OAAO,GAAG,KAAK;cACf;YACF;UACF;UACA,IAAIA,OAAO,EAAE;YACX,IAAIlV,CAAC,GAAC,CAAC,EAAE;cACP,IAAI,CAAC+U,KAAK,CAAC/U,CAAC,CAAC,GAAGmV,IAAI,CAACrW,IAAI,CAACsH,GAAG,CAAC4D,KAAK,EAAE,CAAC,GAAC,CAAC,CAAC,CAAC;YAC5C;YACA,IAAI,CAACxI,IAAI,CAACxB,CAAC,CAAC,GAAGmV,IAAI,CAACrW,IAAI,CAACsH,GAAG,CAAC4D,KAAK,EAAE,CAAC,GAAC,CAAC,CAAC,CAAC;YACzChK,CAAC,EAAE;UACL;QACF;MACF,CAAC;MAED;AACF;AACA;AACA;AACA;MACEoT,MAAM,EAAC,SAAAA,CAAU9K,CAAC,EAAE;QAClB,IAAItI,CAAC;UAAEiB,GAAG;UAAE9C,CAAC;UAAE4B,CAAC;UACd2H,CAAC,GAAG,IAAI,CAACgL,EAAE;UACX9O,CAAC,GAAG,IAAI,CAACpC,IAAI;UACb4T,EAAE,GAAG1N,CAAC,CAAC,CAAC,CAAC;UAAE2N,EAAE,GAAG3N,CAAC,CAAC,CAAC,CAAC;UAAE4N,EAAE,GAAG5N,CAAC,CAAC,CAAC,CAAC;UAAE6N,EAAE,GAAG7N,CAAC,CAAC,CAAC,CAAC;UAC1C8N,EAAE,GAAG9N,CAAC,CAAC,CAAC,CAAC;UAAE+N,EAAE,GAAG/N,CAAC,CAAC,CAAC,CAAC;UAAEgO,EAAE,GAAGhO,CAAC,CAAC,CAAC,CAAC;UAAEiO,EAAE,GAAGjO,CAAC,CAAC,CAAC,CAAC;;QAE5C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;QACI,KAAK1H,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC,EAAE,EAAEA,CAAC,EAAE,EAAE;UACnB;UACA,IAAIA,CAAC,GAAC,EAAE,EAAE;YACRiB,GAAG,GAAGqH,CAAC,CAACtI,CAAC,CAAC;UACZ,CAAC,MAAM;YACL7B,CAAC,GAAKmK,CAAC,CAAEtI,CAAC,GAAC,CAAC,GAAK,EAAE,CAAC;YACpBD,CAAC,GAAKuI,CAAC,CAAEtI,CAAC,GAAC,EAAE,GAAI,EAAE,CAAC;YACpBiB,GAAG,GAAGqH,CAAC,CAACtI,CAAC,GAAC,EAAE,CAAC,GAAI,CAAC7B,CAAC,KAAG,CAAC,GAAIA,CAAC,KAAG,EAAE,GAAGA,CAAC,KAAG,CAAC,GAAIA,CAAC,IAAE,EAAE,GAAGA,CAAC,IAAE,EAAE,KACxC4B,CAAC,KAAG,EAAE,GAAGA,CAAC,KAAG,EAAE,GAAGA,CAAC,KAAG,EAAE,GAAGA,CAAC,IAAE,EAAE,GAAGA,CAAC,IAAE,EAAE,CAAC,GAC1CuI,CAAC,CAACtI,CAAC,GAAC,EAAE,CAAC,GAAGsI,CAAC,CAAEtI,CAAC,GAAC,CAAC,GAAI,EAAE,CAAC,GAAI,CAAC;UAC/C;UAEAiB,GAAG,GAAIA,GAAG,GAAG0U,EAAE,IAAIH,EAAE,KAAG,CAAC,GAAGA,EAAE,KAAG,EAAE,GAAGA,EAAE,KAAG,EAAE,GAAGA,EAAE,IAAE,EAAE,GAAGA,EAAE,IAAE,EAAE,GAAGA,EAAE,IAAE,CAAC,CAAC,IAAKE,EAAE,GAAGF,EAAE,IAAEC,EAAE,GAACC,EAAE,CAAC,CAAC,GAAG9R,CAAC,CAAC5D,CAAC,CAAE,CAAC,CAAC;;UAEvG;UACA2V,EAAE,GAAGD,EAAE;UAAEA,EAAE,GAAGD,EAAE;UAAEA,EAAE,GAAGD,EAAE;UACzBA,EAAE,GAAGD,EAAE,GAAGtU,GAAG,GAAG,CAAC;UACjBsU,EAAE,GAAGD,EAAE;UAAEA,EAAE,GAAGD,EAAE;UAAEA,EAAE,GAAGD,EAAE;UAEzBA,EAAE,GAAInU,GAAG,IAAMoU,EAAE,GAACC,EAAE,GAAKC,EAAE,IAAEF,EAAE,GAACC,EAAE,CAAE,CAAC,IAAID,EAAE,KAAG,CAAC,GAAGA,EAAE,KAAG,EAAE,GAAGA,EAAE,KAAG,EAAE,GAAGA,EAAE,IAAE,EAAE,GAAGA,EAAE,IAAE,EAAE,GAAGA,EAAE,IAAE,EAAE,CAAC,GAAI,CAAC;QACtG;QAEA3N,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,GAAC0N,EAAE,GAAG,CAAC;QAClB1N,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,GAAC2N,EAAE,GAAG,CAAC;QAClB3N,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,GAAC4N,EAAE,GAAG,CAAC;QAClB5N,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,GAAC6N,EAAE,GAAG,CAAC;QAClB7N,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,GAAC8N,EAAE,GAAG,CAAC;QAClB9N,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,GAAC+N,EAAE,GAAG,CAAC;QAClB/N,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,GAACgO,EAAE,GAAG,CAAC;QAClBhO,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,GAACiO,EAAE,GAAG,CAAC;MACpB;IACF,CAAC;;IAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACAxY,IAAI,CAACyY,IAAI,GAAG,UAASC,eAAe,EAAE;MAEpC;MACA,IAAI,CAACC,MAAM,GAAqB,CAAC,IAAI3Y,IAAI,CAACE,IAAI,CAACL,MAAM,CAAC,CAAC,CAAC;MACxD,IAAI,CAAC+Y,YAAY,GAAe,CAAC,CAAC,CAAC;MACnC,IAAI,CAACC,YAAY,GAAe,CAAC;MACjC,IAAI,CAACC,OAAO,GAAoB,CAAC,CAAC;MAClC,IAAI,CAACC,QAAQ,GAAmB,CAAC;MAEjC,IAAI,CAACC,aAAa,GAAc,CAAC,CAAC;MAClC,IAAI,CAACC,gBAAgB,GAAW,CAAC;MAEjC,IAAI,CAACC,SAAS,GAAkB,CAAC;MACjC,IAAI,CAACC,aAAa,GAAc,CAAC;MACjC,IAAI,CAACC,WAAW,GAAgB,CAAC;MACjC,IAAI,CAAC/U,IAAI,GAAuB,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;MACjD,IAAI,CAACgV,QAAQ,GAAmB,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;MACzC,IAAI,CAACC,OAAO,GAAoBjY,SAAS;MACzC,IAAI,CAACkY,gBAAgB,GAAWb,eAAe;;MAE/C;MACA,IAAI,CAACc,kBAAkB,GAAS,KAAK;MACrC,IAAI,CAACC,UAAU,GAAiB;QAACC,QAAQ,EAAE,CAAC,CAAC;QAAEC,MAAM,EAAE,CAAC;MAAC,CAAC;MAC1D,IAAI,CAACC,UAAU,GAAiB,CAAC;;MAEjC;MACA,IAAI,CAACC,UAAU,GAAiB,CAAC;MACjC,IAAI,CAACC,MAAM,GAAqB,CAAC;MACjC,IAAI,CAACC,gBAAgB,GAAW,CAAC;MAEjC,IAAI,CAACC,oBAAoB,GAAO,KAAK;MACrC,IAAI,CAACC,gBAAgB,GAAW,CAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,IAAI,CAAC;MACzE,IAAI,CAACC,wBAAwB,GAAG,KAAK;MACrC,IAAI,CAACC,gBAAgB,GAAW,EAAE;IACpC,CAAC;IAEDna,IAAI,CAACyY,IAAI,CAACnU,SAAS,GAAG;MACpB;AACF;AACA;AACA;MACEoJ,WAAW,EAAE,SAAAA,CAAU0M,MAAM,EAAE3M,QAAQ,EAAE;QACvC,IAAI1K,GAAG,GAAG,EAAE;UAAEF,CAAC;UAAEwX,SAAS,GAAG,IAAI,CAACC,OAAO,CAAC7M,QAAQ,CAAC;UAAE8M,CAAC;QAEtD,IAAIF,SAAS,KAAK,IAAI,CAACR,UAAU,EAAE;UACjC,MAAM,IAAI7Z,IAAI,CAACO,SAAS,CAACM,QAAQ,CAAC,wBAAwB,CAAC;QAC7D,CAAC,MAAM,IAAIwZ,SAAS,GAAG,IAAI,CAACN,gBAAgB,EAAE;UAC5C,IAAI,CAACS,gBAAgB,CAAC,EAAEH,SAAS,GAAG,IAAI,CAACP,MAAM,CAAC,CAAC;QACnD;QAEA,KAAKjX,CAAC,GAAC,CAAC,EAAEA,CAAC,GAACuX,MAAM,EAAEvX,CAAC,IAAG,CAAC,EAAE;UACzB,IAAI,CAACA,CAAC,GAAC,CAAC,IAAI,IAAI,CAACmX,oBAAoB,KAAK,CAAC,EAAE;YAC3C,IAAI,CAACS,KAAK,CAAC,CAAC;UACd;UAEAF,CAAC,GAAG,IAAI,CAACG,UAAU,CAAC,CAAC;UACrB3X,GAAG,CAACG,IAAI,CAACqX,CAAC,CAAC,CAAC,CAAC,EAACA,CAAC,CAAC,CAAC,CAAC,EAACA,CAAC,CAAC,CAAC,CAAC,EAACA,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/B;QACA,IAAI,CAACE,KAAK,CAAC,CAAC;QAEZ,OAAO1X,GAAG,CAAC3B,KAAK,CAAC,CAAC,EAACgZ,MAAM,CAAC;MAC5B,CAAC;MAEDO,kBAAkB,EAAE,SAAAA,CAAUlN,QAAQ,EAAEmN,iBAAiB,EAAE;QACzD,IAAInN,QAAQ,KAAK,CAAC,IAAImN,iBAAiB,KAAK,qEAAqE,EAAE;UACjH,MAAM,IAAI5a,IAAI,CAACO,SAAS,CAACI,OAAO,CAAC,qEAAqE,CAAC;QACzG;QAEA,IAAI,CAAC4Y,gBAAgB,GAAG9L,QAAQ;MAClC,CAAC;MAED;AACF;AACA;AACA;AACA;AACA;MACEoN,UAAU,EAAE,SAAAA,CAAUrW,IAAI,EAAEsW,gBAAgB,EAAEC,MAAM,EAAE;QACpDA,MAAM,GAAGA,MAAM,IAAI,MAAM;QAEzB,IAAIC,EAAE;UACJnY,CAAC;UAAEiB,GAAG;UACN4H,CAAC,GAAI,IAAIuP,IAAI,CAAC,CAAC,CAAEC,OAAO,CAAC,CAAC;UAC1BC,KAAK,GAAG,IAAI,CAACrC,OAAO,CAACiC,MAAM,CAAC;UAC5BK,QAAQ,GAAG,IAAI,CAACd,OAAO,CAAC,CAAC;UAAEe,GAAG,GAAG,CAAC;UAAEC,OAAO;QAE7CN,EAAE,GAAG,IAAI,CAAChC,aAAa,CAAC+B,MAAM,CAAC;QAC/B,IAAIC,EAAE,KAAK3Z,SAAS,EAAE;UAAE2Z,EAAE,GAAG,IAAI,CAAChC,aAAa,CAAC+B,MAAM,CAAC,GAAG,IAAI,CAAC9B,gBAAgB,EAAG;QAAE;QAEpF,IAAIkC,KAAK,KAAK9Z,SAAS,EAAE;UAAE8Z,KAAK,GAAG,IAAI,CAACrC,OAAO,CAACiC,MAAM,CAAC,GAAG,CAAC;QAAE;QAC7D,IAAI,CAACjC,OAAO,CAACiC,MAAM,CAAC,GAAG,CAAE,IAAI,CAACjC,OAAO,CAACiC,MAAM,CAAC,GAAG,CAAC,IAAK,IAAI,CAACpC,MAAM,CAAC3W,MAAM;QAExE,QAAO,OAAOwC,IAAK;UAEnB,KAAK,QAAQ;YACX,IAAIsW,gBAAgB,KAAKzZ,SAAS,EAAE;cAClCyZ,gBAAgB,GAAG,CAAC;YACtB;YACA,IAAI,CAACnC,MAAM,CAACwC,KAAK,CAAC,CAACxF,MAAM,CAAC,CAACqF,EAAE,EAAC,IAAI,CAACjC,QAAQ,EAAE,EAAC,CAAC,EAAC+B,gBAAgB,EAACpP,CAAC,EAAC,CAAC,EAAClH,IAAI,GAAC,CAAC,CAAC,CAAC;YAC7E;UAEF,KAAK,QAAQ;YACX8W,OAAO,GAAGC,MAAM,CAACjX,SAAS,CAAC5D,QAAQ,CAACwV,IAAI,CAAC1R,IAAI,CAAC;YAC9C,IAAI8W,OAAO,KAAK,sBAAsB,EAAE;cACtCxX,GAAG,GAAG,EAAE;cACR,KAAKjB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2B,IAAI,CAACxC,MAAM,EAAEa,CAAC,EAAE,EAAE;gBAChCiB,GAAG,CAACZ,IAAI,CAACsB,IAAI,CAAC3B,CAAC,CAAC,CAAC;cACnB;cACA2B,IAAI,GAAGV,GAAG;YACZ,CAAC,MAAM;cACL,IAAIwX,OAAO,KAAK,gBAAgB,EAAE;gBAChCD,GAAG,GAAG,CAAC;cACT;cACA,KAAKxY,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC2B,IAAI,CAACxC,MAAM,IAAI,CAACqZ,GAAG,EAAExY,CAAC,EAAE,EAAE;gBACpC,IAAI,OAAO2B,IAAI,CAAC3B,CAAC,CAAE,KAAK,QAAQ,EAAE;kBAChCwY,GAAG,GAAG,CAAC;gBACT;cACF;YACF;YACA,IAAI,CAACA,GAAG,EAAE;cACR,IAAIP,gBAAgB,KAAKzZ,SAAS,EAAE;gBAClC;gBACAyZ,gBAAgB,GAAG,CAAC;gBACpB,KAAKjY,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC2B,IAAI,CAACxC,MAAM,EAAEa,CAAC,EAAE,EAAE;kBAC5BiB,GAAG,GAAEU,IAAI,CAAC3B,CAAC,CAAC;kBACZ,OAAOiB,GAAG,GAAC,CAAC,EAAE;oBACZgX,gBAAgB,EAAE;oBAClBhX,GAAG,GAAGA,GAAG,KAAK,CAAC;kBACjB;gBACF;cACF;cACA,IAAI,CAAC6U,MAAM,CAACwC,KAAK,CAAC,CAACxF,MAAM,CAAC,CAACqF,EAAE,EAAC,IAAI,CAACjC,QAAQ,EAAE,EAAC,CAAC,EAAC+B,gBAAgB,EAACpP,CAAC,EAAClH,IAAI,CAACxC,MAAM,CAAC,CAACH,MAAM,CAAC2C,IAAI,CAAC,CAAC;YAC/F;YACA;UAEF,KAAK,QAAQ;YACX,IAAIsW,gBAAgB,KAAKzZ,SAAS,EAAE;cACnC;AACP;AACA;AACA;cACOyZ,gBAAgB,GAAGtW,IAAI,CAACxC,MAAM;YAC/B;YACA,IAAI,CAAC2W,MAAM,CAACwC,KAAK,CAAC,CAACxF,MAAM,CAAC,CAACqF,EAAE,EAAC,IAAI,CAACjC,QAAQ,EAAE,EAAC,CAAC,EAAC+B,gBAAgB,EAACpP,CAAC,EAAClH,IAAI,CAACxC,MAAM,CAAC,CAAC;YAChF,IAAI,CAAC2W,MAAM,CAACwC,KAAK,CAAC,CAACxF,MAAM,CAACnR,IAAI,CAAC;YAC/B;UAEF;YACE6W,GAAG,GAAC,CAAC;QACP;QACA,IAAIA,GAAG,EAAE;UACP,MAAM,IAAIrb,IAAI,CAACO,SAAS,CAACK,GAAG,CAAC,qEAAqE,CAAC;QACrG;;QAEA;QACA,IAAI,CAACgY,YAAY,CAACuC,KAAK,CAAC,IAAIL,gBAAgB;QAC5C,IAAI,CAAC3B,aAAa,IAAI2B,gBAAgB;;QAEtC;QACA,IAAIM,QAAQ,KAAK,IAAI,CAACvB,UAAU,EAAE;UAChC,IAAI,IAAI,CAACS,OAAO,CAAC,CAAC,KAAK,IAAI,CAACT,UAAU,EAAE;YACtC,IAAI,CAAC2B,UAAU,CAAC,QAAQ,EAAE7Z,IAAI,CAACoF,GAAG,CAAC,IAAI,CAACmS,SAAS,EAAE,IAAI,CAACC,aAAa,CAAC,CAAC;UACzE;UACA,IAAI,CAACqC,UAAU,CAAC,UAAU,EAAE,IAAI,CAACC,WAAW,CAAC,CAAC,CAAC;QACjD;MACF,CAAC;MAED;MACAnB,OAAO,EAAE,SAAAA,CAAU7M,QAAQ,EAAE;QAC3B,IAAIiO,eAAe,GAAG,IAAI,CAACzB,gBAAgB,CAAGxM,QAAQ,KAAKpM,SAAS,GAAIoM,QAAQ,GAAG,IAAI,CAAC8L,gBAAgB,CAAE;QAE1G,IAAI,IAAI,CAACL,SAAS,IAAI,IAAI,CAACA,SAAS,IAAIwC,eAAe,EAAE;UACvD,OAAQ,IAAI,CAAC9C,YAAY,CAAC,CAAC,CAAC,GAAG,IAAI,CAACuB,gBAAgB,IAAK,IAAIc,IAAI,CAAC,CAAC,CAAEC,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC9B,WAAW,GAC/F,IAAI,CAACW,gBAAgB,GAAG,IAAI,CAACD,MAAM,GACnC,IAAI,CAACA,MAAM;QACf,CAAC,MAAM;UACL,OAAQ,IAAI,CAACX,aAAa,IAAIuC,eAAe,GAC3C,IAAI,CAAC3B,gBAAgB,GAAG,IAAI,CAACF,UAAU,GACvC,IAAI,CAACA,UAAU;QACnB;MACF,CAAC;MAED;MACA4B,WAAW,EAAE,SAAAA,CAAUhO,QAAQ,EAAE;QAC/B,IAAIiO,eAAe,GAAG,IAAI,CAACzB,gBAAgB,CAAExM,QAAQ,GAAGA,QAAQ,GAAG,IAAI,CAAC8L,gBAAgB,CAAE;QAE1F,IAAI,IAAI,CAACL,SAAS,IAAIwC,eAAe,EAAE;UACrC,OAAO,GAAG;QACZ,CAAC,MAAM;UACL,OAAQ,IAAI,CAACvC,aAAa,GAAGuC,eAAe,GAC1C,GAAG,GACH,IAAI,CAACvC,aAAa,GAAGuC,eAAe;QACxC;MACF,CAAC;MAED;MACAC,eAAe,EAAE,SAAAA,CAAA,EAAY;QAC3B,IAAI,IAAI,CAACnC,kBAAkB,EAAE;UAAE;QAAQ;QAEvC,IAAI,CAACoC,cAAc,GAAG;UACpBC,iBAAiB,EAAE,IAAI,CAACC,KAAK,CAAC,IAAI,CAACC,kBAAkB,CAAC;UACtDC,cAAc,EAAE,IAAI,CAACF,KAAK,CAAC,IAAI,CAACG,eAAe,CAAC;UAChDC,iBAAiB,EAAE,IAAI,CAACJ,KAAK,CAAC,IAAI,CAACK,kBAAkB,CAAC;UACtDC,sBAAsB,EAAE,IAAI,CAACN,KAAK,CAAC,IAAI,CAACO,uBAAuB,CAAC;UAChEC,cAAc,EAAE,IAAI,CAACR,KAAK,CAAC,IAAI,CAACS,eAAe;QACjD,CAAC;QAED,IAAIC,MAAM,CAACC,gBAAgB,EAAE;UAC3BD,MAAM,CAACC,gBAAgB,CAAC,MAAM,EAAE,IAAI,CAACb,cAAc,CAACC,iBAAiB,EAAE,KAAK,CAAC;UAC7EW,MAAM,CAACC,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAACb,cAAc,CAACI,cAAc,EAAE,KAAK,CAAC;UAC/EQ,MAAM,CAACC,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAACb,cAAc,CAACM,iBAAiB,EAAE,KAAK,CAAC;UACjFM,MAAM,CAACC,gBAAgB,CAAC,cAAc,EAAE,IAAI,CAACb,cAAc,CAACQ,sBAAsB,EAAE,KAAK,CAAC;UAC1FI,MAAM,CAACC,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAACb,cAAc,CAACU,cAAc,EAAE,KAAK,CAAC;QACjF,CAAC,MAAM,IAAII,QAAQ,CAACC,WAAW,EAAE;UAC/BD,QAAQ,CAACC,WAAW,CAAC,QAAQ,EAAE,IAAI,CAACf,cAAc,CAACC,iBAAiB,CAAC;UACrEa,QAAQ,CAACC,WAAW,CAAC,aAAa,EAAE,IAAI,CAACf,cAAc,CAACI,cAAc,CAAC;UACvEU,QAAQ,CAACC,WAAW,CAAC,UAAU,EAAE,IAAI,CAACf,cAAc,CAACM,iBAAiB,CAAC;QACzE,CAAC,MAAM;UACL,MAAM,IAAIlc,IAAI,CAACO,SAAS,CAACK,GAAG,CAAC,oBAAoB,CAAC;QACpD;QAEA,IAAI,CAAC4Y,kBAAkB,GAAG,IAAI;MAChC,CAAC;MAED;MACAoD,cAAc,EAAE,SAAAA,CAAA,EAAY;QAC1B,IAAI,CAAC,IAAI,CAACpD,kBAAkB,EAAE;UAAE;QAAQ;QAExC,IAAIgD,MAAM,CAACK,mBAAmB,EAAE;UAC9BL,MAAM,CAACK,mBAAmB,CAAC,MAAM,EAAE,IAAI,CAACjB,cAAc,CAACC,iBAAiB,EAAE,KAAK,CAAC;UAChFW,MAAM,CAACK,mBAAmB,CAAC,WAAW,EAAE,IAAI,CAACjB,cAAc,CAACI,cAAc,EAAE,KAAK,CAAC;UAClFQ,MAAM,CAACK,mBAAmB,CAAC,UAAU,EAAE,IAAI,CAACjB,cAAc,CAACM,iBAAiB,EAAE,KAAK,CAAC;UACpFM,MAAM,CAACK,mBAAmB,CAAC,cAAc,EAAE,IAAI,CAACjB,cAAc,CAACQ,sBAAsB,EAAE,KAAK,CAAC;UAC7FI,MAAM,CAACK,mBAAmB,CAAC,WAAW,EAAE,IAAI,CAACjB,cAAc,CAACU,cAAc,EAAE,KAAK,CAAC;QACpF,CAAC,MAAM,IAAII,QAAQ,CAACI,WAAW,EAAE;UAC/BJ,QAAQ,CAACI,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAClB,cAAc,CAACC,iBAAiB,CAAC;UACrEa,QAAQ,CAACI,WAAW,CAAC,aAAa,EAAE,IAAI,CAAClB,cAAc,CAACI,cAAc,CAAC;UACvEU,QAAQ,CAACI,WAAW,CAAC,UAAU,EAAE,IAAI,CAAClB,cAAc,CAACM,iBAAiB,CAAC;QACzE;QAEA,IAAI,CAAC1C,kBAAkB,GAAG,KAAK;MACjC,CAAC;MAED;AACF;AACA;AACA;;MAEE;MACAiD,gBAAgB,EAAE,SAAAA,CAAUM,IAAI,EAAEC,QAAQ,EAAE;QAC1C,IAAI,CAACvD,UAAU,CAACsD,IAAI,CAAC,CAAC,IAAI,CAACnD,UAAU,EAAE,CAAC,GAAGoD,QAAQ;MACrD,CAAC;MAED;MACAH,mBAAmB,EAAE,SAAAA,CAAUE,IAAI,EAAEE,EAAE,EAAE;QACvC,IAAIpa,CAAC;UAAEgB,CAAC;UAAEqZ,GAAG,GAAC,IAAI,CAACzD,UAAU,CAACsD,IAAI,CAAC;UAAEI,MAAM,GAAC,EAAE;;QAE9C;AACJ;AACA;;QAEI,KAAKtZ,CAAC,IAAIqZ,GAAG,EAAE;UACb,IAAIA,GAAG,CAAClK,cAAc,CAACnP,CAAC,CAAC,IAAIqZ,GAAG,CAACrZ,CAAC,CAAC,KAAKoZ,EAAE,EAAE;YAC1CE,MAAM,CAACja,IAAI,CAACW,CAAC,CAAC;UAChB;QACF;QAEA,KAAKhB,CAAC,GAAC,CAAC,EAAEA,CAAC,GAACsa,MAAM,CAACnb,MAAM,EAAEa,CAAC,EAAE,EAAE;UAC9BgB,CAAC,GAAGsZ,MAAM,CAACta,CAAC,CAAC;UACb,OAAOqa,GAAG,CAACrZ,CAAC,CAAC;QACf;MACF,CAAC;MAEDiY,KAAK,EAAE,SAAAA,CAAUsB,IAAI,EAAE;QACrB,IAAInW,IAAI,GAAG,IAAI;QACf,OAAO,YAAY;UACjBmW,IAAI,CAAC/I,KAAK,CAACpN,IAAI,EAAEqN,SAAS,CAAC;QAC7B,CAAC;MACH,CAAC;MAED;AACF;AACA;MACEoG,UAAU,EAAE,SAAAA,CAAA,EAAY;QACtB,KAAK,IAAI7X,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC,CAAC,EAAEA,CAAC,EAAE,EAAE;UACtB,IAAI,CAACwW,QAAQ,CAACxW,CAAC,CAAC,GAAG,IAAI,CAACwW,QAAQ,CAACxW,CAAC,CAAC,GAAC,CAAC,GAAG,CAAC;UACzC,IAAI,IAAI,CAACwW,QAAQ,CAACxW,CAAC,CAAC,EAAE;YAAE;UAAO;QACjC;QACA,OAAO,IAAI,CAACyW,OAAO,CAAC/U,OAAO,CAAC,IAAI,CAAC8U,QAAQ,CAAC;MAC5C,CAAC;MAED;AACF;AACA;MACEoB,KAAK,EAAE,SAAAA,CAAA,EAAY;QACjB,IAAI,CAACpW,IAAI,GAAG,IAAI,CAACqW,UAAU,CAAC,CAAC,CAAC7Y,MAAM,CAAC,IAAI,CAAC6Y,UAAU,CAAC,CAAC,CAAC;QACvD,IAAI,CAACpB,OAAO,GAAG,IAAItZ,IAAI,CAACC,MAAM,CAACwD,GAAG,CAAC,IAAI,CAACY,IAAI,CAAC;MAC/C,CAAC;MAED;AACF;AACA;MACEgZ,OAAO,EAAE,SAAAA,CAAUC,SAAS,EAAE;QAC5B,IAAI,CAACjZ,IAAI,GAAGrE,IAAI,CAACE,IAAI,CAACL,MAAM,CAACK,IAAI,CAAC,IAAI,CAACmE,IAAI,CAACxC,MAAM,CAACyb,SAAS,CAAC,CAAC;QAC9D,IAAI,CAAChE,OAAO,GAAG,IAAItZ,IAAI,CAACC,MAAM,CAACwD,GAAG,CAAC,IAAI,CAACY,IAAI,CAAC;QAC7C,KAAK,IAAIxB,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC,CAAC,EAAEA,CAAC,EAAE,EAAE;UACtB,IAAI,CAACwW,QAAQ,CAACxW,CAAC,CAAC,GAAG,IAAI,CAACwW,QAAQ,CAACxW,CAAC,CAAC,GAAC,CAAC,GAAG,CAAC;UACzC,IAAI,IAAI,CAACwW,QAAQ,CAACxW,CAAC,CAAC,EAAE;YAAE;UAAO;QACjC;MACF,CAAC;MAED;AACF;AACA;MACE2X,gBAAgB,EAAE,SAAAA,CAAU+C,IAAI,EAAE;QAChC,IAAIC,UAAU,GAAG,EAAE;UAAEC,QAAQ,GAAG,CAAC;UAAE5a,CAAC;QAEpC,IAAI,CAACuW,WAAW,GAAGoE,UAAU,CAAC,CAAC,CAAC,GAC7B,IAAIvC,IAAI,CAAC,CAAC,CAAEC,OAAO,CAAC,CAAC,GAAG,IAAI,CAAChB,wBAAwB;QAExD,KAAKrX,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC,EAAE,EAAEA,CAAC,EAAE,EAAE;UACnB;AACN;AACA;UACM2a,UAAU,CAACta,IAAI,CAACvB,IAAI,CAAC6L,MAAM,CAAC,CAAC,GAAC,WAAW,GAAC,CAAC,CAAC;QAC9C;QAEA,KAAK3K,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC,IAAI,CAAC8V,MAAM,CAAC3W,MAAM,EAAEa,CAAC,EAAE,EAAE;UACpC2a,UAAU,GAAGA,UAAU,CAAC3b,MAAM,CAAC,IAAI,CAAC8W,MAAM,CAAC9V,CAAC,CAAC,CAAC+S,QAAQ,CAAC,CAAC,CAAC;UACzD6H,QAAQ,IAAI,IAAI,CAAC7E,YAAY,CAAC/V,CAAC,CAAC;UAChC,IAAI,CAAC+V,YAAY,CAAC/V,CAAC,CAAC,GAAG,CAAC;UAExB,IAAI,CAAC0a,IAAI,IAAK,IAAI,CAAC1E,YAAY,GAAI,CAAC,IAAEhW,CAAG,EAAE;YAAE;UAAO;QACrD;;QAEA;QACA,IAAI,IAAI,CAACgW,YAAY,IAAI,CAAC,IAAI,IAAI,CAACF,MAAM,CAAC3W,MAAM,EAAE;UACjD,IAAI,CAAC2W,MAAM,CAACzV,IAAI,CAAC,IAAIlD,IAAI,CAACE,IAAI,CAACL,MAAM,CAAC,CAAC,CAAC;UACxC,IAAI,CAAC+Y,YAAY,CAAC1V,IAAI,CAAC,CAAC,CAAC;QAC1B;;QAEA;QACA,IAAI,CAACiW,aAAa,IAAIsE,QAAQ;QAC9B,IAAIA,QAAQ,GAAG,IAAI,CAACvE,SAAS,EAAE;UAC7B,IAAI,CAACA,SAAS,GAAGuE,QAAQ;QAC3B;QAEA,IAAI,CAAC5E,YAAY,EAAG;QACpB,IAAI,CAACwE,OAAO,CAACG,UAAU,CAAC;MAC1B,CAAC;MAEDrB,kBAAkB,EAAE,SAAAA,CAAA,EAAY;QAC9B,IAAI,CAACuB,wBAAwB,CAAC,CAAC,CAAC;MAClC,CAAC;MAEDzB,eAAe,EAAE,SAAAA,CAAU0B,EAAE,EAAE;QAC7B,IAAIlc,CAAC,EAAE4B,CAAC;QAER,IAAI;UACF5B,CAAC,GAAGkc,EAAE,CAAClc,CAAC,IAAIkc,EAAE,CAACC,OAAO,IAAID,EAAE,CAACE,OAAO,IAAI,CAAC;UACzCxa,CAAC,GAAGsa,EAAE,CAACta,CAAC,IAAIsa,EAAE,CAACG,OAAO,IAAIH,EAAE,CAACI,OAAO,IAAI,CAAC;QAC3C,CAAC,CAAC,OAAO1C,GAAG,EAAE;UACZ;UACA5Z,CAAC,GAAG,CAAC;UACL4B,CAAC,GAAG,CAAC;QACP;QAEA,IAAI5B,CAAC,IAAI,CAAC,IAAI4B,CAAC,IAAG,CAAC,EAAE;UACnB,IAAI,CAACwX,UAAU,CAAC,CAACpZ,CAAC,EAAC4B,CAAC,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC;QACpC;QAEA,IAAI,CAACqa,wBAAwB,CAAC,CAAC,CAAC;MAClC,CAAC;MAEDnB,eAAe,EAAE,SAAAA,CAASoB,EAAE,EAAE;QAC5B,IAAIK,KAAK,GAAGL,EAAE,CAACM,OAAO,CAAC,CAAC,CAAC,IAAIN,EAAE,CAACO,cAAc,CAAC,CAAC,CAAC;QACjD,IAAIzc,CAAC,GAAGuc,KAAK,CAACG,KAAK,IAAIH,KAAK,CAACJ,OAAO;UAChCva,CAAC,GAAG2a,KAAK,CAACI,KAAK,IAAIJ,KAAK,CAACF,OAAO;QAEpC,IAAI,CAACjD,UAAU,CAAC,CAACpZ,CAAC,EAAC4B,CAAC,CAAC,EAAC,CAAC,EAAC,OAAO,CAAC;QAEhC,IAAI,CAACqa,wBAAwB,CAAC,CAAC,CAAC;MAClC,CAAC;MAED3B,kBAAkB,EAAE,SAAAA,CAAA,EAAY;QAC9B,IAAI,CAAC2B,wBAAwB,CAAC,CAAC,CAAC;MAClC,CAAC;MAEDA,wBAAwB,EAAE,SAAAA,CAAU5C,gBAAgB,EAAE;QACpD,IAAI,OAAO0B,MAAM,KAAK,WAAW,IAAIA,MAAM,CAAC6B,WAAW,IAAI,OAAO7B,MAAM,CAAC6B,WAAW,CAACC,GAAG,KAAK,UAAU,EAAE;UACvG;UACA,IAAI,CAACzD,UAAU,CAAC2B,MAAM,CAAC6B,WAAW,CAACC,GAAG,CAAC,CAAC,EAAExD,gBAAgB,EAAE,UAAU,CAAC;QACzE,CAAC,MAAM;UACL,IAAI,CAACD,UAAU,CAAE,IAAII,IAAI,CAAC,CAAC,CAAEC,OAAO,CAAC,CAAC,EAAEJ,gBAAgB,EAAE,UAAU,CAAC;QACvE;MACF,CAAC;MACDuB,uBAAuB,EAAE,SAAAA,CAAUsB,EAAE,EAAE;QACrC,IAAIY,EAAE,GAAGZ,EAAE,CAACa,4BAA4B,CAAC/c,CAAC,IAAEkc,EAAE,CAACa,4BAA4B,CAACnb,CAAC,IAAEsa,EAAE,CAACa,4BAA4B,CAACvN,CAAC;QAChH,IAAGuL,MAAM,CAACiC,WAAW,EAAC;UACpB,IAAIC,EAAE,GAAGlC,MAAM,CAACiC,WAAW;UAC3B,IAAI,OAAOC,EAAE,KAAK,QAAQ,EAAE;YAC1B,IAAI,CAAC7D,UAAU,CAAC6D,EAAE,EAAE,CAAC,EAAE,eAAe,CAAC;UACzC;QACF;QACA,IAAIH,EAAE,EAAE;UACN,IAAI,CAAC1D,UAAU,CAAC0D,EAAE,EAAE,CAAC,EAAE,eAAe,CAAC;QACzC;QACA,IAAI,CAACb,wBAAwB,CAAC,CAAC,CAAC;MAClC,CAAC;MAEDlC,UAAU,EAAE,SAAAA,CAAUuB,IAAI,EAAE4B,GAAG,EAAE;QAC/B,IAAI9a,CAAC;UAAEqZ,GAAG,GAACld,IAAI,CAACwN,MAAM,CAACiM,UAAU,CAACsD,IAAI,CAAC;UAAE6B,OAAO,GAAC,EAAE;QACnD;;QAEA;AACJ;AACA;;QAEI,KAAK/a,CAAC,IAAIqZ,GAAG,EAAE;UACb,IAAIA,GAAG,CAAClK,cAAc,CAACnP,CAAC,CAAC,EAAE;YACzB+a,OAAO,CAAC1b,IAAI,CAACga,GAAG,CAACrZ,CAAC,CAAC,CAAC;UACtB;QACF;QAEA,KAAKA,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC+a,OAAO,CAAC5c,MAAM,EAAE6B,CAAC,EAAE,EAAE;UAC/B+a,OAAO,CAAC/a,CAAC,CAAC,CAAC8a,GAAG,CAAC;QACjB;MACF;IACF,CAAC;;IAED;AACA;AACA;IACA3e,IAAI,CAACwN,MAAM,GAAG,IAAIxN,IAAI,CAACyY,IAAI,CAAC,CAAC,CAAC;IAE7B,aAAU;MACT;MACA,SAASoG,eAAeA,CAAA,EAAG;QACzB,IAAI;UACF,OAAOC,OAAO,CAAC,QAAQ,CAAC;QAC1B,CAAC,CACD,OAAO1T,CAAC,EAAE;UACR,OAAO,IAAI;QACb;MACF;MAEA,IAAI;QACF,IAAI2T,GAAG,EAAEC,KAAK,EAAE7U,EAAE;;QAElB;QACA,IAAI,OAAO8U,MAAM,KAAK,WAAW,IAAIA,MAAM,CAAC7f,OAAO,KAAK4f,KAAK,GAAGH,eAAe,CAAC,CAAC,CAAC,IAAIG,KAAK,CAACE,WAAW,EAAE;UACvGH,GAAG,GAAGC,KAAK,CAACE,WAAW,CAAC,IAAI,GAAC,CAAC,CAAC;UAC/BH,GAAG,GAAG,IAAIlH,WAAW,CAAC,IAAIsH,UAAU,CAACJ,GAAG,CAAC,CAAC1Q,MAAM,CAAC;UACjDrO,IAAI,CAACwN,MAAM,CAACqN,UAAU,CAACkE,GAAG,EAAE,IAAI,EAAE,oBAAoB,CAAC;QAEzD,CAAC,MAAM,IAAI,OAAOvC,MAAM,KAAK,WAAW,IAAI,OAAO3E,WAAW,KAAK,WAAW,EAAE;UAC9E1N,EAAE,GAAG,IAAI0N,WAAW,CAAC,EAAE,CAAC;UACxB,IAAI2E,MAAM,CAACjd,MAAM,IAAIid,MAAM,CAACjd,MAAM,CAAC6f,eAAe,EAAE;YAClD5C,MAAM,CAACjd,MAAM,CAAC6f,eAAe,CAACjV,EAAE,CAAC;UACnC,CAAC,MAAM,IAAIqS,MAAM,CAAC6C,QAAQ,IAAI7C,MAAM,CAAC6C,QAAQ,CAACD,eAAe,EAAE;YAC7D5C,MAAM,CAAC6C,QAAQ,CAACD,eAAe,CAACjV,EAAE,CAAC;UACrC,CAAC,MAAM;YACL;UACF;;UAEA;UACAnK,IAAI,CAACwN,MAAM,CAACqN,UAAU,CAAC1Q,EAAE,EAAE,IAAI,EAAE,wBAAwB,CAAC;QAE5D,CAAC,MAAM;UACL;QAAA;MAEJ,CAAC,CAAC,OAAOiB,CAAC,EAAE;QACV,IAAI,OAAOoR,MAAM,KAAK,WAAW,IAAIA,MAAM,CAACrN,OAAO,EAAE;UACnDA,OAAO,CAACC,GAAG,CAAC,yDAAyD,CAAC;UACtED,OAAO,CAACC,GAAG,CAAChE,CAAC,CAAC;UACd;QACF;MACF;IACF,CAAC,EAAC,CAAC;IACH;IACApL,IAAI,CAACM,KAAK,CAACgf,MAAM,GAAG;MAClBC,KAAK,EAAE,4DAA4D;MACnEC,MAAM,EAAE;QACN,GAAG,EAAE,CAAC;QACN,GAAG,EAAE,CAAC;QACN,GAAG,EAAE,CAAC;QACN,GAAG,EAAE,CAAC;QACN,GAAG,EAAE,CAAC;QACN,GAAG,EAAE,CAAC;QACN,GAAG,EAAE,CAAC;QACN,GAAG,EAAE,CAAC;QACN,GAAG,EAAE,CAAC;QACNC,CAAC,EAAE,CAAC;QACJC,CAAC,EAAE,EAAE;QACLC,CAAC,EAAE,EAAE;QACLC,CAAC,EAAE,EAAE;QACLC,CAAC,EAAE,EAAE;QACLC,CAAC,EAAE,EAAE;QACL1N,CAAC,EAAE,EAAE;QACL2N,CAAC,EAAE,EAAE;QACLC,CAAC,EAAE,EAAE;QACLC,CAAC,EAAE,EAAE;QACLC,CAAC,EAAE,EAAE;QACLC,CAAC,EAAE,EAAE;QACLhX,CAAC,EAAE,EAAE;QACLiX,CAAC,EAAE,EAAE;QACLC,CAAC,EAAE,EAAE;QACL9W,CAAC,EAAE,EAAE;QACL4H,CAAC,EAAE,EAAE;QACLD,CAAC,EAAE,EAAE;QACLoP,CAAC,EAAE,EAAE;QACLC,CAAC,EAAE,EAAE;QACLC,CAAC,EAAE,EAAE;QACLxJ,CAAC,EAAE,EAAE;QACLyJ,CAAC,EAAE,EAAE;QACLC,CAAC,EAAE,EAAE;QACL1f,CAAC,EAAE,EAAE;QACL4B,CAAC,EAAE,EAAE;QACL4C,CAAC,EAAE,EAAE;QACLV,CAAC,EAAE,EAAE;QACLsG,CAAC,EAAE,EAAE;QACLuV,CAAC,EAAE,EAAE;QACLpG,CAAC,EAAE,EAAE;QACLhQ,CAAC,EAAE,EAAE;QACL1H,CAAC,EAAE,EAAE;QACLgB,CAAC,EAAE,EAAE;QACL4C,CAAC,EAAE,EAAE;QACLjD,CAAC,EAAE,EAAE;QACLsL,CAAC,EAAE,EAAE;QACL8R,CAAC,EAAE,EAAE;QACLvY,CAAC,EAAE,EAAE;QACLwY,CAAC,EAAE,EAAE;QACLlZ,CAAC,EAAE,EAAE;QACLxC,CAAC,EAAE,EAAE;QACLuG,CAAC,EAAE,EAAE;QACLoV,CAAC,EAAE,EAAE;QACLvd,CAAC,EAAE,EAAE;QACL4H,CAAC,EAAE,EAAE;QACL1J,CAAC,EAAE,EAAE;QACL4B,CAAC,EAAE,EAAE;QACL4N,CAAC,EAAE;MACL,CAAC;MAEDhG,MAAM,EAAE,SAAAA,CAAS8V,UAAU,EAAE;QAC3B,IAAIC,IAAI,GAAG,IAAIhhB,IAAI,CAACkG,EAAE,CAAC,CAAC;QACxB,IAAI+a,EAAE,GAAG,IAAIjhB,IAAI,CAACkG,EAAE,CAAC,EAAE,CAAC;QAExB,KAAK,IAAIrD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGke,UAAU,CAAC/e,MAAM,EAAEa,CAAC,EAAE,EAAE;UAC1C,IAAIqe,KAAK,GAAG,IAAIlhB,IAAI,CAACkG,EAAE,CAAClG,IAAI,CAACM,KAAK,CAACgf,MAAM,CAACE,MAAM,CAACuB,UAAU,CAACle,CAAC,CAAC,CAAC,CAAC;UAChEme,IAAI,CAACxZ,IAAI,CAAC0Z,KAAK,CAAC1Y,GAAG,CAACyY,EAAE,CAACjY,KAAK,CAAC+X,UAAU,CAAC/e,MAAM,GAAGa,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC3D;QAEAme,IAAI,CAAC7Z,UAAU,CAAC,CAAC;QACjB,OAAO6Z,IAAI,CAAC/V,MAAM,CAAC,CAAC;MACtB,CAAC;MAEDK,QAAQ,EAAE,SAAAA,CAASC,IAAI,EAAE;QACvB,IAAI4V,GAAG,GAAGnhB,IAAI,CAACkG,EAAE,CAACoF,QAAQ,CAACC,IAAI,CAAC;QAChC,IAAI6V,MAAM,GAAGphB,IAAI,CAACc,QAAQ,CAACsB,SAAS,CAACmJ,IAAI,CAAC;QAC1C,IAAIjJ,GAAG,GAAGX,IAAI,CAACY,IAAI,CAAC6e,MAAM,IAAIzf,IAAI,CAACyN,GAAG,CAAC,CAAC,CAAC,GAAGzN,IAAI,CAACyN,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;QAC1D,IAAIiS,IAAI,GAAG,IAAIrhB,IAAI,CAACkG,EAAE,CAAC,EAAE,CAAC;QAC1B,IAAIyJ,GAAG,GAAG,EAAE;QAEZ,KAAK,IAAI9M,CAAC,GAAGP,GAAG,GAAG,CAAC,EAAEO,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;UACjC,IAAIye,IAAI,GAAG,IAAIthB,IAAI,CAACkG,EAAE,CAACrD,CAAC,CAAC;UACzB,IAAI8H,GAAG,GAAG0W,IAAI,CAACrY,KAAK,CAACsY,IAAI,CAAC;UAE1B,IAAIC,GAAG,GAAG,CAAC;UACX,OAAOJ,GAAG,CAAC9Z,aAAa,CAACsD,GAAG,CAAC,EAAE;YAC7BwW,GAAG,CAACrZ,IAAI,CAAC6C,GAAG,CAAC;YACbwW,GAAG,CAACxa,SAAS,CAAC,CAAC;YACf4a,GAAG,EAAE;UACP;UACA,IAAI,EAAE1e,CAAC,KAAKP,GAAG,GAAG,CAAC,IAAIif,GAAG,KAAK,CAAC,CAAC,EAAE;YACjC5R,GAAG,IAAI3P,IAAI,CAACM,KAAK,CAACgf,MAAM,CAACC,KAAK,CAACgC,GAAG,CAAC;UACrC;QACF;QACA,OAAO5R,GAAG;MACZ;IACF,CAAC;IACD;;IAEA3P,IAAI,CAACM,KAAK,CAACkhB,WAAW,GAAG;MACvBC,iBAAiB,EAAE,SAAAA,CAASlW,IAAI,EAAE;QAChC,OAAOvL,IAAI,CAACc,QAAQ,CAACC,QAAQ,CAC3Bf,IAAI,CAACE,IAAI,CAACL,MAAM,CAACK,IAAI,CAACF,IAAI,CAACE,IAAI,CAACL,MAAM,CAACK,IAAI,CAACqL,IAAI,CAAC,CAAC,EAClD,CAAC,EACD,EACF,CAAC;MACH,CAAC;MAEDD,QAAQ,EAAE,SAAAA,CAASoW,OAAO,EAAEnW,IAAI,EAAEoW,UAAU,EAAE;QAC5CA,UAAU,GAAGA,UAAU,IAAI3hB,IAAI,CAACM,KAAK,CAACkhB,WAAW,CAACC,iBAAiB;QAEnE,IAAIG,cAAc,GAAG5hB,IAAI,CAACc,QAAQ,CAACe,MAAM,CACvC,CAAC7B,IAAI,CAACc,QAAQ,CAAC0B,OAAO,CAAC,CAAC,EAAEkf,OAAO,CAAC,CAAC,EACnCnW,IACF,CAAC;QACD,IAAIsW,QAAQ,GAAGF,UAAU,CAACC,cAAc,CAAC;QACzC,IAAIE,wBAAwB,GAAG9hB,IAAI,CAACc,QAAQ,CAACe,MAAM,CACjD+f,cAAc,EACdC,QACF,CAAC;QACD,IAAIE,SAAS,GAAG/hB,IAAI,CAACM,KAAK,CAACgf,MAAM,CAAChU,QAAQ,CAACwW,wBAAwB,CAAC;QAEpE,IAAIE,eAAe,GAAG,CAAC;QACvB,OACEhiB,IAAI,CAACc,QAAQ,CAACS,OAAO,CAACugB,wBAAwB,EAAEE,eAAe,EAAE,CAAC,CAAC,IAAI,CAAC,EACxE;UACAD,SAAS,GAAG,GAAG,GAAGA,SAAS;UAC3BC,eAAe,IAAI,CAAC;QACtB;QAEA,OAAOD,SAAS;MAClB,CAAC;MACD9W,MAAM,EAAE,SAAAA,CAAS0E,GAAG,EAAEgS,UAAU,EAAE;QAChCA,UAAU,GAAGA,UAAU,IAAI3hB,IAAI,CAACM,KAAK,CAACkhB,WAAW,CAACC,iBAAiB;QAEnE,IAAIlW,IAAI,GAAGvL,IAAI,CAACM,KAAK,CAACgf,MAAM,CAACrU,MAAM,CAAC0E,GAAG,CAAC;QACxC,IAAIyR,MAAM,GAAGphB,IAAI,CAACc,QAAQ,CAACsB,SAAS,CAACmJ,IAAI,CAAC;QAC1C;QACA,IAAI0W,OAAO,GAAGjiB,IAAI,CAACc,QAAQ,CAACC,QAAQ,CAACwK,IAAI,EAAE,CAAC,EAAE6V,MAAM,GAAG,EAAE,CAAC;QAE1D,IAAIc,mBAAmB,GAAGliB,IAAI,CAACc,QAAQ,CAACC,QAAQ,CAACwK,IAAI,EAAE6V,MAAM,GAAG,EAAE,CAAC;QACnE,IAAIe,gBAAgB,GAAGR,UAAU,CAACM,OAAO,CAAC;QAC1C,IAAI,CAACjiB,IAAI,CAACc,QAAQ,CAAC6B,KAAK,CAACwf,gBAAgB,EAAED,mBAAmB,CAAC,EAAE;UAC/D,MAAM,IAAIE,KAAK,CAAC,wBAAwB,CAAC;QAC3C;QAEA,OAAOH,OAAO;MAChB;IACF,CAAC;IACD;IACAjiB,IAAI,CAACM,KAAK,CAAChB,OAAO,GAAG;MACnB+iB,KAAK,EAAE,CAAC,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,SAAS,CAAC;MAC7CC,OAAO,EAAE;QACPC,SAAS,EAAE,GAAG;QACdC,UAAU,EAAE,IAAI;QAChBC,SAAS,EAAE;MACb,CAAC;MACDC,OAAO,EAAE;QACPH,SAAS,EAAE,GAAG;QACdC,UAAU,EAAE,IAAI;QAChBC,SAAS,EAAE;MACb,CAAC;MACDE,WAAW,EAAE,SAAAA,CAASpX,IAAI,EAAE;QAC1B,OAAOvL,IAAI,CAACc,QAAQ,CAACC,QAAQ,CAACf,IAAI,CAACE,IAAI,CAACJ,SAAS,CAACI,IAAI,CAACqL,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;MACtE,CAAC;MAED3L,gBAAgB,EAAE,SAAAA,CAASgjB,OAAO,EAAEC,QAAQ,EAAE;QAC5C,IAAIC,QAAQ,GAAG,CAAC,CAAC;QACjB,IAAIC,KAAK,GAAG/iB,IAAI,CAAC+P,GAAG,CAACsC,MAAM,CAACQ,IAAI;QAChC,KAAK,IAAIhQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG7C,IAAI,CAACM,KAAK,CAAChB,OAAO,CAAC+iB,KAAK,CAACrgB,MAAM,EAAEa,CAAC,EAAE,EAAE;UACxD,IAAImgB,IAAI,GAAGhjB,IAAI,CAACM,KAAK,CAAChB,OAAO,CAAC+iB,KAAK,CAACxf,CAAC,CAAC;UACtC,IAAIogB,IAAI,GAAGL,OAAO,GAAGI,IAAI,GAAGH,QAAQ;UACpC,IAAIK,MAAM,GAAGljB,IAAI,CAACkG,EAAE,CAACoF,QAAQ,CAC3BtL,IAAI,CAACE,IAAI,CAACL,MAAM,CAACK,IAAI,CAACF,IAAI,CAACM,KAAK,CAACgP,UAAU,CAACrE,MAAM,CAACgY,IAAI,CAAC,CAC1D,CAAC;UACDH,QAAQ,CAACE,IAAI,CAAC,GAAGhjB,IAAI,CAAC+P,GAAG,CAAC8E,KAAK,CAAClV,YAAY,CAACojB,KAAK,EAAE,CAAC,EAAEG,MAAM,CAAC;QAChE;QACA,OAAOJ,QAAQ;MACjB,CAAC;MAEDK,eAAe,EAAE,SAAAA,CAASjP,GAAG,EAAEhU,IAAI,EAAEuN,QAAQ,EAAE6H,gBAAgB,EAAE;QAC/D;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;QAEI,IAAItV,IAAI,CAACc,QAAQ,CAACsB,SAAS,CAAClC,IAAI,CAAC,GAAG,IAAI,CAACwT,eAAe,EAAE;UACxDxT,IAAI,GAAGF,IAAI,CAACc,QAAQ,CAACQ,KAAK,CAACpB,IAAI,EAAE,IAAI,CAACwT,eAAe,CAAC;QACxD;QAEA,OAAO,IAAI,EAAE;UAEX,IAAIqP,KAAK,GAAG/iB,IAAI,CAAC+P,GAAG,CAACsC,MAAM,CAACQ,IAAI;YAC9B/D,CAAC,GAAGiU,KAAK,CAACpb,CAAC;YACXtF,CAAC,GAAGyM,CAAC,CAAC1M,SAAS,CAAC,CAAC;YACjBqE,CAAC,GAAG6O,gBAAgB,IAAItV,IAAI,CAACkG,EAAE,CAACsH,MAAM,CAACsB,CAAC,CAAC5G,GAAG,CAAC,CAAC,CAAC,EAAEuF,QAAQ,CAAC,CAAClF,GAAG,CAAC,CAAC,CAAC;YACjEgB,CAAC,GAAGwZ,KAAK,CAAC3Q,CAAC,CAAC9B,IAAI,CAAC7J,CAAC,CAAC;UAErB,IAAI6O,gBAAgB,EAAE;YACpBA,gBAAgB,GAAGA,gBAAgB,CAAC/M,GAAG,CAAC,CAAC,CAAC;UAC5C;UAEA,IAAIgB,CAAC,CAAC2G,UAAU,EAAE;YAChB;UACF;UAEA,IAAIvI,CAAC,GAAG4B,CAAC,CAAC9H,CAAC,CAACsG,GAAG,CAAC+G,CAAC,CAAC;YAChBmG,EAAE,GAAGjV,IAAI,CAACkG,EAAE,CAACoF,QAAQ,CAACpL,IAAI,CAAC,CAACqI,GAAG,CAACZ,CAAC,CAACa,GAAG,CAAC0L,GAAG,CAACF,SAAS,CAAC,CAAC;YACrD7O,CAAC,GAAG8P,EAAE,CAACzM,GAAG,CAAC/B,CAAC,CAAC2B,UAAU,CAAC0G,CAAC,CAAC,CAAC,CAAC/G,GAAG,CAAC+G,CAAC,CAAC;YAClCsU,KAAK,GAAG7Z,CAAC,CAAClG,CAAC,CAACqD,KAAK,CAAC,CAAC,CAAC,GAAI,GAAG,IAAI,CAAE;YACjC2c,aAAa,GAAG,EAAE;UAElB,IAAID,KAAK,EAAE;YACTC,aAAa,EAAE;UACjB;UAEA,IAAIC,SAAS,GAAG3b,CAAC,CAACsD,MAAM,CAAC5I,CAAC,CAAC;UAC3B,IAAIkhB,SAAS,GAAGpe,CAAC,CAAC8F,MAAM,CAAC5I,CAAC,CAAC;UAE3B,IAAImhB,EAAE,GAAGxjB,IAAI,CAACc,QAAQ,CAACS,OAAO,CAAC+hB,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC;UAC/C,IAAIG,EAAE,GAAGzjB,IAAI,CAACc,QAAQ,CAACS,OAAO,CAAC+hB,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC;UAC/C,IAAII,EAAE,GAAG1jB,IAAI,CAACc,QAAQ,CAACS,OAAO,CAACgiB,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC;UAC/C,IAAII,EAAE,GAAG3jB,IAAI,CAACc,QAAQ,CAACS,OAAO,CAACgiB,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC;UAE/C,IAAI,EAAEC,EAAE,GAAG,IAAI,CAAC,IACX,EAAEA,EAAE,IAAI,CAAC,IAAI,EAAEC,EAAE,GAAG,IAAI,CAAC,CAAC,IAC1B,EAAEC,EAAE,GAAG,IAAI,CAAC,IACZ,EAAEA,EAAE,IAAI,CAAC,IAAI,EAAEC,EAAE,GAAG,IAAI,CAAC,CAAC,EAAE;YAC/B,IAAIC,MAAM,GAAG5jB,IAAI,CAACc,QAAQ,CAACe,MAAM,CAAC8F,CAAC,CAACsD,MAAM,CAAC5I,CAAC,CAAC,EAAE8C,CAAC,CAAC8F,MAAM,CAAC5I,CAAC,CAAC,CAAC;YAE3D,OAAOrC,IAAI,CAACc,QAAQ,CAACe,MAAM,CACzB,CAAC7B,IAAI,CAACc,QAAQ,CAAC0B,OAAO,CAAC,CAAC,EAAE6gB,aAAa,CAAC,CAAC,EACzCO,MACF,CAAC;UACH;QACH;MACH,CAAC;MAEDC,gBAAgB,EAAE,SAAAA,CAAS3jB,IAAI,EAAE4jB,GAAG,EAAE;QACpC,IAAIf,KAAK,GAAG/iB,IAAI,CAAC+P,GAAG,CAACsC,MAAM,CAACQ,IAAI;QAChC,IAAI/D,CAAC,GAAGiU,KAAK,CAACpb,CAAC;QACf,IAAIyK,CAAC,GAAG2Q,KAAK,CAAC3Q,CAAC;QAEf,IAAI2R,iBAAiB,GAAG/jB,IAAI,CAACc,QAAQ,CAACS,OAAO,CAACuiB,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE;QAC7D,IAAI1Y,CAAC,GAAGpL,IAAI,CAACkG,EAAE,CAACoF,QAAQ,CAACpL,IAAI,CAAC;QAC9B,IAAIyH,CAAC,GAAG3H,IAAI,CAACkG,EAAE,CAACoF,QAAQ,CAACtL,IAAI,CAACc,QAAQ,CAACC,QAAQ,CAAC+iB,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;QAC7D,IAAI3e,CAAC,GAAGnF,IAAI,CAACkG,EAAE,CAACoF,QAAQ,CAACtL,IAAI,CAACc,QAAQ,CAACC,QAAQ,CAAC+iB,GAAG,EAAE,GAAG,CAAC,CAAC;QAE1D,IAAIC,iBAAiB,GAAG,CAAC,IAAIA,iBAAiB,GAAG,CAAC,EAAE;UAClD,MAAM,IAAI3B,KAAK,CAAC,gDAAgD,CAAC;QACnE;QAEA,IAAI4B,YAAY,GAAG,CAACD,iBAAiB,GAAG,GAAG,MAAM,CAAC;QAElD,KAAK,IAAIlgB,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;UAC3B,IAAIpC,CAAC,GAAGkG,CAAC,CAACY,GAAG,CAACuG,CAAC,CAACtG,GAAG,CAAC3E,CAAC,CAAC,CAAC;UAEvB,IAAIR,CAAC,GAAGrD,IAAI,CAACM,KAAK,CAAChB,OAAO,CAAC2kB,OAAO,CAACxiB,CAAC,EAAEuiB,YAAY,CAAC;UACnD,IAAI3b,CAAC,GAAG,IAAIrI,IAAI,CAAC+P,GAAG,CAACC,KAAK,CAAC+S,KAAK,EAAEthB,CAAC,EAAE4B,CAAC,CAAC;UAEvC,IAAI6gB,IAAI,GAAGvc,CAAC,CAACS,UAAU,CAAC0G,CAAC,CAAC;UAC1B,IAAIqV,IAAI,GAAG,IAAInkB,IAAI,CAACkG,EAAE,CAAC,CAAC,CAAC,CAACgC,GAAG,CAACkD,CAAC,CAAC,CAACrD,GAAG,CAAC+G,CAAC,CAAC;UACvC,IAAIsV,QAAQ,GAAGhS,CAAC,CAAC5B,KAAK,CAAC2T,IAAI,EAAEhf,CAAC,EAAEkD,CAAC,CAAC,CAACiI,IAAI,CAAC4T,IAAI,CAAC;UAC7C,IAAIxgB,GAAG,GAAG,IAAI1D,IAAI,CAAC+P,GAAG,CAAC8E,KAAK,CAACtB,SAAS,CAACwP,KAAK,EAAEqB,QAAQ,CAAC;UACvD,IAAI;YACF1gB,GAAG,CAACoR,MAAM,CAAC5U,IAAI,EAAEF,IAAI,CAACc,QAAQ,CAACC,QAAQ,CAAC+iB,GAAG,EAAE,CAAC,CAAC,CAAC;YAChD,OAAOpgB,GAAG;UACZ,CAAC,CAAC,OAAO2gB,CAAC,EAAE;YACV;UAAA;QAEJ;QACA,MAAM,IAAIjC,KAAK,CAAC,8BAA8B,CAAC;MACjD,CAAC;MAEDkC,kBAAkB,EAAE,SAAAA,CAAS5gB,GAAG,EAAE6gB,GAAG,EAAE;QACrCA,GAAG,GAAGA,GAAG,IAAIvkB,IAAI,CAACM,KAAK,CAAChB,OAAO,CAACgjB,OAAO;QAEvC,IAAItS,KAAK,GAAGtM,GAAG,CAACoQ,GAAG,CAAC,CAAC;QACrB,IAAI0Q,MAAM,GAAGD,GAAG,CAAChC,SAAS;;QAE1B;QACA,IAAIviB,IAAI,CAACkG,EAAE,CAACoF,QAAQ,CAAC0E,KAAK,CAAC3M,CAAC,CAAC,CAACqD,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,EAAE;UAC5C8d,MAAM,IAAI,GAAG;QACf,CAAC,MAAM;UACLA,MAAM,IAAI,GAAG;QACf;QACA,OACED,GAAG,CAAC9B,SAAS,GACbziB,IAAI,CAACM,KAAK,CAACkhB,WAAW,CAAClW,QAAQ,CAC7BkZ,MAAM,EACNxU,KAAK,CAACvO,CAAC,EACPzB,IAAI,CAACM,KAAK,CAAChB,OAAO,CAACqjB,WACrB,CAAC;MAEL,CAAC;MAED8B,oBAAoB,EAAE,SAAAA,CAASC,MAAM,EAAEH,GAAG,EAAE;QAC1CA,GAAG,GAAGA,GAAG,IAAIvkB,IAAI,CAACM,KAAK,CAAChB,OAAO,CAACgjB,OAAO;QACvC,IAAIS,KAAK,GAAG/iB,IAAI,CAAC+P,GAAG,CAACsC,MAAM,CAACQ,IAAI;QAEhC,IAAI6R,MAAM,CAACvR,OAAO,CAACoR,GAAG,CAAC9B,SAAS,CAAC,KAAK,CAAC,EAAE;UACvC,MAAM,IAAIL,KAAK,CACb,6DAA6D,GAC3DmC,GAAG,CAAC9B,SAAS,GACb,GACJ,CAAC;QACH;QAEA,IAAIR,OAAO,GAAGjiB,IAAI,CAACM,KAAK,CAACkhB,WAAW,CAACvW,MAAM,CACzCyZ,MAAM,CAACtjB,KAAK,CAAC,CAAC,CAAC,EACfpB,IAAI,CAACM,KAAK,CAAChB,OAAO,CAACqjB,WACrB,CAAC;QACD,IAAIgC,UAAU,GAAG3kB,IAAI,CAACc,QAAQ,CAACS,OAAO,CAAC0gB,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;QACrD,IAAImB,KAAK,GAAGuB,UAAU,IAAI,GAAG;QAC7B,IAAI,CAACA,UAAU,GAAGJ,GAAG,CAAChC,SAAS,MAAMgC,GAAG,CAAChC,SAAS,EAAE;UAClD,MAAM,IAAIH,KAAK,CAAC,+BAA+B,CAAC;QAClD,CAAC,MAAM,IAAI,CAACuC,UAAU,GAAG,GAAG,MAAM,CAAC,IAAI,CAACA,UAAU,GAAG,GAAG,MAAM,CAAC,EAAE;UAC/D,MAAM,IAAIvC,KAAK,CACb,kEAAkE,GAChEuC,UAAU,CAACjkB,QAAQ,CAAC,EAAE,CAC1B,CAAC;QACH;QAEA,IAAIkkB,KAAK,GAAG5kB,IAAI,CAACc,QAAQ,CAACC,QAAQ,CAACkhB,OAAO,EAAE,CAAC,CAAC;QAC9C,IAAIxgB,CAAC,GAAGzB,IAAI,CAACkG,EAAE,CAACoF,QAAQ,CAACsZ,KAAK,CAAC;QAC/B,IAAIvhB,CAAC,GAAGrD,IAAI,CAACM,KAAK,CAAChB,OAAO,CAAC2kB,OAAO,CAACxiB,CAAC,EAAE2hB,KAAK,CAAC;QAE5C,OAAO,IAAIpjB,IAAI,CAAC+P,GAAG,CAAC8E,KAAK,CAACtB,SAAS,CAACwP,KAAK,EAAE,IAAI/iB,IAAI,CAAC+P,GAAG,CAACC,KAAK,CAAC+S,KAAK,EAAEthB,CAAC,EAAE4B,CAAC,CAAC,CAAC;MAC7E,CAAC;MAEDwhB,mBAAmB,EAAE,SAAAA,CAASnhB,GAAG,EAAE6gB,GAAG,EAAE;QACtCA,GAAG,GAAGA,GAAG,IAAIvkB,IAAI,CAACM,KAAK,CAAChB,OAAO,CAACgjB,OAAO;QACvC,OAAOtiB,IAAI,CAACM,KAAK,CAACkhB,WAAW,CAAClW,QAAQ,CAACiZ,GAAG,CAAC/B,UAAU,EAAE9e,GAAG,CAACoQ,GAAG,CAAC,CAAC,CAAC;MACnE,CAAC;MAEDgR,qBAAqB,EAAE,SAAAA,CAASC,GAAG,EAAEP,MAAM,EAAE;QAC3CA,MAAM,GAAGA,MAAM,IAAIxkB,IAAI,CAACM,KAAK,CAAChB,OAAO,CAACgjB,OAAO,CAACE,UAAU;QACxD,IAAIvS,KAAK,GAAGjQ,IAAI,CAAC+P,GAAG,CAACsC,MAAM,CAACQ,IAAI;QAChC,IAAIoP,OAAO,GAAGjiB,IAAI,CAACM,KAAK,CAACkhB,WAAW,CAACvW,MAAM,CAAC8Z,GAAG,CAAC;QAChD,IAAIJ,UAAU,GAAG3kB,IAAI,CAACc,QAAQ,CAACS,OAAO,CAAC0gB,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;QACrD,IAAI0C,UAAU,KAAKH,MAAM,EAAE;UACzB,MAAM,IAAIpC,KAAK,CACb,2CAA2C,GACzCoC,MAAM,CAAC9jB,QAAQ,CAAC,EAAE,CAAC,GACnB,UAAU,GACVikB,UAAU,CAACjkB,QAAQ,CAAC,EAAE,CAC1B,CAAC;QACH;QAEA,IAAIskB,OAAO,GAAGhlB,IAAI,CAACc,QAAQ,CAACC,QAAQ,CAACkhB,OAAO,EAAE,CAAC,CAAC;QAChD,OAAO,IAAIjiB,IAAI,CAAC+P,GAAG,CAAC8E,KAAK,CAACxB,SAAS,CAACpD,KAAK,EAAEjQ,IAAI,CAACkG,EAAE,CAACoF,QAAQ,CAAC0Z,OAAO,CAAC,CAAC;MACvE,CAAC;MAEDf,OAAO,EAAE,SAAAA,CAASxiB,CAAC,EAAEwjB,WAAW,EAAE;QAChC,IAAIlC,KAAK,GAAG/iB,IAAI,CAAC+P,GAAG,CAACsC,MAAM,CAACQ,IAAI;QAChC,IAAIqS,MAAM,GAAGllB,IAAI,CAACM,KAAK,CAAChB,OAAO,CAAC6lB,UAAU,CAAC,CAAC;QAE5C,IAAI5F,KAAK,GAAG9d,CAAC,CACV2H,QAAQ,CAAC,CAAC,EAAE2Z,KAAK,CAAC5S,KAAK,CAAC5D,OAAO,CAAC,CAChChE,GAAG,CAAC9G,CAAC,CAACyH,MAAM,CAAC6Z,KAAK,CAAC/hB,CAAC,EAAE+hB,KAAK,CAAC5S,KAAK,CAAC5D,OAAO,CAAC,CAAC,CAC3ChE,GAAG,CAACwa,KAAK,CAACngB,CAAC,CAAC,CACZmF,GAAG,CAACgb,KAAK,CAAC5S,KAAK,CAAC5D,OAAO,CAAC;QAE3B,IAAIlJ,CAAC,GAAGkc,KAAK,CAACnW,QAAQ,CAAC8b,MAAM,EAAEnC,KAAK,CAAC5S,KAAK,CAAC5D,OAAO,CAAC;QACnD,IAAI6Y,MAAM,GAAG/hB,CAAC,CAAC0E,GAAG,CAAC,CAAC,CAAC,CAACf,MAAM,CAAC,CAAC,CAAC;QAE/B,IAAKoe,MAAM,IAAIH,WAAW,IAAM,CAACG,MAAM,IAAI,CAACH,WAAY,EAAE;UACxD,OAAO5hB,CAAC;QACV,CAAC,MAAM;UACL,OAAO0f,KAAK,CAAC5S,KAAK,CAAC5D,OAAO,CAACrE,GAAG,CAAC7E,CAAC,CAAC,CAACsD,SAAS,CAAC,CAAC;QAC/C;MACF,CAAC;MAEDwe,UAAU,EAAE,SAAAA,CAAA,EAAW;QACrB,IAAI,CAACnlB,IAAI,CAACM,KAAK,CAAChB,OAAO,CAAC4lB,MAAM,EAAE;UAC9BllB,IAAI,CAACM,KAAK,CAAChB,OAAO,CAAC4lB,MAAM,GAAGllB,IAAI,CAAC+P,GAAG,CAACsC,MAAM,CAACQ,IAAI,CAAC1C,KAAK,CAAC5D,OAAO,CAC3DhE,GAAG,CAAC,CAAC,CAAC,CACN5B,SAAS,CAAC,CAAC,CACXkB,MAAM,CAAC,CAAC,CACRA,MAAM,CAAC,CAAC,CACRlB,SAAS,CAAC,CAAC;QAChB;QACA,OAAO3G,IAAI,CAACM,KAAK,CAAChB,OAAO,CAAC4lB,MAAM;MAClC;IACF,CAAC;IAGG,OAAOllB,IAAI;EACb,CAAC,CAAE,CAAC;EAEJZ,OAAO,CAACY,IAAI,GAAGA,IAAI;EAEnB,SAASP,UAAUA,CAAC4lB,IAAI,EAAElR,GAAG,EAAE;IAC7B;IACA;IACA;IACA,IAAI,CAACmR,YAAY,GAAG,YAAW;MAC7B,IAAI,CAACnR,GAAG,EAAE;QACRA,GAAG,GAAGnU,IAAI,CAAC+P,GAAG,CAAC8E,KAAK,CAAClV,YAAY,CAC/BK,IAAI,CAAC+P,GAAG,CAACsC,MAAM,CAACQ,IAAI,EACpBxR,SAAS,EACTrB,IAAI,CAACkG,EAAE,CAACoF,QAAQ,CAAC+Z,IAAI,CAACvR,GAAG,CAAC,CAAC,CAC7B,CAAC,CAACK,GAAG;MACP;MACA,OAAO,IAAIzU,SAAS,CAACyU,GAAG,CAAC;IAC3B,CAAC;IAED,IAAI,CAACkB,IAAI,GAAG,UAASnV,IAAI,EAAE;MACzB,OAAOoL,QAAQ,CAACtL,IAAI,CAACM,KAAK,CAAChB,OAAO,CAAC6jB,eAAe,CAACkC,IAAI,EAAEpa,MAAM,CAAC/K,IAAI,CAAC,CAAC,CAAC;IACzE,CAAC;EACH;EAEAT,UAAU,CAAC8lB,IAAI,GAAG,UAASR,GAAG,EAAEP,MAAM,EAAE;IACtC,OAAO,IAAI/kB,UAAU,CACnBO,IAAI,CAACM,KAAK,CAAChB,OAAO,CAACwlB,qBAAqB,CAACC,GAAG,EAAEP,MAAM,CACtD,CAAC;EACH,CAAC;EAED,SAAS9kB,SAASA,CAACyU,GAAG,EAAE;IACtB,IAAI,CAACqR,EAAE,GAAGrR,GAAG;EACf;EAEAzU,SAAS,CAAC6lB,IAAI,GAAG,UAAS5V,GAAG,EAAE;IAC7B,OAAO,IAAIjQ,SAAS,CAACM,IAAI,CAACM,KAAK,CAAChB,OAAO,CAACmlB,oBAAoB,CAAC9U,GAAG,CAAC,CAAC;EACpE,CAAC;EAEDjQ,SAAS,CAAC+lB,OAAO,GAAG,UAASvlB,IAAI,EAAE4jB,GAAG,EAAE;IACtC,OAAO,IAAIpkB,SAAS,CAClBM,IAAI,CAACM,KAAK,CAAChB,OAAO,CAACukB,gBAAgB,CAAC5Y,MAAM,CAAC/K,IAAI,CAAC,EAAE+K,MAAM,CAAC6Y,GAAG,CAAC,CAC/D,CAAC;EACH,CAAC;EAEDpkB,SAAS,CAAC4E,SAAS,GAAG;IACpB5D,QAAQ,EAAE,SAAAA,CAAA,EAAW;MACnB,OAAOV,IAAI,CAACM,KAAK,CAAChB,OAAO,CAACglB,kBAAkB,CAAC,IAAI,CAACkB,EAAE,CAAC;IACvD,CAAC;IACD1Q,MAAM,EAAE,SAAAA,CAAS5U,IAAI,EAAEwlB,SAAS,EAAE;MAChC,IAAI;QACF,IAAI9B,MAAM,GAAG5jB,IAAI,CAACc,QAAQ,CAACC,QAAQ,CAACkK,MAAM,CAACya,SAAS,CAAC,EAAE,CAAC,CAAC;QACzD,IAAI,CAACF,EAAE,CAAC1Q,MAAM,CAAC7J,MAAM,CAAC/K,IAAI,CAAC,EAAE0jB,MAAM,CAAC;QACpC,OAAO,IAAI;MACb,CAAC,CAAC,OAAOS,CAAC,EAAE;QACV,OAAO,KAAK;MACd;IACF;EACF,CAAC;EAED,SAAS1kB,YAAYA,CAAA,EAAG;IACtB,IAAI8G,CAAC,GAAGzG,IAAI,CAAC+P,GAAG,CAAC8E,KAAK,CAAClV,YAAY,CAACK,IAAI,CAAC+P,GAAG,CAACsC,MAAM,CAACQ,IAAI,CAAC;IACzD,OAAO8S,aAAa,CAAClf,CAAC,CAAC;EACzB;EAEA,SAAS7G,gBAAgBA,CAACgmB,WAAW,EAAEC,eAAe,EAAE;IACtD,IAAIC,IAAI,GAAG9lB,IAAI,CAACM,KAAK,CAAChB,OAAO,CAACM,gBAAgB,CAC5CgmB,WAAW,EACXC,eACF,CAAC;IACD,OAAO;MACLE,KAAK,EAAEJ,aAAa,CAACG,IAAI,CAACC,KAAK,CAAC;MAChCC,IAAI,EAAEL,aAAa,CAACG,IAAI,CAACE,IAAI,CAAC;MAC9BC,OAAO,EAAEN,aAAa,CAACG,IAAI,CAACG,OAAO,CAAC;MACpCC,MAAM,EAAEP,aAAa,CAACG,IAAI,CAACI,MAAM;IACnC,CAAC;EACH;EAEA,SAASrmB,MAAMA,CAAC2E,IAAI,EAAE;IACpB,OAAO8G,QAAQ,CAACtL,IAAI,CAACE,IAAI,CAACL,MAAM,CAACK,IAAI,CAAC+K,MAAM,CAACzG,IAAI,CAAC,CAAC,CAAC;EACtD;EAEA,SAAS1E,SAASA,CAAC0E,IAAI,EAAE;IACvB,OAAO8G,QAAQ,CAACtL,IAAI,CAACE,IAAI,CAACJ,SAAS,CAACI,IAAI,CAAC+K,MAAM,CAACzG,IAAI,CAAC,CAAC,CAAC;EACzD;EAEA,SAASzE,MAAMA,CAACyE,IAAI,EAAE;IACpB,IAAI2hB,MAAM,GAAG,EAAE;IACf,IAAIC,IAAI,GAAG,IAAIjH,UAAU,CAAC3a,IAAI,CAAC;IAC/B,KAAK,IAAI3B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGujB,IAAI,CAAChY,UAAU,EAAEvL,CAAC,EAAE,EAAE;MACxC,IAAIujB,IAAI,CAACvjB,CAAC,CAAC,GAAG,EAAE,EAAE;QAChBsjB,MAAM,IAAI,GAAG;MACf;MACAA,MAAM,IAAIC,IAAI,CAACvjB,CAAC,CAAC,CAACnC,QAAQ,CAAC,EAAE,CAAC;IAChC;IACA,OAAOylB,MAAM;EACf;EAEA,SAASR,aAAaA,CAAClf,CAAC,EAAE;IACxB,OAAO;MACL4f,OAAO,EAAErmB,IAAI,CAACM,KAAK,CAAChB,OAAO,CAACulB,mBAAmB,CAACpe,CAAC,CAACyN,GAAG,CAAC;MACtDoS,MAAM,EAAEtmB,IAAI,CAACM,KAAK,CAAChB,OAAO,CAACglB,kBAAkB,CAAC7d,CAAC,CAAC0N,GAAG;IACrD,CAAC;EACH;EAEA,SAASlJ,MAAMA,CAACjK,CAAC,EAAE;IACjB,IAAIA,CAAC,YAAY2M,WAAW,EAAE;MAC5B,OAAO3N,IAAI,CAACM,KAAK,CAACwN,WAAW,CAAC7C,MAAM,CAACjK,CAAC,CAAC;IACzC,CAAC,MAAM;MACL,MAAM,IAAIohB,KAAK,CAAC,gCAAgC,CAAC;IACnD;EACF;EAEA,SAAS9W,QAAQA,CAACtK,CAAC,EAAE;IACnB,OAAOhB,IAAI,CAACM,KAAK,CAACwN,WAAW,CAACxC,QAAQ,CAACtK,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACjD;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}