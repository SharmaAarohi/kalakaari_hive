{"ast":null,"code":"const port = 4000;\nconst express = require(\"express\");\nconst app = express();\nconst mongoose = require(\"mongoose\");\nconst jwt = require(\"jsonwebtoken\");\nconst multer = require(\"multer\");\nconst path = require(\"path\");\nconst cors = require(\"cors\");\n\n// Import @hiveio/hive-js\nconst hive = require('@hiveio/hive-js');\napp.use(express.json());\napp.use(cors());\n\n// Database Connection With MongoDB\nmongoose.connect(\"mongodb+srv://aarohisharma150250:Aarohi15@@cluster0.ayg15ta.mongodb.net/\");\n\n//Image Storage Engine \nconst storage = multer.diskStorage({\n  destination: './upload/images',\n  filename: (req, file, cb) => {\n    console.log(file);\n    return cb(null, `${file.fieldname}_${Date.now()}${path.extname(file.originalname)}`);\n  }\n});\nconst upload = multer({\n  storage: storage\n});\napp.post(\"/upload\", upload.single('product'), (req, res) => {\n  res.json({\n    success: 1,\n    image_url: `http://localhost:4000/images/${req.file.filename}`\n  });\n});\napp.use('/images', express.static('upload/images'));\n\n// MiddleWare to fetch user from database\nconst fetchuser = async (req, res, next) => {\n  const token = req.header(\"auth-token\");\n  if (!token) {\n    res.status(401).send({\n      errors: \"Please authenticate using a valid token\"\n    });\n  }\n  try {\n    const data = jwt.verify(token, \"secret_ecom\");\n    req.user = data.user;\n    next();\n  } catch (error) {\n    res.status(401).send({\n      errors: \"Please authenticate using a valid token\"\n    });\n  }\n};\n\n// Schema for creating user model\nconst Users = mongoose.model(\"Users\", {\n  name: {\n    type: String\n  },\n  email: {\n    type: String,\n    unique: true\n  },\n  password: {\n    type: String\n  },\n  cartData: {\n    type: Object\n  },\n  date: {\n    type: Date,\n    default: Date.now\n  }\n});\n\n// Schema for creating Product\nconst Product = mongoose.model(\"Product\", {\n  id: {\n    type: Number,\n    required: true\n  },\n  name: {\n    type: String,\n    required: true\n  },\n  image: {\n    type: String,\n    required: true\n  },\n  category: {\n    type: String,\n    required: true\n  },\n  new_price: {\n    type: Number\n  },\n  old_price: {\n    type: Number\n  },\n  date: {\n    type: Date,\n    default: Date.now\n  },\n  avilable: {\n    type: Boolean,\n    default: true\n  }\n});\napp.get(\"/\", (req, res) => {\n  res.send(\"Root\");\n});\n\n//Create an endpoint at ip/login for login the user and giving auth-token\napp.post('/login', async (req, res) => {\n  let success = false;\n  let user = await Users.findOne({\n    email: req.body.email\n  });\n  if (user) {\n    const passCompare = req.body.password === user.password;\n    if (passCompare) {\n      const data = {\n        user: {\n          id: user.id\n        }\n      };\n      success = true;\n      console.log(user.id);\n      const token = jwt.sign(data, 'secret_ecom');\n      res.json({\n        success,\n        token\n      });\n    } else {\n      return res.status(400).json({\n        success: success,\n        errors: \"please try with correct email/password\"\n      });\n    }\n  } else {\n    return res.status(400).json({\n      success: success,\n      errors: \"please try with correct email/password\"\n    });\n  }\n});\n\n//Create an endpoint at ip/auth for regestring the user in data base & sending token\napp.post('/signup', async (req, res) => {\n  let success = false;\n  let check = await Users.findOne({\n    email: req.body.email\n  });\n  if (check) {\n    return res.status(400).json({\n      success: success,\n      errors: \"existing user found with this email\"\n    });\n  }\n  let cart = {};\n  for (let i = 0; i < 300; i++) {\n    cart[i] = 0;\n  }\n  const user = new Users({\n    name: req.body.username,\n    email: req.body.email,\n    password: req.body.password,\n    cartData: cart\n  });\n  await user.save();\n  const data = {\n    user: {\n      id: user.id\n    }\n  };\n  const token = jwt.sign(data, 'secret_ecom');\n  success = true;\n  res.json({\n    success,\n    token\n  });\n});\napp.get(\"/allproducts\", async (req, res) => {\n  let products = await Product.find({});\n  console.log(\"All Products\");\n  res.send(products);\n});\napp.get(\"/newcollections\", async (req, res) => {\n  let products = await Product.find({});\n  let arr = products.slice(1).slice(-8);\n  console.log(\"New Collections\");\n  res.send(arr);\n});\napp.get(\"/popularinwomen\", async (req, res) => {\n  let products = await Product.find({});\n  let arr = products.splice(0, 4);\n  console.log(\"Popular In Women\");\n  res.send(arr);\n});\n\n//Create an endpoint for saving the product in cart\napp.post('/addtocart', fetchuser, async (req, res) => {\n  console.log(\"Add Cart\");\n  let userData = await Users.findOne({\n    _id: req.user.id\n  });\n  userData.cartData[req.body.itemId] += 1;\n  await Users.findOneAndUpdate({\n    _id: req.user.id\n  }, {\n    cartData: userData.cartData\n  });\n  res.send(\"Added\");\n});\n\n//Create an endpoint for saving the product in cart\napp.post('/removefromcart', fetchuser, async (req, res) => {\n  console.log(\"Remove Cart\");\n  let userData = await Users.findOne({\n    _id: req.user.id\n  });\n  if (userData.cartData[req.body.itemId] !== 0) {\n    userData.cartData[req.body.itemId] -= 1;\n  }\n  await Users.findOneAndUpdate({\n    _id: req.user.id\n  }, {\n    cartData: userData.cartData\n  });\n  res.send(\"Removed\");\n});\n\n//Create an endpoint for saving the product in cart\napp.post('/getcart', fetchuser, async (req, res) => {\n  console.log(\"Get Cart\");\n  let userData = await Users.findOne({\n    _id: req.user.id\n  });\n  res.json(userData.cartData);\n});\napp.post(\"/addproduct\", async (req, res) => {\n  let products = await Product.find({});\n  let id;\n  if (products.length > 0) {\n    let last_product_array = products.slice(-1);\n    let last_product = last_product_array[0];\n    id = last_product.id + 1;\n  } else {\n    id = 1;\n  }\n  const product = new Product({\n    id: id,\n    name: req.body.name,\n    image: req.body.image,\n    category: req.body.category,\n    new_price: req.body.new_price,\n    old_price: req.body.old_price\n  });\n  console.log(product);\n  await product.save();\n  console.log(\"Saved\");\n  res.json({\n    success: true,\n    name: req.body.name\n  });\n});\napp.post(\"/removeproduct\", async (req, res) => {\n  const product = await Product.findOneAndDelete({\n    id: req.body.id\n  });\n  console.log(\"Removed\");\n  res.json({\n    success: true,\n    name: req.body.name\n  });\n});\n\n// Endpoint to fetch data from the Hive blockchain\napp.get(\"/hive-accounts\", async (req, res) => {\n  try {\n    const accounts = await hive.api.getAccounts(['account1', 'account2']);\n    res.json(accounts);\n  } catch (error) {\n    console.error(\"Error fetching Hive accounts:\", error);\n    res.status(500).json({\n      error: \"Failed to fetch Hive accounts\"\n    });\n  }\n});\nconsole.log(\"Before app.listen\"); // Add this line\napp.listen(port, error => {\n  if (!error) {\n    console.log(\"Server Running on port \" + port);\n  } else {\n    console.log(\"Error : \", error);\n  }\n});\napp.listen(port, error => {\n  if (!error) {\n    console.log(\"Server Running on port \" + port);\n  } else {\n    console.log(\"Error : \", error);\n  }\n});\n\n// Endpoint to broadcast a comment to the Hive blockchain\napp.post(\"/hive-post-comment\", async (req, res) => {\n  try {\n    const {\n      author,\n      permlink,\n      body\n    } = req.body;\n    // Broadcasting the comment\n    const result = await hive.broadcast.commentAsync(author, permlink, \"\", \"youraccount\", body);\n    res.json(result);\n  } catch (error) {\n    console.error(\"Error posting comment to Hive blockchain:\", error);\n    res.status(500).json({\n      error: \"Failed to post comment to Hive blockchain\"\n    });\n  }\n});","map":{"version":3,"names":["port","express","require","app","mongoose","jwt","multer","path","cors","hive","use","json","connect","storage","diskStorage","destination","filename","req","file","cb","console","log","fieldname","Date","now","extname","originalname","upload","post","single","res","success","image_url","static","fetchuser","next","token","header","status","send","errors","data","verify","user","error","Users","model","name","type","String","email","unique","password","cartData","Object","date","default","Product","id","Number","required","image","category","new_price","old_price","avilable","Boolean","get","findOne","body","passCompare","sign","check","cart","i","username","save","products","find","arr","slice","splice","userData","_id","itemId","findOneAndUpdate","length","last_product_array","last_product","product","findOneAndDelete","accounts","api","getAccounts","listen","author","permlink","result","broadcast","commentAsync"],"sources":["C:/Users/sunil/kalakaari/src/App.js"],"sourcesContent":["const port = 4000;\nconst express = require(\"express\");\nconst app = express();\nconst mongoose = require(\"mongoose\");\nconst jwt = require(\"jsonwebtoken\");\nconst multer = require(\"multer\");\nconst path = require(\"path\");\nconst cors = require(\"cors\");\n\n// Import @hiveio/hive-js\nconst hive = require('@hiveio/hive-js');\n\napp.use(express.json());\napp.use(cors());\n\n// Database Connection With MongoDB\nmongoose.connect(\"mongodb+srv://aarohisharma150250:Aarohi15@@cluster0.ayg15ta.mongodb.net/\");\n\n//Image Storage Engine \nconst storage = multer.diskStorage({\n    destination: './upload/images',\n    filename: (req, file, cb) => {\n        console.log(file);\n        return cb(null, `${file.fieldname}_${Date.now()}${path.extname(file.originalname)}`)\n    }\n})\nconst upload = multer({storage: storage})\napp.post(\"/upload\", upload.single('product'), (req, res) => {\n    res.json({\n        success: 1,\n        image_url: `http://localhost:4000/images/${req.file.filename}`\n    })\n})\napp.use('/images', express.static('upload/images'));\n\n// MiddleWare to fetch user from database\nconst fetchuser = async (req, res, next) => {\n  const token = req.header(\"auth-token\");\n  if (!token) {\n    res.status(401).send({ errors: \"Please authenticate using a valid token\" });\n  }\n  try {\n    const data = jwt.verify(token, \"secret_ecom\");\n    req.user = data.user;\n    next();\n  } catch (error) {\n    res.status(401).send({ errors: \"Please authenticate using a valid token\" });\n  }\n};\n\n// Schema for creating user model\nconst Users = mongoose.model(\"Users\", {\n  name: {\n    type: String,\n  },\n  email: {\n    type: String,\n    unique: true,\n  },\n  password: {\n    type: String,\n  },\n  cartData: {\n    type: Object,\n  },\n  date: {\n    type: Date,\n    default: Date.now,\n  },\n});\n\n// Schema for creating Product\nconst Product = mongoose.model(\"Product\", {\n  id: {\n    type: Number,\n    required: true,\n  },\n  name: {\n    type: String,\n    required: true,\n  },\n  image: {\n    type: String,\n    required: true,\n  },\n  category: {\n    type: String,\n    required: true,\n  },\n  new_price: {\n    type: Number\n  },\n  old_price: {\n    type: Number\n  },\n  date: {\n    type: Date,\n    default: Date.now,\n  },\n  avilable: {\n    type: Boolean,\n    default: true,\n  },\n});\n\napp.get(\"/\", (req, res) => {\n  res.send(\"Root\");\n});\n\n//Create an endpoint at ip/login for login the user and giving auth-token\napp.post('/login', async (req, res) => {\n    let success = false;\n    let user = await Users.findOne({ email: req.body.email });\n    if (user) {\n        const passCompare = req.body.password === user.password;\n        if (passCompare) {\n            const data = {\n                user: {\n                    id: user.id\n                }\n            }\n            success = true;\n            console.log(user.id);\n            const token = jwt.sign(data, 'secret_ecom');\n            res.json({ success, token });\n        }\n        else {\n            return res.status(400).json({success: success, errors: \"please try with correct email/password\"})\n        }\n    }\n    else {\n        return res.status(400).json({success: success, errors: \"please try with correct email/password\"})\n    }\n})\n\n//Create an endpoint at ip/auth for regestring the user in data base & sending token\napp.post('/signup', async (req, res) => {\n        let success = false;\n        let check = await Users.findOne({ email: req.body.email });\n        if (check) {\n            return res.status(400).json({ success: success, errors: \"existing user found with this email\" });\n        }\n        let cart = {};\n          for (let i = 0; i < 300; i++) {\n          cart[i] = 0;\n        }\n        const user = new Users({\n            name: req.body.username,\n            email: req.body.email,\n            password: req.body.password,\n            cartData: cart,\n        });\n        await user.save();\n        const data = {\n            user: {\n                id: user.id\n            }\n        }\n        \n        const token = jwt.sign(data, 'secret_ecom');\n        success = true; \n        res.json({ success, token })\n    })\n\napp.get(\"/allproducts\", async (req, res) => {\n  let products = await Product.find({});\n  console.log(\"All Products\");\n  res.send(products);\n});\n\napp.get(\"/newcollections\", async (req, res) => {\n  let products = await Product.find({});\n  let arr = products.slice(1).slice(-8);\n  console.log(\"New Collections\");\n  res.send(arr);\n});\n\napp.get(\"/popularinwomen\", async (req, res) => {\n  let products = await Product.find({});\n  let arr = products.splice(0,  4);\n  console.log(\"Popular In Women\");\n  res.send(arr);\n});\n\n//Create an endpoint for saving the product in cart\napp.post('/addtocart', fetchuser, async (req, res) => {\n  console.log(\"Add Cart\");\n  let userData = await Users.findOne({_id:req.user.id});\n  userData.cartData[req.body.itemId] += 1;\n  await Users.findOneAndUpdate({_id:req.user.id}, {cartData:userData.cartData});\n  res.send(\"Added\")\n})\n\n//Create an endpoint for saving the product in cart\napp.post('/removefromcart', fetchuser, async (req, res) => {\n  console.log(\"Remove Cart\");\n  let userData = await Users.findOne({_id:req.user.id});\n  if(userData.cartData[req.body.itemId]!==0)\n  {\n    userData.cartData[req.body.itemId] -= 1;\n  }\n  await Users.findOneAndUpdate({_id:req.user.id}, {cartData:userData.cartData});\n  res.send(\"Removed\");\n})\n\n//Create an endpoint for saving the product in cart\napp.post('/getcart', fetchuser, async (req, res) => {\n  console.log(\"Get Cart\");\n  let userData = await Users.findOne({_id:req.user.id});\n  res.json(userData.cartData);\n})\n\napp.post(\"/addproduct\", async (req, res) => {\n  let products = await Product.find({});\n  let id;\n  if (products.length>0) {\n      let last_product_array = products.slice(-1);\n      let last_product = last_product_array[0];\n      id = last_product.id+1;\n  }\n  else\n  { id = 1; }\n  const product = new Product({\n      id: id,\n      name: req.body.name,\n      image: req.body.image,\n      category: req.body.category,\n      new_price: req.body.new_price,\n      old_price: req.body.old_price,\n  });\n  console.log(product);\n  await product.save();\n  console.log(\"Saved\");\n  res.json({success:true,name:req.body.name})\n});\n\napp.post(\"/removeproduct\", async (req, res) => {\n  const product = await Product.findOneAndDelete({ id: req.body.id });\n  console.log(\"Removed\");\n  res.json({success:true,name:req.body.name})\n});\n\n// Endpoint to fetch data from the Hive blockchain\napp.get(\"/hive-accounts\", async (req, res) => {\n  try {\n      const accounts = await hive.api.getAccounts(['account1', 'account2']);\n      res.json(accounts);\n  } catch (error) {\n      console.error(\"Error fetching Hive accounts:\", error);\n      res.status(500).json({ error: \"Failed to fetch Hive accounts\" });\n  }\n});\nconsole.log(\"Before app.listen\"); // Add this line\napp.listen(port, (error) => {\n    if (!error) {\n        console.log(\"Server Running on port \" + port);\n    } else {\n        console.log(\"Error : \", error);\n    }\n});\n\napp.listen(port, (error) => {\n  if (!error) {\n      console.log(\"Server Running on port \" + port);\n  } else {\n      console.log(\"Error : \", error);\n  }\n});\n\n// Endpoint to broadcast a comment to the Hive blockchain\napp.post(\"/hive-post-comment\", async (req, res) => {\ntry {\n    const { author, permlink, body } = req.body;\n    // Broadcasting the comment\n    const result = await hive.broadcast.commentAsync(author, permlink, \"\", \"youraccount\", body);\n    res.json(result);\n} catch (error) {\n    console.error(\"Error posting comment to Hive blockchain:\", error);\n    res.status(500).json({ error: \"Failed to post comment to Hive blockchain\" });\n}\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}