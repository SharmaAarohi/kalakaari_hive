{"ast":null,"code":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\nvar _my;\nvar is_empty;\nvar is_digits;\nvar to_number;\nvar require_match;\nvar require_object_id;\nvar require_object_type;\nvar get_instance;\nvar require_relative_type;\nvar get_relative_instance;\nvar require_protocol_type;\nvar get_protocol_instance;\nvar get_protocol_type;\nvar require_implementation_type;\nvar get_implementation_instance;\nvar Long = require('bytebuffer').Long;\n// var BigInteger = require('bigi');\n\nvar chain_types = require('./ChainTypes');\nvar MAX_SAFE_INT = 9007199254740991;\nvar MIN_SAFE_INT = -9007199254740991;\n\n/**\n    Most validations are skipped and the value returned unchanged when an empty string, null, or undefined is encountered (except \"required\"). \n\n    Validations support a string format for dealing with large numbers.\n*/\nmodule.exports = _my = {\n  is_empty: is_empty = function is_empty(value) {\n    return value === null || value === undefined;\n  },\n  required: function required(value) {\n    var field_name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    if (is_empty(value)) {\n      throw new Error('value required ' + field_name + ' ' + value);\n    }\n    return value;\n  },\n  require_long: function require_long(value) {\n    var field_name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    if (!Long.isLong(value)) {\n      throw new Error('Long value required ' + field_name + ' ' + value);\n    }\n    return value;\n  },\n  string: function string(value) {\n    if (is_empty(value)) {\n      return value;\n    }\n    if (typeof value !== \"string\") {\n      throw new Error('string required: ' + value);\n    }\n    return value;\n  },\n  number: function number(value) {\n    if (is_empty(value)) {\n      return value;\n    }\n    if (typeof value !== \"number\") {\n      throw new Error('number required: ' + value);\n    }\n    return value;\n  },\n  whole_number: function whole_number(value) {\n    var field_name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    if (is_empty(value)) {\n      return value;\n    }\n    if (/\\./.test(value)) {\n      throw new Error('whole number required ' + field_name + ' ' + value);\n    }\n    return value;\n  },\n  unsigned: function unsigned(value) {\n    var field_name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    if (is_empty(value)) {\n      return value;\n    }\n    if (/-/.test(value)) {\n      throw new Error('unsigned required ' + field_name + ' ' + value);\n    }\n    return value;\n  },\n  is_digits: is_digits = function is_digits(value) {\n    if (typeof value === \"numeric\") {\n      return true;\n    }\n    return /^[0-9]+$/.test(value);\n  },\n  to_number: to_number = function to_number(value) {\n    var field_name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    if (is_empty(value)) {\n      return value;\n    }\n    _my.no_overflow53(value, field_name);\n    var int_value = function () {\n      if (typeof value === \"number\") {\n        return value;\n      } else {\n        return parseInt(value);\n      }\n    }();\n    return int_value;\n  },\n  to_long: function to_long(value) {\n    var field_name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    if (is_empty(value)) {\n      return value;\n    }\n    if (Long.isLong(value)) {\n      return value;\n    }\n    _my.no_overflow64(value, field_name);\n    if (typeof value === \"number\") {\n      value = \"\" + value;\n    }\n    return Long.fromString(value);\n  },\n  to_string: function to_string(value) {\n    var field_name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    if (is_empty(value)) {\n      return value;\n    }\n    if (typeof value === \"string\") {\n      return value;\n    }\n    if (typeof value === \"number\") {\n      _my.no_overflow53(value, field_name);\n      return \"\" + value;\n    }\n    if (Long.isLong(value)) {\n      return value.toString();\n    }\n    throw 'unsupported type ' + field_name + ': (' + (typeof value === 'undefined' ? 'undefined' : _typeof(value)) + ') ' + value;\n  },\n  require_test: function require_test(regex, value) {\n    var field_name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n    if (is_empty(value)) {\n      return value;\n    }\n    if (!regex.test(value)) {\n      throw new Error('unmatched ' + regex + ' ' + field_name + ' ' + value);\n    }\n    return value;\n  },\n  require_match: require_match = function require_match(regex, value) {\n    var field_name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n    if (is_empty(value)) {\n      return value;\n    }\n    var match = value.match(regex);\n    if (match === null) {\n      throw new Error('unmatched ' + regex + ' ' + field_name + ' ' + value);\n    }\n    return match;\n  },\n  // require_object_id: require_object_id=function(value, field_name){\n  //     return require_match(\n  //         /^([0-9]+)\\.([0-9]+)\\.([0-9]+)$/,\n  //         value,\n  //         field_name\n  //     );\n  // },\n\n  // Does not support over 53 bits\n  require_range: function require_range(min, max, value) {\n    var field_name = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"\";\n    if (is_empty(value)) {\n      return value;\n    }\n    var number = to_number(value);\n    if (value < min || value > max) {\n      throw new Error('out of range ' + value + ' ' + field_name + ' ' + value);\n    }\n    return value;\n  },\n  require_object_type: require_object_type = function require_object_type() {\n    var reserved_spaces = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    var type = arguments[1];\n    var value = arguments[2];\n    var field_name = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"\";\n    if (is_empty(value)) {\n      return value;\n    }\n    var object_type = chain_types.object_type[type];\n    if (!object_type) {\n      throw new Error('Unknown object type: ' + type + ', ' + field_name + ', ' + value);\n    }\n    var re = new RegExp(reserved_spaces + '.' + object_type + '.[0-9]+$');\n    if (!re.test(value)) {\n      throw new Error('Expecting ' + type + ' in format ' + (reserved_spaces + '.' + object_type + '.[0-9]+ ') + ('instead of ' + value + ' ' + field_name + ' ' + value));\n    }\n    return value;\n  },\n  get_instance: get_instance = function get_instance(reserve_spaces, type, value, field_name) {\n    if (is_empty(value)) {\n      return value;\n    }\n    require_object_type(reserve_spaces, type, value, field_name);\n    return to_number(value.split('.')[2]);\n  },\n  require_relative_type: require_relative_type = function require_relative_type(type, value, field_name) {\n    require_object_type(0, type, value, field_name);\n    return value;\n  },\n  get_relative_instance: get_relative_instance = function get_relative_instance(type, value, field_name) {\n    if (is_empty(value)) {\n      return value;\n    }\n    require_object_type(0, type, value, field_name);\n    return to_number(value.split('.')[2]);\n  },\n  require_protocol_type: require_protocol_type = function require_protocol_type(type, value, field_name) {\n    require_object_type(1, type, value, field_name);\n    return value;\n  },\n  get_protocol_instance: get_protocol_instance = function get_protocol_instance(type, value, field_name) {\n    if (is_empty(value)) {\n      return value;\n    }\n    require_object_type(1, type, value, field_name);\n    return to_number(value.split('.')[2]);\n  },\n  get_protocol_type: get_protocol_type = function get_protocol_type(value, field_name) {\n    if (is_empty(value)) {\n      return value;\n    }\n    require_object_id(value, field_name);\n    var values = value.split('.');\n    return to_number(values[1]);\n  },\n  get_protocol_type_name: function get_protocol_type_name(value, field_name) {\n    if (is_empty(value)) {\n      return value;\n    }\n    var type_id = get_protocol_type(value, field_name);\n    return Object.keys(chain_types.object_type)[type_id];\n  },\n  require_implementation_type: require_implementation_type = function require_implementation_type(type, value, field_name) {\n    require_object_type(2, type, value, field_name);\n    return value;\n  },\n  get_implementation_instance: get_implementation_instance = function get_implementation_instance(type, value, field_name) {\n    if (is_empty(value)) {\n      return value;\n    }\n    require_object_type(2, type, value, field_name);\n    return to_number(value.split('.')[2]);\n  },\n  // signed / unsigned decimal\n  no_overflow53: function no_overflow53(value) {\n    var field_name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    if (typeof value === \"number\") {\n      if (value > MAX_SAFE_INT || value < MIN_SAFE_INT) {\n        throw new Error('overflow ' + field_name + ' ' + value);\n      }\n      return;\n    }\n    if (typeof value === \"string\") {\n      var int = parseInt(value);\n      if (value > MAX_SAFE_INT || value < MIN_SAFE_INT) {\n        throw new Error('overflow ' + field_name + ' ' + value);\n      }\n      return;\n    }\n    if (Long.isLong(value)) {\n      // typeof value.toInt() is 'number'\n      _my.no_overflow53(value.toInt(), field_name);\n      return;\n    }\n    throw 'unsupported type ' + field_name + ': (' + (typeof value === 'undefined' ? 'undefined' : _typeof(value)) + ') ' + value;\n  },\n  // signed / unsigned whole numbers only\n  no_overflow64: function no_overflow64(value) {\n    var field_name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n\n    // https://github.com/dcodeIO/Long.js/issues/20\n    if (Long.isLong(value)) {\n      return;\n    }\n\n    // BigInteger#isBigInteger https://github.com/cryptocoinjs/bigi/issues/20\n    if (value.t !== undefined && value.s !== undefined) {\n      _my.no_overflow64(value.toString(), field_name);\n      return;\n    }\n    if (typeof value === \"string\") {\n      // remove leading zeros, will cause a false positive\n      value = value.replace(/^0+/, '');\n      // remove trailing zeros\n      while (/0$/.test(value)) {\n        value = value.substring(0, value.length - 1);\n      }\n      if (/\\.$/.test(value)) {\n        // remove trailing dot\n        value = value.substring(0, value.length - 1);\n      }\n      if (value === \"\") {\n        value = \"0\";\n      }\n      var long_string = Long.fromString(value).toString();\n      if (long_string !== value.trim()) {\n        throw new Error('overflow ' + field_name + ' ' + value);\n      }\n      return;\n    }\n    if (typeof value === \"number\") {\n      if (value > MAX_SAFE_INT || value < MIN_SAFE_INT) {\n        throw new Error('overflow ' + field_name + ' ' + value);\n      }\n      return;\n    }\n    throw 'unsupported type ' + field_name + ': (' + (typeof value === 'undefined' ? 'undefined' : _typeof(value)) + ') ' + value;\n  }\n};","map":{"version":3,"names":["_typeof","Symbol","iterator","obj","constructor","prototype","_my","is_empty","is_digits","to_number","require_match","require_object_id","require_object_type","get_instance","require_relative_type","get_relative_instance","require_protocol_type","get_protocol_instance","get_protocol_type","require_implementation_type","get_implementation_instance","Long","require","chain_types","MAX_SAFE_INT","MIN_SAFE_INT","module","exports","value","undefined","required","field_name","arguments","length","Error","require_long","isLong","string","number","whole_number","test","unsigned","no_overflow53","int_value","parseInt","to_long","no_overflow64","fromString","to_string","toString","require_test","regex","match","require_range","min","max","reserved_spaces","type","object_type","re","RegExp","reserve_spaces","split","values","get_protocol_type_name","type_id","Object","keys","int","toInt","t","s","replace","substring","long_string","trim"],"sources":["C:/Users/sunil/kalakaari/node_modules/@hiveio/hive-js/lib/auth/serializer/src/validation.js"],"sourcesContent":["'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _my;\nvar is_empty;\nvar is_digits;\nvar to_number;\nvar require_match;\nvar require_object_id;\nvar require_object_type;\nvar get_instance;\nvar require_relative_type;\nvar get_relative_instance;\nvar require_protocol_type;\nvar get_protocol_instance;\nvar get_protocol_type;\nvar require_implementation_type;\nvar get_implementation_instance;\nvar Long = require('bytebuffer').Long;\n// var BigInteger = require('bigi');\n\nvar chain_types = require('./ChainTypes');\n\nvar MAX_SAFE_INT = 9007199254740991;\nvar MIN_SAFE_INT = -9007199254740991;\n\n/**\n    Most validations are skipped and the value returned unchanged when an empty string, null, or undefined is encountered (except \"required\"). \n\n    Validations support a string format for dealing with large numbers.\n*/\nmodule.exports = _my = {\n\n    is_empty: is_empty = function is_empty(value) {\n        return value === null || value === undefined;\n    },\n\n    required: function required(value) {\n        var field_name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n\n        if (is_empty(value)) {\n            throw new Error('value required ' + field_name + ' ' + value);\n        }\n        return value;\n    },\n    require_long: function require_long(value) {\n        var field_name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n\n        if (!Long.isLong(value)) {\n            throw new Error('Long value required ' + field_name + ' ' + value);\n        }\n        return value;\n    },\n    string: function string(value) {\n        if (is_empty(value)) {\n            return value;\n        }\n        if (typeof value !== \"string\") {\n            throw new Error('string required: ' + value);\n        }\n        return value;\n    },\n    number: function number(value) {\n        if (is_empty(value)) {\n            return value;\n        }\n        if (typeof value !== \"number\") {\n            throw new Error('number required: ' + value);\n        }\n        return value;\n    },\n    whole_number: function whole_number(value) {\n        var field_name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n\n        if (is_empty(value)) {\n            return value;\n        }\n        if (/\\./.test(value)) {\n            throw new Error('whole number required ' + field_name + ' ' + value);\n        }\n        return value;\n    },\n    unsigned: function unsigned(value) {\n        var field_name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n\n        if (is_empty(value)) {\n            return value;\n        }\n        if (/-/.test(value)) {\n            throw new Error('unsigned required ' + field_name + ' ' + value);\n        }\n        return value;\n    },\n\n\n    is_digits: is_digits = function is_digits(value) {\n        if (typeof value === \"numeric\") {\n            return true;\n        }\n        return (/^[0-9]+$/.test(value)\n        );\n    },\n\n    to_number: to_number = function to_number(value) {\n        var field_name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n\n        if (is_empty(value)) {\n            return value;\n        }\n        _my.no_overflow53(value, field_name);\n        var int_value = function () {\n            if (typeof value === \"number\") {\n                return value;\n            } else {\n                return parseInt(value);\n            }\n        }();\n        return int_value;\n    },\n\n    to_long: function to_long(value) {\n        var field_name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n\n        if (is_empty(value)) {\n            return value;\n        }\n        if (Long.isLong(value)) {\n            return value;\n        }\n\n        _my.no_overflow64(value, field_name);\n        if (typeof value === \"number\") {\n            value = \"\" + value;\n        }\n        return Long.fromString(value);\n    },\n    to_string: function to_string(value) {\n        var field_name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n\n        if (is_empty(value)) {\n            return value;\n        }\n        if (typeof value === \"string\") {\n            return value;\n        }\n        if (typeof value === \"number\") {\n            _my.no_overflow53(value, field_name);\n            return \"\" + value;\n        }\n        if (Long.isLong(value)) {\n            return value.toString();\n        }\n        throw 'unsupported type ' + field_name + ': (' + (typeof value === 'undefined' ? 'undefined' : _typeof(value)) + ') ' + value;\n    },\n    require_test: function require_test(regex, value) {\n        var field_name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n\n        if (is_empty(value)) {\n            return value;\n        }\n        if (!regex.test(value)) {\n            throw new Error('unmatched ' + regex + ' ' + field_name + ' ' + value);\n        }\n        return value;\n    },\n\n\n    require_match: require_match = function require_match(regex, value) {\n        var field_name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n\n        if (is_empty(value)) {\n            return value;\n        }\n        var match = value.match(regex);\n        if (match === null) {\n            throw new Error('unmatched ' + regex + ' ' + field_name + ' ' + value);\n        }\n        return match;\n    },\n\n    // require_object_id: require_object_id=function(value, field_name){\n    //     return require_match(\n    //         /^([0-9]+)\\.([0-9]+)\\.([0-9]+)$/,\n    //         value,\n    //         field_name\n    //     );\n    // },\n\n    // Does not support over 53 bits\n    require_range: function require_range(min, max, value) {\n        var field_name = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"\";\n\n        if (is_empty(value)) {\n            return value;\n        }\n        var number = to_number(value);\n        if (value < min || value > max) {\n            throw new Error('out of range ' + value + ' ' + field_name + ' ' + value);\n        }\n        return value;\n    },\n\n\n    require_object_type: require_object_type = function require_object_type() {\n        var reserved_spaces = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        var type = arguments[1];\n        var value = arguments[2];\n        var field_name = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"\";\n\n        if (is_empty(value)) {\n            return value;\n        }\n        var object_type = chain_types.object_type[type];\n        if (!object_type) {\n            throw new Error('Unknown object type: ' + type + ', ' + field_name + ', ' + value);\n        }\n        var re = new RegExp(reserved_spaces + '.' + object_type + '.[0-9]+$');\n        if (!re.test(value)) {\n            throw new Error('Expecting ' + type + ' in format ' + (reserved_spaces + '.' + object_type + '.[0-9]+ ') + ('instead of ' + value + ' ' + field_name + ' ' + value));\n        }\n        return value;\n    },\n\n    get_instance: get_instance = function get_instance(reserve_spaces, type, value, field_name) {\n        if (is_empty(value)) {\n            return value;\n        }\n        require_object_type(reserve_spaces, type, value, field_name);\n        return to_number(value.split('.')[2]);\n    },\n\n    require_relative_type: require_relative_type = function require_relative_type(type, value, field_name) {\n        require_object_type(0, type, value, field_name);\n        return value;\n    },\n\n    get_relative_instance: get_relative_instance = function get_relative_instance(type, value, field_name) {\n        if (is_empty(value)) {\n            return value;\n        }\n        require_object_type(0, type, value, field_name);\n        return to_number(value.split('.')[2]);\n    },\n\n    require_protocol_type: require_protocol_type = function require_protocol_type(type, value, field_name) {\n        require_object_type(1, type, value, field_name);\n        return value;\n    },\n\n    get_protocol_instance: get_protocol_instance = function get_protocol_instance(type, value, field_name) {\n        if (is_empty(value)) {\n            return value;\n        }\n        require_object_type(1, type, value, field_name);\n        return to_number(value.split('.')[2]);\n    },\n\n    get_protocol_type: get_protocol_type = function get_protocol_type(value, field_name) {\n        if (is_empty(value)) {\n            return value;\n        }\n        require_object_id(value, field_name);\n        var values = value.split('.');\n        return to_number(values[1]);\n    },\n\n    get_protocol_type_name: function get_protocol_type_name(value, field_name) {\n        if (is_empty(value)) {\n            return value;\n        }\n        var type_id = get_protocol_type(value, field_name);\n        return Object.keys(chain_types.object_type)[type_id];\n    },\n\n\n    require_implementation_type: require_implementation_type = function require_implementation_type(type, value, field_name) {\n        require_object_type(2, type, value, field_name);\n        return value;\n    },\n\n    get_implementation_instance: get_implementation_instance = function get_implementation_instance(type, value, field_name) {\n        if (is_empty(value)) {\n            return value;\n        }\n        require_object_type(2, type, value, field_name);\n        return to_number(value.split('.')[2]);\n    },\n\n    // signed / unsigned decimal\n    no_overflow53: function no_overflow53(value) {\n        var field_name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n\n        if (typeof value === \"number\") {\n            if (value > MAX_SAFE_INT || value < MIN_SAFE_INT) {\n                throw new Error('overflow ' + field_name + ' ' + value);\n            }\n            return;\n        }\n        if (typeof value === \"string\") {\n            var int = parseInt(value);\n            if (value > MAX_SAFE_INT || value < MIN_SAFE_INT) {\n                throw new Error('overflow ' + field_name + ' ' + value);\n            }\n            return;\n        }\n        if (Long.isLong(value)) {\n            // typeof value.toInt() is 'number'\n            _my.no_overflow53(value.toInt(), field_name);\n            return;\n        }\n        throw 'unsupported type ' + field_name + ': (' + (typeof value === 'undefined' ? 'undefined' : _typeof(value)) + ') ' + value;\n    },\n\n\n    // signed / unsigned whole numbers only\n    no_overflow64: function no_overflow64(value) {\n        var field_name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n\n        // https://github.com/dcodeIO/Long.js/issues/20\n        if (Long.isLong(value)) {\n            return;\n        }\n\n        // BigInteger#isBigInteger https://github.com/cryptocoinjs/bigi/issues/20\n        if (value.t !== undefined && value.s !== undefined) {\n            _my.no_overflow64(value.toString(), field_name);\n            return;\n        }\n\n        if (typeof value === \"string\") {\n            // remove leading zeros, will cause a false positive\n            value = value.replace(/^0+/, '');\n            // remove trailing zeros\n            while (/0$/.test(value)) {\n                value = value.substring(0, value.length - 1);\n            }\n            if (/\\.$/.test(value)) {\n                // remove trailing dot\n                value = value.substring(0, value.length - 1);\n            }\n            if (value === \"\") {\n                value = \"0\";\n            }\n            var long_string = Long.fromString(value).toString();\n            if (long_string !== value.trim()) {\n                throw new Error('overflow ' + field_name + ' ' + value);\n            }\n            return;\n        }\n        if (typeof value === \"number\") {\n            if (value > MAX_SAFE_INT || value < MIN_SAFE_INT) {\n                throw new Error('overflow ' + field_name + ' ' + value);\n            }\n            return;\n        }\n\n        throw 'unsupported type ' + field_name + ': (' + (typeof value === 'undefined' ? 'undefined' : _typeof(value)) + ') ' + value;\n    }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}