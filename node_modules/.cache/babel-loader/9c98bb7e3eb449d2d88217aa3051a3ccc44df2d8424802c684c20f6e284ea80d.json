{"ast":null,"code":"'use strict';\n\nvar _createHash = require('create-hash');\nvar _createHash2 = _interopRequireDefault(_createHash);\nvar _createHmac = require('create-hmac');\nvar _createHmac2 = _interopRequireDefault(_createHmac);\nvar _ripemd = require('ripemd160');\nvar _ripemd2 = _interopRequireDefault(_ripemd);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/** @arg {string|Buffer} data\n    @arg {string} [digest = null] - 'hex', 'binary' or 'base64'\n    @return {string|Buffer} - Buffer when digest is null, or string\n*/\nfunction sha1(data, encoding) {\n  return (0, _createHash2.default)('sha1').update(data).digest(encoding);\n}\n\n/** @arg {string|Buffer} data\n    @arg {string} [digest = null] - 'hex', 'binary' or 'base64'\n    @return {string|Buffer} - Buffer when digest is null, or string\n*/\nfunction sha256(data, encoding) {\n  return (0, _createHash2.default)('sha256').update(data).digest(encoding);\n}\n\n/** @arg {string|Buffer} data\n    @arg {string} [digest = null] - 'hex', 'binary' or 'base64'\n    @return {string|Buffer} - Buffer when digest is null, or string\n*/\nfunction sha512(data, encoding) {\n  return (0, _createHash2.default)('sha512').update(data).digest(encoding);\n}\nfunction HmacSHA256(buffer, secret) {\n  return (0, _createHmac2.default)('sha256', secret).update(buffer).digest();\n}\nfunction ripemd160(data) {\n  return new _ripemd2.default().update(data).digest();\n}\n\n// function hash160(buffer) {\n//   return ripemd160(sha256(buffer))\n// }\n// \n// function hash256(buffer) {\n//   return sha256(sha256(buffer))\n// }\n\n// \n// function HmacSHA512(buffer, secret) {\n//   return crypto.createHmac('sha512', secret).update(buffer).digest()\n// }\n\nmodule.exports = {\n  sha1: sha1,\n  sha256: sha256,\n  sha512: sha512,\n  HmacSHA256: HmacSHA256,\n  ripemd160: ripemd160\n  // hash160: hash160,\n  // hash256: hash256,\n  // HmacSHA512: HmacSHA512\n};","map":{"version":3,"names":["_createHash","require","_createHash2","_interopRequireDefault","_createHmac","_createHmac2","_ripemd","_ripemd2","obj","__esModule","default","sha1","data","encoding","update","digest","sha256","sha512","HmacSHA256","buffer","secret","ripemd160","module","exports"],"sources":["C:/Users/sunil/kalakaari/node_modules/@hiveio/hive-js/lib/auth/ecc/src/hash.js"],"sourcesContent":["'use strict';\n\nvar _createHash = require('create-hash');\n\nvar _createHash2 = _interopRequireDefault(_createHash);\n\nvar _createHmac = require('create-hmac');\n\nvar _createHmac2 = _interopRequireDefault(_createHmac);\n\nvar _ripemd = require('ripemd160');\n\nvar _ripemd2 = _interopRequireDefault(_ripemd);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** @arg {string|Buffer} data\n    @arg {string} [digest = null] - 'hex', 'binary' or 'base64'\n    @return {string|Buffer} - Buffer when digest is null, or string\n*/\nfunction sha1(data, encoding) {\n    return (0, _createHash2.default)('sha1').update(data).digest(encoding);\n}\n\n/** @arg {string|Buffer} data\n    @arg {string} [digest = null] - 'hex', 'binary' or 'base64'\n    @return {string|Buffer} - Buffer when digest is null, or string\n*/\nfunction sha256(data, encoding) {\n    return (0, _createHash2.default)('sha256').update(data).digest(encoding);\n}\n\n/** @arg {string|Buffer} data\n    @arg {string} [digest = null] - 'hex', 'binary' or 'base64'\n    @return {string|Buffer} - Buffer when digest is null, or string\n*/\nfunction sha512(data, encoding) {\n    return (0, _createHash2.default)('sha512').update(data).digest(encoding);\n}\n\nfunction HmacSHA256(buffer, secret) {\n    return (0, _createHmac2.default)('sha256', secret).update(buffer).digest();\n}\n\nfunction ripemd160(data) {\n    return new _ripemd2.default().update(data).digest();\n}\n\n// function hash160(buffer) {\n//   return ripemd160(sha256(buffer))\n// }\n// \n// function hash256(buffer) {\n//   return sha256(sha256(buffer))\n// }\n\n// \n// function HmacSHA512(buffer, secret) {\n//   return crypto.createHmac('sha512', secret).update(buffer).digest()\n// }\n\nmodule.exports = {\n    sha1: sha1,\n    sha256: sha256,\n    sha512: sha512,\n    HmacSHA256: HmacSHA256,\n    ripemd160: ripemd160\n    // hash160: hash160,\n    // hash256: hash256,\n    // HmacSHA512: HmacSHA512\n};"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,WAAW,GAAGC,OAAO,CAAC,aAAa,CAAC;AAExC,IAAIC,YAAY,GAAGC,sBAAsB,CAACH,WAAW,CAAC;AAEtD,IAAII,WAAW,GAAGH,OAAO,CAAC,aAAa,CAAC;AAExC,IAAII,YAAY,GAAGF,sBAAsB,CAACC,WAAW,CAAC;AAEtD,IAAIE,OAAO,GAAGL,OAAO,CAAC,WAAW,CAAC;AAElC,IAAIM,QAAQ,GAAGJ,sBAAsB,CAACG,OAAO,CAAC;AAE9C,SAASH,sBAAsBA,CAACK,GAAG,EAAE;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAGD,GAAG,GAAG;IAAEE,OAAO,EAAEF;EAAI,CAAC;AAAE;;AAE9F;AACA;AACA;AACA;AACA,SAASG,IAAIA,CAACC,IAAI,EAAEC,QAAQ,EAAE;EAC1B,OAAO,CAAC,CAAC,EAAEX,YAAY,CAACQ,OAAO,EAAE,MAAM,CAAC,CAACI,MAAM,CAACF,IAAI,CAAC,CAACG,MAAM,CAACF,QAAQ,CAAC;AAC1E;;AAEA;AACA;AACA;AACA;AACA,SAASG,MAAMA,CAACJ,IAAI,EAAEC,QAAQ,EAAE;EAC5B,OAAO,CAAC,CAAC,EAAEX,YAAY,CAACQ,OAAO,EAAE,QAAQ,CAAC,CAACI,MAAM,CAACF,IAAI,CAAC,CAACG,MAAM,CAACF,QAAQ,CAAC;AAC5E;;AAEA;AACA;AACA;AACA;AACA,SAASI,MAAMA,CAACL,IAAI,EAAEC,QAAQ,EAAE;EAC5B,OAAO,CAAC,CAAC,EAAEX,YAAY,CAACQ,OAAO,EAAE,QAAQ,CAAC,CAACI,MAAM,CAACF,IAAI,CAAC,CAACG,MAAM,CAACF,QAAQ,CAAC;AAC5E;AAEA,SAASK,UAAUA,CAACC,MAAM,EAAEC,MAAM,EAAE;EAChC,OAAO,CAAC,CAAC,EAAEf,YAAY,CAACK,OAAO,EAAE,QAAQ,EAAEU,MAAM,CAAC,CAACN,MAAM,CAACK,MAAM,CAAC,CAACJ,MAAM,CAAC,CAAC;AAC9E;AAEA,SAASM,SAASA,CAACT,IAAI,EAAE;EACrB,OAAO,IAAIL,QAAQ,CAACG,OAAO,CAAC,CAAC,CAACI,MAAM,CAACF,IAAI,CAAC,CAACG,MAAM,CAAC,CAAC;AACvD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEAO,MAAM,CAACC,OAAO,GAAG;EACbZ,IAAI,EAAEA,IAAI;EACVK,MAAM,EAAEA,MAAM;EACdC,MAAM,EAAEA,MAAM;EACdC,UAAU,EAAEA,UAAU;EACtBG,SAAS,EAAEA;EACX;EACA;EACA;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}