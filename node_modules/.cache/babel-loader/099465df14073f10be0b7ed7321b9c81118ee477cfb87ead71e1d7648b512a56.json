{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\nvar _api = require('../api');\nvar _api2 = _interopRequireDefault(_api);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nexports = module.exports = function (hiveBroadcast) {\n  hiveBroadcast.addAccountAuth = function (_ref, cb) {\n    var signingKey = _ref.signingKey,\n      username = _ref.username,\n      authorizedUsername = _ref.authorizedUsername,\n      _ref$role = _ref.role,\n      role = _ref$role === undefined ? 'posting' : _ref$role,\n      weight = _ref.weight;\n    _api2.default.getAccounts([username], function (err, _ref2) {\n      var _ref3 = _slicedToArray(_ref2, 1),\n        userAccount = _ref3[0];\n      if (err) {\n        return cb(new Error(err), null);\n      }\n      if (!userAccount) {\n        return cb(new Error('Invalid account name'), null);\n      }\n      var updatedAuthority = userAccount[role];\n\n      /** Release callback if the account already exist in the account_auths array */\n      var authorizedAccounts = updatedAuthority.account_auths.map(function (auth) {\n        return auth[0];\n      });\n      var hasAuthority = authorizedAccounts.indexOf(authorizedUsername) !== -1;\n      if (hasAuthority) {\n        return cb(null, null);\n      }\n\n      /** Use weight_thresold as default weight */\n      weight = weight || userAccount[role].weight_threshold;\n      updatedAuthority.account_auths.push([authorizedUsername, weight]);\n      var owner = role === 'owner' ? updatedAuthority : undefined;\n      var active = role === 'active' ? updatedAuthority : undefined;\n      var posting = role === 'posting' ? updatedAuthority : undefined;\n\n      /** Add authority on user account */\n      hiveBroadcast.accountUpdate(signingKey, userAccount.name, owner, active, posting, userAccount.memo_key, userAccount.json_metadata, cb);\n    });\n  };\n  hiveBroadcast.removeAccountAuth = function (_ref4, cb) {\n    var signingKey = _ref4.signingKey,\n      username = _ref4.username,\n      authorizedUsername = _ref4.authorizedUsername,\n      _ref4$role = _ref4.role,\n      role = _ref4$role === undefined ? 'posting' : _ref4$role;\n    _api2.default.getAccounts([username], function (err, _ref5) {\n      var _ref6 = _slicedToArray(_ref5, 1),\n        userAccount = _ref6[0];\n      if (err) {\n        return cb(new Error(err), null);\n      }\n      if (!userAccount) {\n        return cb(new Error('Invalid account name'), null);\n      }\n      var updatedAuthority = userAccount[role];\n      var totalAuthorizedUser = updatedAuthority.account_auths.length;\n      for (var i = 0; i < totalAuthorizedUser; i++) {\n        var user = updatedAuthority.account_auths[i];\n        if (user[0] === authorizedUsername) {\n          updatedAuthority.account_auths.splice(i, 1);\n          break;\n        }\n      }\n\n      /** Release callback if the account does not exist in the account_auths array */\n      if (totalAuthorizedUser === updatedAuthority.account_auths.length) {\n        return cb(null, null);\n      }\n      var owner = role === 'owner' ? updatedAuthority : undefined;\n      var active = role === 'active' ? updatedAuthority : undefined;\n      var posting = role === 'posting' ? updatedAuthority : undefined;\n      hiveBroadcast.accountUpdate(signingKey, userAccount.name, owner, active, posting, userAccount.memo_key, userAccount.json_metadata, cb);\n    });\n  };\n  hiveBroadcast.addKeyAuth = function (_ref7, cb) {\n    var signingKey = _ref7.signingKey,\n      username = _ref7.username,\n      authorizedKey = _ref7.authorizedKey,\n      _ref7$role = _ref7.role,\n      role = _ref7$role === undefined ? 'posting' : _ref7$role,\n      weight = _ref7.weight;\n    _api2.default.getAccounts([username], function (err, _ref8) {\n      var _ref9 = _slicedToArray(_ref8, 1),\n        userAccount = _ref9[0];\n      if (err) {\n        return cb(new Error(err), null);\n      }\n      if (!userAccount) {\n        return cb(new Error('Invalid account name'), null);\n      }\n      var updatedAuthority = userAccount[role];\n\n      /** Release callback if the key already exist in the key_auths array */\n      var authorizedKeys = updatedAuthority.key_auths.map(function (auth) {\n        return auth[0];\n      });\n      var hasAuthority = authorizedKeys.indexOf(authorizedKey) !== -1;\n      if (hasAuthority) {\n        return cb(null, null);\n      }\n\n      /** Use weight_thresold as default weight */\n      weight = weight || userAccount[role].weight_threshold;\n      updatedAuthority.key_auths.push([authorizedKey, weight]);\n      var owner = role === 'owner' ? updatedAuthority : undefined;\n      var active = role === 'active' ? updatedAuthority : undefined;\n      var posting = role === 'posting' ? updatedAuthority : undefined;\n\n      /** Add authority on user account */\n      hiveBroadcast.accountUpdate(signingKey, userAccount.name, owner, active, posting, userAccount.memo_key, userAccount.json_metadata, cb);\n    });\n  };\n  hiveBroadcast.removeKeyAuth = function (_ref10, cb) {\n    var signingKey = _ref10.signingKey,\n      username = _ref10.username,\n      authorizedKey = _ref10.authorizedKey,\n      _ref10$role = _ref10.role,\n      role = _ref10$role === undefined ? 'posting' : _ref10$role;\n    _api2.default.getAccounts([username], function (err, _ref11) {\n      var _ref12 = _slicedToArray(_ref11, 1),\n        userAccount = _ref12[0];\n      if (err) {\n        return cb(new Error(err), null);\n      }\n      if (!userAccount) {\n        return cb(new Error('Invalid account name'), null);\n      }\n      var updatedAuthority = userAccount[role];\n      var totalAuthorizedKey = updatedAuthority.key_auths.length;\n      for (var i = 0; i < totalAuthorizedKey; i++) {\n        var user = updatedAuthority.key_auths[i];\n        if (user[0] === authorizedKey) {\n          updatedAuthority.key_auths.splice(i, 1);\n          break;\n        }\n      }\n\n      /** Release callback if the key does not exist in the key_auths array */\n      if (totalAuthorizedKey === updatedAuthority.key_auths.length) {\n        return cb(null, null);\n      }\n      var owner = role === 'owner' ? updatedAuthority : undefined;\n      var active = role === 'active' ? updatedAuthority : undefined;\n      var posting = role === 'posting' ? updatedAuthority : undefined;\n      hiveBroadcast.accountUpdate(signingKey, userAccount.name, owner, active, posting, userAccount.memo_key, userAccount.json_metadata, cb);\n    });\n  };\n};","map":{"version":3,"names":["_slicedToArray","sliceIterator","arr","i","_arr","_n","_d","_e","undefined","_i","Symbol","iterator","_s","next","done","push","value","length","err","Array","isArray","Object","TypeError","_api","require","_api2","_interopRequireDefault","obj","__esModule","default","exports","module","hiveBroadcast","addAccountAuth","_ref","cb","signingKey","username","authorizedUsername","_ref$role","role","weight","getAccounts","_ref2","_ref3","userAccount","Error","updatedAuthority","authorizedAccounts","account_auths","map","auth","hasAuthority","indexOf","weight_threshold","owner","active","posting","accountUpdate","name","memo_key","json_metadata","removeAccountAuth","_ref4","_ref4$role","_ref5","_ref6","totalAuthorizedUser","user","splice","addKeyAuth","_ref7","authorizedKey","_ref7$role","_ref8","_ref9","authorizedKeys","key_auths","removeKeyAuth","_ref10","_ref10$role","_ref11","_ref12","totalAuthorizedKey"],"sources":["C:/Users/sunil/kalakaari/node_modules/@hiveio/hive-js/lib/broadcast/helpers.js"],"sourcesContent":["'use strict';\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _api = require('../api');\n\nvar _api2 = _interopRequireDefault(_api);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports = module.exports = function (hiveBroadcast) {\n  hiveBroadcast.addAccountAuth = function (_ref, cb) {\n    var signingKey = _ref.signingKey,\n        username = _ref.username,\n        authorizedUsername = _ref.authorizedUsername,\n        _ref$role = _ref.role,\n        role = _ref$role === undefined ? 'posting' : _ref$role,\n        weight = _ref.weight;\n\n    _api2.default.getAccounts([username], function (err, _ref2) {\n      var _ref3 = _slicedToArray(_ref2, 1),\n          userAccount = _ref3[0];\n\n      if (err) {\n        return cb(new Error(err), null);\n      }\n      if (!userAccount) {\n        return cb(new Error('Invalid account name'), null);\n      }\n\n      var updatedAuthority = userAccount[role];\n\n      /** Release callback if the account already exist in the account_auths array */\n      var authorizedAccounts = updatedAuthority.account_auths.map(function (auth) {\n        return auth[0];\n      });\n      var hasAuthority = authorizedAccounts.indexOf(authorizedUsername) !== -1;\n      if (hasAuthority) {\n        return cb(null, null);\n      }\n\n      /** Use weight_thresold as default weight */\n      weight = weight || userAccount[role].weight_threshold;\n      updatedAuthority.account_auths.push([authorizedUsername, weight]);\n      var owner = role === 'owner' ? updatedAuthority : undefined;\n      var active = role === 'active' ? updatedAuthority : undefined;\n      var posting = role === 'posting' ? updatedAuthority : undefined;\n\n      /** Add authority on user account */\n      hiveBroadcast.accountUpdate(signingKey, userAccount.name, owner, active, posting, userAccount.memo_key, userAccount.json_metadata, cb);\n    });\n  };\n\n  hiveBroadcast.removeAccountAuth = function (_ref4, cb) {\n    var signingKey = _ref4.signingKey,\n        username = _ref4.username,\n        authorizedUsername = _ref4.authorizedUsername,\n        _ref4$role = _ref4.role,\n        role = _ref4$role === undefined ? 'posting' : _ref4$role;\n\n    _api2.default.getAccounts([username], function (err, _ref5) {\n      var _ref6 = _slicedToArray(_ref5, 1),\n          userAccount = _ref6[0];\n\n      if (err) {\n        return cb(new Error(err), null);\n      }\n      if (!userAccount) {\n        return cb(new Error('Invalid account name'), null);\n      }\n\n      var updatedAuthority = userAccount[role];\n      var totalAuthorizedUser = updatedAuthority.account_auths.length;\n      for (var i = 0; i < totalAuthorizedUser; i++) {\n        var user = updatedAuthority.account_auths[i];\n        if (user[0] === authorizedUsername) {\n          updatedAuthority.account_auths.splice(i, 1);\n          break;\n        }\n      }\n\n      /** Release callback if the account does not exist in the account_auths array */\n      if (totalAuthorizedUser === updatedAuthority.account_auths.length) {\n        return cb(null, null);\n      }\n\n      var owner = role === 'owner' ? updatedAuthority : undefined;\n      var active = role === 'active' ? updatedAuthority : undefined;\n      var posting = role === 'posting' ? updatedAuthority : undefined;\n\n      hiveBroadcast.accountUpdate(signingKey, userAccount.name, owner, active, posting, userAccount.memo_key, userAccount.json_metadata, cb);\n    });\n  };\n\n  hiveBroadcast.addKeyAuth = function (_ref7, cb) {\n    var signingKey = _ref7.signingKey,\n        username = _ref7.username,\n        authorizedKey = _ref7.authorizedKey,\n        _ref7$role = _ref7.role,\n        role = _ref7$role === undefined ? 'posting' : _ref7$role,\n        weight = _ref7.weight;\n\n    _api2.default.getAccounts([username], function (err, _ref8) {\n      var _ref9 = _slicedToArray(_ref8, 1),\n          userAccount = _ref9[0];\n\n      if (err) {\n        return cb(new Error(err), null);\n      }\n      if (!userAccount) {\n        return cb(new Error('Invalid account name'), null);\n      }\n\n      var updatedAuthority = userAccount[role];\n\n      /** Release callback if the key already exist in the key_auths array */\n      var authorizedKeys = updatedAuthority.key_auths.map(function (auth) {\n        return auth[0];\n      });\n      var hasAuthority = authorizedKeys.indexOf(authorizedKey) !== -1;\n      if (hasAuthority) {\n        return cb(null, null);\n      }\n\n      /** Use weight_thresold as default weight */\n      weight = weight || userAccount[role].weight_threshold;\n      updatedAuthority.key_auths.push([authorizedKey, weight]);\n      var owner = role === 'owner' ? updatedAuthority : undefined;\n      var active = role === 'active' ? updatedAuthority : undefined;\n      var posting = role === 'posting' ? updatedAuthority : undefined;\n\n      /** Add authority on user account */\n      hiveBroadcast.accountUpdate(signingKey, userAccount.name, owner, active, posting, userAccount.memo_key, userAccount.json_metadata, cb);\n    });\n  };\n\n  hiveBroadcast.removeKeyAuth = function (_ref10, cb) {\n    var signingKey = _ref10.signingKey,\n        username = _ref10.username,\n        authorizedKey = _ref10.authorizedKey,\n        _ref10$role = _ref10.role,\n        role = _ref10$role === undefined ? 'posting' : _ref10$role;\n\n    _api2.default.getAccounts([username], function (err, _ref11) {\n      var _ref12 = _slicedToArray(_ref11, 1),\n          userAccount = _ref12[0];\n\n      if (err) {\n        return cb(new Error(err), null);\n      }\n      if (!userAccount) {\n        return cb(new Error('Invalid account name'), null);\n      }\n\n      var updatedAuthority = userAccount[role];\n      var totalAuthorizedKey = updatedAuthority.key_auths.length;\n      for (var i = 0; i < totalAuthorizedKey; i++) {\n        var user = updatedAuthority.key_auths[i];\n        if (user[0] === authorizedKey) {\n          updatedAuthority.key_auths.splice(i, 1);\n          break;\n        }\n      }\n\n      /** Release callback if the key does not exist in the key_auths array */\n      if (totalAuthorizedKey === updatedAuthority.key_auths.length) {\n        return cb(null, null);\n      }\n\n      var owner = role === 'owner' ? updatedAuthority : undefined;\n      var active = role === 'active' ? updatedAuthority : undefined;\n      var posting = role === 'posting' ? updatedAuthority : undefined;\n\n      hiveBroadcast.accountUpdate(signingKey, userAccount.name, owner, active, posting, userAccount.memo_key, userAccount.json_metadata, cb);\n    });\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}